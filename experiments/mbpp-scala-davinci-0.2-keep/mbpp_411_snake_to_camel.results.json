{
  "name": "mbpp_411_snake_to_camel",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeci4zp3q.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var upper = false\n        for (c <- word) {\n            if (c == '_') {\n                upper = true\n            } else {\n                if (upper) {\n                    result += c.toUpper\n                    upper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn9y_ryby.scala:23)\n\tat Problem.main(tmpn9y_ryby.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxecrjzxk.scala:15)\n\tat Problem.main(tmpxecrjzxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var first = true\n        for (c <- word) {\n            if (c == '_') {\n                first = true\n            } else {\n                if (first) {\n                    result += c.toUpper\n                    first = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val result = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) result.append(words(i))\n            else result.append(words(i).capitalize)\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpclpe2f3v.scala:15)\n\tat Problem.main(tmpclpe2f3v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk2qa4l7u.scala:23)\n\tat Problem.main(tmpk2qa4l7u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk2qa4l7u.scala:23)\n\tat Problem.main(tmpk2qa4l7u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(x => x.head.toUpper + x.tail).mkString(\"\")\n        camel.head.toLower + camel.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509941,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqhl5cww_.scala:11)\n\tat Problem.main(tmpqhl5cww_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeci4zp3q.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 2\n            }\n            else {\n                camel += word(i)\n                i += 1\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3k1teie2.scala:21)\n\tat Problem.main(tmp3k1teie2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk8i7wohk.scala:23)\n\tat Problem.main(tmpk8i7wohk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val firstWord = words(0)\n        val restWords = words.drop(1)\n        val camelCase = restWords.foldLeft(firstWord)((acc, word) => acc + word.capitalize)\n        camelCase\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprw8j_xz8.scala:13)\n\tat Problem.main(tmprw8j_xz8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(w => w.capitalize).mkString(\"\")\n        camel.head.toLower + camel.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptg8zwg8v.scala:11)\n\tat Problem.main(tmptg8zwg8v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        sb.append(words(0))\n        for (i <- 1 until words.length) {\n            sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp017yuaj2.scala:15)\n\tat Problem.main(tmp017yuaj2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                i += 1\n                result += word(i).toUpper\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp92l4rgd6.scala:20)\n\tat Problem.main(tmp92l4rgd6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 2\n            } else {\n                camel += word(i)\n                i += 1\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsa96c0xm.scala:20)\n\tat Problem.main(tmpsa96c0xm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString(\"\")\n        camel.head.toLower + camel.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf9rd7nqc.scala:11)\n\tat Problem.main(tmpf9rd7nqc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu5dn35mc.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk8i7wohk.scala:23)\n\tat Problem.main(tmpk8i7wohk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else if (flag) {\n                result += c.toUpper\n                flag = false\n            }\n            else result += c\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwcqmzk2m.scala:19)\n\tat Problem.main(tmpwcqmzk2m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(_.capitalize).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var ans = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                ans += word(i + 1).toUpper\n                i += 1\n            } else ans += word(i)\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw97e_73i.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var capital = false\n        for (char <- word) {\n            if (char == '_') capital = true\n            else {\n                if (capital) {\n                    result += char.toUpper\n                    capital = false\n                }\n                else result += char\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqlvou1p7.scala:21)\n\tat Problem.main(tmpqlvou1p7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu5dn35mc.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu5dn35mc.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    camel += c.toUpper\n                    nextUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4iuaxhbh.scala:23)\n\tat Problem.main(tmp4iuaxhbh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') {\n                flag = true\n            } else {\n                if (flag) {\n                    result += c.toUpper\n                    flag = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph4vmx9oq.scala:23)\n\tat Problem.main(tmph4vmx9oq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(x => x.capitalize).mkString(\"\")\n        camel.head.toLower + camel.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsuh298nl.scala:11)\n\tat Problem.main(tmpsuh298nl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) {\n                sb.append(words(i))\n            } else {\n                sb.append(words(i).capitalize)\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4z50o1p8.scala:18)\n\tat Problem.main(tmp4z50o1p8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxecrjzxk.scala:15)\n\tat Problem.main(tmpxecrjzxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk2qa4l7u.scala:23)\n\tat Problem.main(tmpk2qa4l7u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString(\"\")\n        camel.head.toLower + camel.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf9rd7nqc.scala:11)\n\tat Problem.main(tmpf9rd7nqc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxecrjzxk.scala:15)\n\tat Problem.main(tmpxecrjzxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    camel += c.toUpper\n                    nextUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4iuaxhbh.scala:23)\n\tat Problem.main(tmp4iuaxhbh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk2qa4l7u.scala:23)\n\tat Problem.main(tmpk2qa4l7u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxecrjzxk.scala:15)\n\tat Problem.main(tmpxecrjzxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 2\n            } else {\n                camel += word(i)\n                i += 1\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsa96c0xm.scala:20)\n\tat Problem.main(tmpsa96c0xm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy93psbgu.scala:20)\n\tat Problem.main(tmpy93psbgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camelCase = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camelCase += word(i + 1).toUpper\n                i += 1\n            } else {\n                camelCase += word(i)\n            }\n        }\n        camelCase\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5lalxp1_.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else {\n                if (flag) result += c.toUpper\n                else result += c\n                flag = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk4hd1zu1.scala:19)\n\tat Problem.main(tmpk4hd1zu1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy93psbgu.scala:20)\n\tat Problem.main(tmpy93psbgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var res = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                res += word(i + 1).toUpper\n                i += 2\n            } else {\n                res += word(i)\n                i += 1\n            }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprfbkhfwr.scala:20)\n\tat Problem.main(tmprfbkhfwr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = new StringBuilder\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 2\n            }\n            else {\n                camel += word(i)\n                i += 1\n            }\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoc1hfijm.scala:21)\n\tat Problem.main(tmpoc1hfijm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxecrjzxk.scala:15)\n\tat Problem.main(tmpxecrjzxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += word(i).toUpper\n                    isFirst = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i+1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc73k91tl.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            val w = words(i)\n            if (i == 0) sb.append(w)\n            else sb.append(w.capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1t8gotd8.scala:16)\n\tat Problem.main(tmp1t8gotd8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += word(i).toUpper\n                    isFirst = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk8i7wohk.scala:23)\n\tat Problem.main(tmpk8i7wohk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                }\n                else result += c\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptviynsvh.scala:21)\n\tat Problem.main(tmptviynsvh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu5dn35mc.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) camel.append(words(i))\n            else camel.append(words(i).capitalize)\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2zcubeln.scala:15)\n\tat Problem.main(tmp2zcubeln.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString(\"\")\n        camel.head.toLower + camel.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf9rd7nqc.scala:11)\n\tat Problem.main(tmpf9rd7nqc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var capitalize = false\n        for (c <- word) {\n            if (c == '_') {\n                capitalize = true\n            } else {\n                if (capitalize) {\n                    result += c.toUpper\n                    capitalize = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprtn_vmx1.scala:23)\n\tat Problem.main(tmprtn_vmx1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeci4zp3q.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) camel.append(words(i))\n            else camel.append(words(i).capitalize)\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2zcubeln.scala:15)\n\tat Problem.main(tmp2zcubeln.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxecrjzxk.scala:15)\n\tat Problem.main(tmpxecrjzxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeci4zp3q.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    camel += c.toUpper\n                    isUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl8zi4yqj.scala:23)\n\tat Problem.main(tmpl8zi4yqj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isNextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isNextUpper = true\n            } else {\n                if (isNextUpper) {\n                    result += c.toUpper\n                    isNextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6a6n620c.scala:23)\n\tat Problem.main(tmp6a6n620c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.reduceLeft((a, b) => a + b.capitalize)\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptt2gcgee.scala:10)\n\tat Problem.main(tmptt2gcgee.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk2qa4l7u.scala:23)\n\tat Problem.main(tmpk2qa4l7u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeci4zp3q.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var flag = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') flag = true\n            else if (flag) {\n                camel += word(i).toUpper\n                flag = false\n            }\n            else camel += word(i)\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplel40ock.scala:19)\n\tat Problem.main(tmplel40ock.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                i += 1\n                result += word(i).toUpper\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp92l4rgd6.scala:20)\n\tat Problem.main(tmp92l4rgd6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var upper = false\n        for (c <- word) {\n            if (c == '_') {\n                upper = true\n            } else {\n                if (upper) {\n                    result += c.toUpper\n                    upper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn9y_ryby.scala:23)\n\tat Problem.main(tmpn9y_ryby.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(x => x.head.toUpper + x.tail).mkString(\"\")\n        camel.head.toLower + camel.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509941,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqhl5cww_.scala:11)\n\tat Problem.main(tmpqhl5cww_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxecrjzxk.scala:15)\n\tat Problem.main(tmpxecrjzxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        camel.append(words(0))\n        for (i <- 1 until words.length) {\n            camel.append(words(i).capitalize)\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpssdfdo86.scala:15)\n\tat Problem.main(tmpssdfdo86.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var upper = false\n        for (c <- word) {\n            if (c == '_') {\n                upper = true\n            } else {\n                if (upper) {\n                    result += c.toUpper\n                    upper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn9y_ryby.scala:23)\n\tat Problem.main(tmpn9y_ryby.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxecrjzxk.scala:15)\n\tat Problem.main(tmpxecrjzxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else if (isFirst) {\n                result += c.toUpper\n                isFirst = false\n            }\n            else result += c\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else {\n                if (flag) result += c.toUpper\n                else result += c\n                flag = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk4hd1zu1.scala:19)\n\tat Problem.main(tmpk4hd1zu1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            }\n            else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaot2pbpq.scala:21)\n\tat Problem.main(tmpaot2pbpq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy93psbgu.scala:20)\n\tat Problem.main(tmpy93psbgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else if (isFirst) {\n                result += c.toUpper\n                isFirst = false\n            }\n            else result += c\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy93psbgu.scala:20)\n\tat Problem.main(tmpy93psbgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else {\n                if (isFirst) result += c.toUpper\n                else result += c\n                isFirst = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val result = new StringBuilder\n        result.append(words(0))\n        for (i <- 1 until words.length) {\n            result.append(words(i).capitalize)\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgpo_gay1.scala:15)\n\tat Problem.main(tmpgpo_gay1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    camel += c.toUpper\n                    nextUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4iuaxhbh.scala:23)\n\tat Problem.main(tmp4iuaxhbh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val result = new StringBuilder\n        result.append(words(0))\n        for (i <- 1 until words.length) {\n            result.append(words(i).capitalize)\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgpo_gay1.scala:15)\n\tat Problem.main(tmpgpo_gay1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeci4zp3q.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else {\n                if (isFirst) result += c.toUpper\n                else result += c\n                isFirst = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk2qa4l7u.scala:23)\n\tat Problem.main(tmpk2qa4l7u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val result = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) result.append(words(i))\n            else result.append(words(i).capitalize)\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpclpe2f3v.scala:15)\n\tat Problem.main(tmpclpe2f3v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                }\n                else result += c\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = new StringBuilder\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122803,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdyhh8slb.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeci4zp3q.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        word.split(\"_\").map(x => x.head.toUpper + x.tail).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            }\n            else camel += word(i)\n            i += 1\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi5ocnu7o.scala:19)\n\tat Problem.main(tmpi5ocnu7o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv1rsjn5x.scala:20)\n\tat Problem.main(tmpv1rsjn5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    camel += c.toUpper\n                    isUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl8zi4yqj.scala:23)\n\tat Problem.main(tmpl8zi4yqj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else if (flag) {\n                result += c.toUpper\n                flag = false\n            }\n            else result += c\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwcqmzk2m.scala:19)\n\tat Problem.main(tmpwcqmzk2m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4hwv1wp7.scala:19)\n\tat Problem.main(tmp4hwv1wp7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxecrjzxk.scala:15)\n\tat Problem.main(tmpxecrjzxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (w <- words) {\n            sb.append(w.capitalize)\n        }\n        sb.toString.head.toLower + sb.toString.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp80t249_q.scala:14)\n\tat Problem.main(tmp80t249_q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                }\n                else result += c\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptviynsvh.scala:21)\n\tat Problem.main(tmptviynsvh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxecrjzxk.scala:15)\n\tat Problem.main(tmpxecrjzxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv1rsjn5x.scala:20)\n\tat Problem.main(tmpv1rsjn5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        var camel = \"\"\n        for (i <- 0 until words.length) {\n            if (i == 0) camel += words(i)\n            else camel += words(i).capitalize\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzg216a7h.scala:15)\n\tat Problem.main(tmpzg216a7h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += word(i).toUpper\n                    isFirst = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var first = true\n        for (c <- word) {\n            if (c == '_') {\n                first = true\n            } else {\n                if (first) {\n                    result += c.toUpper\n                    first = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk8i7wohk.scala:23)\n\tat Problem.main(tmpk8i7wohk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camelCase = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camelCase += word(i + 1).toUpper\n                i += 1\n            } else {\n                camelCase += word(i)\n            }\n        }\n        camelCase\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5lalxp1_.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') result += word(i + 1).toUpper\n            else if (word(i) != '_') result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjdvt4_qu.scala:14)\n\tat Problem.main(tmpjdvt4_qu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv1rsjn5x.scala:20)\n\tat Problem.main(tmpv1rsjn5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) result += c.toUpper\n                else result += c\n                isUpper = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsxxb60tj.scala:19)\n\tat Problem.main(tmpsxxb60tj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptn_wr960.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2nkyj6l.scala:23)\n\tat Problem.main(tmpr2nkyj6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += word(i).toUpper\n                    isFirst = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
      "timestamp": 1665509935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeci4zp3q.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}