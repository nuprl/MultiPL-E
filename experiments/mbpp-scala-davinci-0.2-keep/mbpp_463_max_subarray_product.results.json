{
  "name": "mbpp_463_max_subarray_product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val tempMax = max(curr, max(curr * maxProduct, curr * minProduct))\n            val tempMin = min(curr, min(curr * maxProduct, curr * minProduct))\n            maxProduct = tempMax\n            minProduct = tempMin\n            result = max(result, maxProduct)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            currProduct = max(currProduct * arr(i), arr(i))\n            maxProduct = max(maxProduct, currProduct)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpviafxt45.scala:15)\n\tat Problem.main(tmpviafxt45.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val temp = max\n            max = max(max * curr, min * curr, curr)\n            min = min(temp * curr, min * curr, curr)\n            result = max(max, result)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppybanvg_.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max * curr, min * curr, curr)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppybanvg_.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(temp * curr, min * curr, curr)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppybanvg_.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(max, result)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 0L\n        var maxProductEndingHere = 1L\n        var minProductEndingHere = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProductEndingHere *= arr(i)\n                minProductEndingHere = min(minProductEndingHere * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProductEndingHere = 1\n                minProductEndingHere = 1\n            } else {\n                val temp = maxProductEndingHere\n                maxProductEndingHere = max(minProductEndingHere * arr(i), 1)\n                minProductEndingHere = temp * arr(i)\n            }\n            if (maxProduct < maxProductEndingHere) maxProduct = maxProductEndingHere\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val maxProduct1 = max(curr, max(maxProduct * curr, minProduct * curr))\n            val minProduct1 = min(curr, min(maxProduct * curr, minProduct * curr))\n            maxProduct = maxProduct1\n            minProduct = minProduct1\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currentMaxProduct = arr(0)\n        var currentMinProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            val nextMaxProduct = max(max(currentMaxProduct * arr(i), currentMinProduct * arr(i)), arr(i))\n            val nextMinProduct = min(min(currentMaxProduct * arr(i), currentMinProduct * arr(i)), arr(i))\n            maxProduct = max(maxProduct, nextMaxProduct)\n            currentMaxProduct = nextMaxProduct\n            currentMinProduct = nextMinProduct\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        var min = Long.MaxValue\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else if (arr(i) == 0) {\n                max = 0\n                min = 0\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > result) result = max\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4lvng8og.scala:26)\n\tat Problem.main(tmp4lvng8og.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductTemp = max(x, max(x * maxProduct, x * minProduct))\n            val minProductTemp = min(x, min(x * maxProduct, x * minProduct))\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(temp * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductTemp = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            val minProductTemp = min(min(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            }\n            else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            }\n            else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val temp = maxProduct\n            maxProduct = max(max(maxProduct * x, minProduct * x), x)\n            minProduct = min(min(temp * x, minProduct * x), x)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr.head\n        var minProduct = arr.head\n        var maxSoFar = arr.head\n        for (i <- 1 until arr.length) {\n            val cur = arr(i)\n            val maxProductTemp = max(max(cur * maxProduct, cur * minProduct), cur)\n            val minProductTemp = min(min(cur * maxProduct, cur * minProduct), cur)\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            if (x > 0) {\n                maxProduct *= x\n                minProduct = min(minProduct * x, 1)\n            } else if (x == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * x, 1)\n                minProduct = temp * x\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxProduct > result) result = maxProduct\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            if (x > 0) {\n                maxProduct *= x\n                minProduct = min(minProduct * x, 1L)\n            } else if (x == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * x, 1L)\n                minProduct = temp * x\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val a = maxProduct * x\n            val b = minProduct * x\n            maxProduct = max(max(a, b), x)\n            minProduct = min(min(a, b), x)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpoksb9j9m.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpoksb9j9m.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpoksb9j9m.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpoksb9j9m.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpoksb9j9m.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(a, b, arr(i))\n            min = min(a, b, arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjlcx4yaf.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjlcx4yaf.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjlcx4yaf.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(a, b, arr(i))\n            min = min(a, b, arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpm7zyeh3w.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpm7zyeh3w.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpm7zyeh3w.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val a = maxProduct * x\n            val b = minProduct * x\n            maxProduct = max(x, max(a, b))\n            minProduct = min(x, min(a, b))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr.head\n        var minProduct = arr.head\n        var max = arr.head\n        for (i <- 1 until arr.length) {\n            val maxProduct2 = max(maxProduct * arr(i), minProduct * arr(i), arr(i))\n            val minProduct2 = min(maxProduct * arr(i), minProduct * arr(i), arr(i))\n            maxProduct = maxProduct2\n            minProduct = minProduct2\n            max = max(max, maxProduct)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9m414kcn.scala:10:30 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmaxProduct2\u001b[0m = max(maxProduct * arr(i), minProduct * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp9m414kcn.scala:11:30 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mminProduct2\u001b[0m = min(maxProduct * arr(i), minProduct * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m   |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m   |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m   |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m   |\u001b[0mmatch arguments (Long, Long, Long)\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9m414kcn.scala:14:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            max = max(max, maxProduct)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        val n = arr.length\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until n) {\n            if (arr(i) > 0) {\n                maxProduct = maxProduct * arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            }\n            else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            }\n            else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductPrev = maxProduct\n            maxProduct = max(x, max(x * maxProduct, x * minProduct))\n            minProduct = min(x, min(x * maxProductPrev, x * minProduct))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            }\n            else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            }\n            else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val temp = max\n            max = max(max * curr, min * curr, curr)\n            min = min(temp * curr, min * curr, curr)\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp56ff_0m0.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max * curr, min * curr, curr)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp56ff_0m0.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(temp * curr, min * curr, curr)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp56ff_0m0.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductOld = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductOld * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * x, minProduct * x), x)\n            minProduct = min(min(maxProductCopy * x, minProduct * x), x)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var maxProductSoFar = arr(0)\n        var minProductSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductSoFarTemp = max(arr(i), max(arr(i) * maxProductSoFar, arr(i) * minProductSoFar))\n            val minProductSoFarTemp = min(arr(i), min(arr(i) * maxProductSoFar, arr(i) * minProductSoFar))\n            maxProductSoFar = maxProductSoFarTemp\n            minProductSoFar = minProductSoFarTemp\n            maxProduct = max(maxProduct, maxProductSoFar)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProduct1 = max(x, max(x * maxProduct, x * minProduct))\n            val minProduct1 = min(x, min(x * maxProduct, x * minProduct))\n            maxSoFar = max(maxSoFar, maxProduct1)\n            maxProduct = maxProduct1\n            minProduct = minProduct1\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            }\n            else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            }\n            else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val max_copy = max\n            max = max(max_copy * arr(i), min * arr(i), arr(i))\n            min = min(max_copy * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpt8g8647r.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max_copy * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpt8g8647r.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(max_copy * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpt8g8647r.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct = maxProduct * arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxProduct > result) result = maxProduct\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val cur = arr(i)\n            val temp = max\n            max = max(max * cur, min * cur, cur)\n            min = min(temp * cur, min * cur, cur)\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprw5r5e6f.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max * cur, min * cur, cur)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprw5r5e6f.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(temp * cur, min * cur, cur)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprw5r5e6f.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(a, b, arr(i))\n            min = min(a, b, arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjlcx4yaf.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjlcx4yaf.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjlcx4yaf.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max : Long = 0\n        var max_ending_here : Long = 1\n        var min_ending_here : Long = 1\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max_ending_here *= arr(i)\n                min_ending_here = min(min_ending_here * arr(i), 1)\n            } else if (arr(i) == 0) {\n                max_ending_here = 1\n                min_ending_here = 1\n            } else {\n                val temp : Long = max_ending_here\n                max_ending_here = max(min_ending_here * arr(i), 1)\n                min_ending_here = temp * arr(i)\n            }\n            if (max < max_ending_here) max = max_ending_here\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcy82_ijj.scala:18:34 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                max_ending_here = max(min_ending_here * arr(i), \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(x, max(x * maxProduct, x * minProduct))\n            minProduct = min(x, min(x * maxProductCopy, x * minProduct))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(temp * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct = maxProduct * arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            if (x > 0) {\n                maxProduct *= x\n                minProduct = min(minProduct * x, 1L)\n            } else if (x == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * x, 1L)\n                minProduct = temp * x\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val maxProductCandidates = List(curr, curr * maxProduct, curr * minProduct)\n            val minProductCandidates = List(curr, curr * maxProduct, curr * minProduct)\n            maxProduct = maxProductCandidates.max\n            minProduct = minProductCandidates.min\n            result = max(result, maxProduct)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val cur = arr(i)\n            val temp = max\n            max = max(max * cur, min * cur, cur)\n            min = min(temp * cur, min * cur, cur)\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprw5r5e6f.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max * cur, min * cur, cur)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprw5r5e6f.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(temp * cur, min * cur, cur)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprw5r5e6f.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * x, minProduct * x), x)\n            minProduct = min(min(maxProductCopy * x, minProduct * x), x)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            if (x > 0) {\n                maxProduct = maxProduct * x\n                minProduct = min(minProduct * x, 1L)\n            }\n            else if (x == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            }\n            else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * x, 1L)\n                minProduct = temp * x\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var result = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            result = max(result, maxProduct)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val curr = arr(i)\n            val maxProductNew = max(max(maxProduct * curr, minProduct * curr), curr)\n            val minProductNew = min(min(maxProduct * curr, minProduct * curr), curr)\n            maxSoFar = max(maxSoFar, maxProductNew)\n            maxProduct = maxProductNew\n            minProduct = minProductNew\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(a, b, arr(i))\n            min = min(a, b, arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjlcx4yaf.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjlcx4yaf.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjlcx4yaf.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var maxProductEndingHere = arr(0)\n        var minProductEndingHere = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductEndingHereOld = maxProductEndingHere\n            maxProductEndingHere = max(max(maxProductEndingHere * arr(i), minProductEndingHere * arr(i)), arr(i))\n            minProductEndingHere = min(min(maxProductEndingHereOld * arr(i), minProductEndingHere * arr(i)), arr(i))\n            maxProduct = max(maxProduct, maxProductEndingHere)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductTemp = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            val minProductTemp = min(min(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProductTemp)\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123291,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val a = maxProduct * x\n            val b = minProduct * x\n            maxProduct = max(max(a, b), x)\n            minProduct = min(min(a, b), x)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var maxProductEndingHere = arr(0)\n        var minProductEndingHere = arr(0)\n        for (i <- 1 until arr.length) {\n            val x = maxProductEndingHere * arr(i)\n            val y = minProductEndingHere * arr(i)\n            maxProductEndingHere = max(arr(i), max(x, y))\n            minProductEndingHere = min(arr(i), min(x, y))\n            maxProduct = max(maxProduct, maxProductEndingHere)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProduct1 = max(x, max(maxProduct * x, minProduct * x))\n            val minProduct1 = min(x, min(maxProduct * x, minProduct * x))\n            maxSoFar = max(maxSoFar, maxProduct1)\n            maxProduct = maxProduct1\n            minProduct = minProduct1\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = 1L\n        var min = 1L\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else if (arr(i) == 0) {\n                max = 1\n                min = 1\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > result) result = max\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxSoFar = arr(0)\n        var maxEndingHere = arr(0)\n        var minEndingHere = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxEndingHerePrev = maxEndingHere\n            maxEndingHere = max(max(maxEndingHere * arr(i), minEndingHere * arr(i)), arr(i))\n            minEndingHere = min(min(maxEndingHerePrev * arr(i), minEndingHere * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxEndingHere)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct = maxProduct * arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var max = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val a = maxProduct * arr(i)\n            val b = minProduct * arr(i)\n            maxProduct = max(a, b, arr(i))\n            minProduct = min(a, b, arr(i))\n            max = max(max, maxProduct)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdp770pc6.scala:12:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            maxProduct = max(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpdp770pc6.scala:13:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            minProduct = min(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m   |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m   |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m   |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m   |\u001b[0mmatch arguments ((a : Long), (b : Long), Long)\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdp770pc6.scala:14:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            max = max(max, maxProduct)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductPrev = maxProduct\n            val minProductPrev = minProduct\n            maxProduct = max(max(maxProductPrev * arr(i), minProductPrev * arr(i)), arr(i))\n            minProduct = min(min(maxProductPrev * arr(i), minProductPrev * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- arr) {\n            if (i > 0) {\n                maxProduct *= i\n                minProduct = min(minProduct * i, 1)\n            } else if (i == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * i, 1)\n                minProduct = temp * i\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var result = Long.MinValue\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxProduct > result) result = maxProduct\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxSoFar = 1L\n        var minSoFar = 1L\n        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxSoFar *= arr(i)\n                minSoFar = min(minSoFar * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxSoFar = 1\n                minSoFar = 1\n            } else {\n                val temp = maxSoFar\n                maxSoFar = max(minSoFar * arr(i), 1)\n                minSoFar = temp * arr(i)\n            }\n            if (maxSoFar > max) max = maxSoFar\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpivrywjak.scala:18:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxSoFar = max(minSoFar * arr(i), \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val mx = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(min * arr(i), mx * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1djsq9qa.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1djsq9qa.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(min * arr(i), mx * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1djsq9qa.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            }\n            else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            }\n            else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        val n = arr.length\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var result = arr(0)\n        for (i <- 1 until n) {\n            val maxProductTemp = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            val minProductTemp = min(min(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            result = max(result, maxProduct)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        if (arr.length == 0) return 0\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = maxProduct * arr(i)\n            val b = minProduct * arr(i)\n            maxProduct = max(max(a, b), arr(i))\n            minProduct = min(min(a, b), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currentProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            currentProduct = max(currentProduct * arr(i), arr(i))\n            maxProduct = max(maxProduct, currentProduct)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd1gaahik.scala:15)\n\tat Problem.main(tmpd1gaahik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductTemp = max(max(maxProduct * x, minProduct * x), x)\n            val minProductTemp = min(min(maxProduct * x, minProduct * x), x)\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductPrev = maxProduct\n            maxProduct = max(arr(i), max(maxProduct * arr(i), minProduct * arr(i)))\n            minProduct = min(arr(i), min(maxProductPrev * arr(i), minProduct * arr(i)))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123291,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9o89pdkn.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9o89pdkn.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9o89pdkn.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr.head\n        var minProduct = arr.head\n        var maxSoFar = arr.head\n        for (i <- 1 to arr.length - 1) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = 1L\n        var min = 1L\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max *= arr(i)\n                min = min * arr(i) min 1\n            } else if (arr(i) == 0) {\n                max = 1\n                min = 1\n            } else {\n                val temp = max\n                max = min * arr(i) max 1\n                min = temp * arr(i)\n            }\n            if (max > result) result = max\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currentMaxProduct = arr(0)\n        var currentMinProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            val current = arr(i)\n            val maxProduct1 = currentMaxProduct * current\n            val maxProduct2 = currentMinProduct * current\n            val maxProduct3 = current\n            currentMaxProduct = max(maxProduct1, max(maxProduct2, maxProduct3))\n            currentMinProduct = min(maxProduct1, min(maxProduct2, maxProduct3))\n            maxProduct = max(maxProduct, currentMaxProduct)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            result = max(result, maxProduct)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr.head\n        var minProduct = arr.head\n        var result = arr.head\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val maxProduct1 = max(curr, max(curr * maxProduct, curr * minProduct))\n            val minProduct1 = min(curr, min(curr * maxProduct, curr * minProduct))\n            maxProduct = maxProduct1\n            minProduct = minProduct1\n            result = max(result, maxProduct)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val tempMax = max(max(maxProduct * curr, minProduct * curr), curr)\n            val tempMin = min(min(maxProduct * curr, minProduct * curr), curr)\n            maxProduct = tempMax\n            minProduct = tempMin\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        var min = Long.MaxValue\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else if (arr(i) == 0) {\n                max = 0\n                min = 1\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > result) result = max\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzxif3vul.scala:26)\n\tat Problem.main(tmpzxif3vul.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val tempMax = max\n            max = max(max * curr, min * curr, curr)\n            min = min(min * curr, tempMax * curr, curr)\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpj6qjwvdd.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max * curr, min * curr, curr)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpj6qjwvdd.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min * curr, tempMax * curr, curr)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpj6qjwvdd.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            if (x > 0) {\n                maxProduct *= x\n                minProduct = min(minProduct * x, 1L)\n            }\n            else if (x == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            }\n            else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * x, 1L)\n                minProduct = temp * x\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currentMax = arr(0)\n        var currentMin = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = currentMax\n            currentMax = max(max(currentMax * arr(i), currentMin * arr(i)), arr(i))\n            currentMin = min(min(temp * arr(i), currentMin * arr(i)), arr(i))\n            maxProduct = max(maxProduct, currentMax)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            maxSoFar = max(maxSoFar, max)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpfm7i09w5.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpfm7i09w5.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpfm7i09w5.scala:13:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            maxSoFar = max(maxSoFar, max)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductOld = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductOld * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            if (x > 0) {\n                maxProduct *= x\n                minProduct = min(minProduct * x, 1L)\n            } else if (x == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * x, 1L)\n                minProduct = temp * x\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            if (max > result) result = max\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2o6tgn3e.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2o6tgn3e.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2o6tgn3e.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2o6tgn3e.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxSoFar = arr(0)\n        var minSoFar = arr(0)\n        var maxProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxEndingHere = max(arr(i), max(arr(i) * maxSoFar, arr(i) * minSoFar))\n            val minEndingHere = min(arr(i), min(arr(i) * maxSoFar, arr(i) * minSoFar))\n            maxProduct = max(maxProduct, maxEndingHere)\n            maxSoFar = maxEndingHere\n            minSoFar = minEndingHere\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            result = max(result, maxProduct)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        var min = Long.MaxValue\n        var result = Long.MinValue\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else if (arr(i) == 0) {\n                max = 0\n                min = 0\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > result) result = max\n            if (min > result) result = min\n            if (max < 0) max = 0\n            if (min > 0) min = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy2crk94h.scala:29)\n\tat Problem.main(tmpy2crk94h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var maxProduct = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val curr = arr(i)\n            val tempMax = max * curr\n            val tempMin = min * curr\n            max = max(tempMax, tempMin, curr)\n            min = min(tempMax, tempMin, curr)\n            maxProduct = max(maxProduct, max)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpnr0mj3m2.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            max = max(tempMax, tempMin, curr)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpnr0mj3m2.scala:14:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            min = min(tempMax, tempMin, curr)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpnr0mj3m2.scala:15:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            maxProduct = max(maxProduct, max)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(min * arr(i), temp * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpefj3s7k5.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpefj3s7k5.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(min * arr(i), temp * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpefj3s7k5.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currentProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            currentProduct = max(currentProduct * arr(i), arr(i))\n            maxProduct = max(maxProduct, currentProduct)\n        }\n        return maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123315,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1aclxn_d.scala:15)\n\tat Problem.main(tmp1aclxn_d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            if (x > 0) {\n                maxProduct *= x\n                minProduct = min(minProduct * x, 1L)\n            } else if (x == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * x, 1L)\n                minProduct = temp * x\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max_ending_here = 1\n        var min_ending_here = 1\n        var max_so_far = 1\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max_ending_here = max_ending_here * arr(i)\n                min_ending_here = min(min_ending_here * arr(i), 1)\n            } else if (arr(i) == 0) {\n                max_ending_here = 1\n                min_ending_here = 1\n            } else {\n                val temp = max_ending_here\n                max_ending_here = max(min_ending_here * arr(i), 1)\n                min_ending_here = temp * arr(i)\n            }\n            if (max_so_far < max_ending_here) max_so_far = max_ending_here\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy1pcelwu.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                max_ending_here = max_ending_here * arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy1pcelwu.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                min_ending_here = min(min_ending_here * arr(i), \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy1pcelwu.scala:18:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                max_ending_here = max(min_ending_here * arr(i), \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy1pcelwu.scala:19:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                min_ending_here = temp * arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct = maxProduct * arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = 1L\n        var min = 1L\n        var result = Long.MinValue\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max *= arr(i)\n                min = min * arr(i) min 1\n            } else if (arr(i) == 0) {\n                max = 1\n                min = 1\n            } else {\n                val temp = max\n                max = min * arr(i) max 1\n                min = temp * arr(i)\n            }\n            if (max > result) result = max\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            if (x > 0) {\n                maxProduct *= x\n                minProduct = min(minProduct * x, 1L)\n            } else if (x == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * x, 1L)\n                minProduct = temp * x\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val cur = arr(i)\n            val tempMax = max\n            max = max(cur, max * cur, min * cur)\n            min = min(cur, tempMax * cur, min * cur)\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpzy3ptb_0.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(cur, max * cur, min * cur)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpzy3ptb_0.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(cur, tempMax * cur, min * cur)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpzy3ptb_0.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var maxEndingHere = arr(0)\n        var minEndingHere = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxEndingHerePrev = maxEndingHere\n            maxEndingHere = max(arr(i), max(maxEndingHere * arr(i), minEndingHere * arr(i)))\n            minEndingHere = min(arr(i), min(maxEndingHerePrev * arr(i), minEndingHere * arr(i)))\n            max = max(max, maxEndingHere)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123309,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp280w3wfu.scala:11:28 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            maxEndingHere = max(arr(i), max(maxEndingHere * arr(i), minEndingHere * arr(i)))\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp280w3wfu.scala:11:40 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            maxEndingHere = max(arr(i), max(maxEndingHere * arr(i), minEndingHere * arr(i)))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp280w3wfu.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            max = max(max, maxEndingHere)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductTemp = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            val minProductTemp = min(min(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductTemp = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            val minProductTemp = min(min(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            result = max(result, maxProduct)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductBefore = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductBefore * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProduct1 = max(x, max(maxProduct * x, minProduct * x))\n            val minProduct1 = min(x, min(maxProduct * x, minProduct * x))\n            maxSoFar = max(maxSoFar, maxProduct1)\n            maxProduct = maxProduct1\n            minProduct = minProduct1\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductTemp = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            val minProductTemp = min(min(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val tmp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(tmp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123315,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpod1444ml.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpod1444ml.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(tmp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpod1444ml.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            val product = maxProduct * arr(i)\n            if (product > maxSoFar) maxSoFar = product\n            if (product < minProduct) minProduct = product\n            if (product > maxProduct) maxProduct = product\n            if (product < minProduct) minProduct = product\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8gnz_hkp.scala:19)\n\tat Problem.main(tmp8gnz_hkp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductPrev = maxProduct\n            maxProduct = max(x, max(x * maxProduct, x * minProduct))\n            minProduct = min(x, min(x * maxProductPrev, x * minProduct))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxProduct > result) result = maxProduct\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductPrev = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductPrev * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        return maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123323,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val tmp = max\n            max = max(arr(i), max * arr(i), min * arr(i))\n            min = min(arr(i), tmp * arr(i), min * arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp6qcu5qxr.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(arr(i), max * arr(i), min * arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp6qcu5qxr.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(arr(i), tmp * arr(i), min * arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp6qcu5qxr.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val curr = arr(i)\n            val temp = max\n            max = max(max * curr, min * curr, curr)\n            min = min(temp * curr, min * curr, curr)\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppmtu_i5j.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max * curr, min * curr, curr)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppmtu_i5j.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(temp * curr, min * curr, curr)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppmtu_i5j.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr.head\n        var min = arr.head\n        var result = arr.head\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphmigrl4j.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphmigrl4j.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphmigrl4j.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphmigrl4j.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphmigrl4j.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        var maxEndingHere = 1\n        var minEndingHere = 1\n        for (x <- arr) {\n            if (x > 0) {\n                maxEndingHere *= x\n                minEndingHere = min(minEndingHere * x, 1)\n            } else if (x == 0) {\n                maxEndingHere = 1\n                minEndingHere = 1\n            } else {\n                val temp = maxEndingHere\n                maxEndingHere = max(minEndingHere * x, 1)\n                minEndingHere = temp * x\n            }\n            if (max < maxEndingHere) max = maxEndingHere\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3i9excl4.scala:11:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                maxEndingHere *= x\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value *= is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3i9excl4.scala:12:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                minEndingHere = min(minEndingHere * x, \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    Long\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp3i9excl4.scala:18:32 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxEndingHere = max(minEndingHere * x, \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3i9excl4.scala:19:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                minEndingHere = temp * x\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Long\n\u001b[31m   |\u001b[0m                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currentMaxProduct = arr(0)\n        var currentMinProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductIfNegative = currentMaxProduct * arr(i)\n            val minProductIfNegative = currentMinProduct * arr(i)\n            currentMaxProduct = max(arr(i), max(maxProductIfNegative, minProductIfNegative))\n            currentMinProduct = min(arr(i), min(maxProductIfNegative, minProductIfNegative))\n            maxProduct = max(maxProduct, currentMaxProduct)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currentMax = arr(0)\n        var currentMin = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = currentMax * arr(i)\n            val b = currentMin * arr(i)\n            currentMax = max(max(a, b), arr(i))\n            currentMin = min(min(a, b), arr(i))\n            maxProduct = max(maxProduct, currentMax)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct = maxProduct * arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var maxProductEndingHere = arr(0)\n        var minProductEndingHere = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductEndingHereOld = maxProductEndingHere\n            maxProductEndingHere = max(max(maxProductEndingHere * arr(i), minProductEndingHere * arr(i)), arr(i))\n            minProductEndingHere = min(min(maxProductEndingHereOld * arr(i), minProductEndingHere * arr(i)), arr(i))\n            maxProduct = max(maxProduct, maxProductEndingHere)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            currProduct = max(currProduct * arr(i), arr(i))\n            maxProduct = max(maxProduct, currProduct)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpviafxt45.scala:15)\n\tat Problem.main(tmpviafxt45.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProduct1 = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            val minProduct1 = min(min(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            maxProduct = maxProduct1\n            minProduct = minProduct1\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(temp * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        return maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(maxProduct * x, minProduct * x, x)\n            minProduct = min(maxProductCopy * x, minProduct * x, x)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxcx2zqpo.scala:11:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            maxProduct = max(maxProduct * x, minProduct * x, x)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmax\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m   |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m   |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m   |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m   |\u001b[0mmatch arguments (Long, Long, (x : Long))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxcx2zqpo.scala:12:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            minProduct = min(maxProductCopy * x, minProduct * x, x)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m   |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m   |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m   |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m   |\u001b[0mmatch arguments (Long, Long, (x : Long))\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var result = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val a = maxProduct * arr(i)\n            val b = minProduct * arr(i)\n            maxProduct = max(max(a, b), arr(i))\n            minProduct = min(min(a, b), arr(i))\n            result = max(result, maxProduct)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpizbshe2r.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var maxProductEndingHere = arr(0)\n        var minProductEndingHere = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = maxProductEndingHere\n            maxProductEndingHere = max(max(maxProductEndingHere * arr(i), minProductEndingHere * arr(i)), arr(i))\n            minProductEndingHere = min(min(temp * arr(i), minProductEndingHere * arr(i)), arr(i))\n            maxProduct = max(maxProduct, maxProductEndingHere)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = Long.MinValue\n        var product = 1L\n        for (i <- 0 until arr.length) {\n            product *= arr(i)\n            maxProduct = max(maxProduct, product)\n            if (product == 0) product = 1\n        }\n        product = 1\n        for (i <- arr.length - 1 to 0 by -1) {\n            product *= arr(i)\n            maxProduct = max(maxProduct, product)\n            if (product == 0) product = 1\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            result = max(result, maxProduct)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(max, result)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp7wrnuh6j.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp7wrnuh6j.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp7wrnuh6j.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(max, result)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductOld = maxProduct\n            maxProduct = max(max(maxProduct * x, minProduct * x), x)\n            minProduct = min(min(maxProductOld * x, minProduct * x), x)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val cur = arr(i)\n            val temp = max\n            max = max(cur, max * cur, min * cur)\n            min = min(cur, temp * cur, min * cur)\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_yg27dgw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(cur, max * cur, min * cur)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_yg27dgw.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(cur, temp * cur, min * cur)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_yg27dgw.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currentMax = arr(0)\n        var currentMin = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = currentMax * arr(i)\n            val b = currentMin * arr(i)\n            currentMax = max(max(a, b), arr(i))\n            currentMin = min(min(a, b), arr(i))\n            maxProduct = max(maxProduct, currentMax)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currentMaxProduct = arr(0)\n        var currentMinProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            val current = arr(i)\n            val maxProduct1 = max(currentMaxProduct * current, currentMinProduct * current)\n            val maxProduct2 = max(maxProduct1, current)\n            val minProduct1 = min(currentMaxProduct * current, currentMinProduct * current)\n            val minProduct2 = min(minProduct1, current)\n            currentMaxProduct = maxProduct2\n            currentMinProduct = minProduct2\n            maxProduct = max(maxProduct, currentMaxProduct)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr.head\n        var min = arr.head\n        var result = arr.head\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            if (max > result) result = max\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpgdz028l8.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpgdz028l8.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(max(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpgdz028l8.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpgdz028l8.scala:13:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(min(a, b), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * x, minProduct * x), x)\n            minProduct = min(min(maxProductCopy * x, minProduct * x), x)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(temp * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct = maxProduct * arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            }\n            else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            }\n            else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var currentMaxProduct = arr(0)\n        var currentMinProduct = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val current = arr(i)\n            val tempMax = max(current, current * currentMaxProduct, current * currentMinProduct)\n            val tempMin = min(current, current * currentMaxProduct, current * currentMinProduct)\n            currentMaxProduct = tempMax\n            currentMinProduct = tempMin\n            maxProduct = max(maxProduct, currentMaxProduct)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpho90e48y.scala:11:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtempMax\u001b[0m = max(current, current * currentMaxProduct, current * currentMinProduct)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmax\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m   |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m   |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m   |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m   |\u001b[0mmatch arguments ((current : Long), Long, Long)\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpho90e48y.scala:12:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtempMin\u001b[0m = min(current, current * currentMaxProduct, current * currentMinProduct)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m   |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m   |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m   |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m   |\u001b[0mmatch arguments ((current : Long), Long, Long)\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(x, x * maxProduct), x * minProduct)\n            minProduct = min(min(x, x * maxProductCopy), x * minProduct)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1665517480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            min = min(temp * arr(i), min * arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbytde_vw.scala:13:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductTemp = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            val minProductTemp = min(min(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val a = maxProduct * x\n            val b = minProduct * x\n            maxProduct = max(max(a, b), x)\n            minProduct = min(min(a, b), x)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            if (x > 0) {\n                maxProduct *= x\n                minProduct = min(minProduct * x, 1L)\n            } else if (x == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * x, 1L)\n                minProduct = temp * x\n            }\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123276,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        val n = arr.length\n        var max_ending_here = 1\n        var min_ending_here = 1\n        var max_so_far = 1\n        for (i <- 0 until n) {\n            if (arr(i) > 0) {\n                max_ending_here = max_ending_here * arr(i)\n                min_ending_here = min(min_ending_here * arr(i), 1)\n            }\n            else if (arr(i) == 0) {\n                max_ending_here = 1\n                min_ending_here = 1\n            }\n            else {\n                val temp = max_ending_here\n                max_ending_here = max(min_ending_here * arr(i), 1)\n                min_ending_here = temp * arr(i)\n            }\n            if (max_so_far < max_ending_here) max_so_far = max_ending_here\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt4gotpew.scala:12:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                max_ending_here = max_ending_here * arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt4gotpew.scala:13:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                min_ending_here = min(min_ending_here * arr(i), \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt4gotpew.scala:21:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                max_ending_here = max(min_ending_here * arr(i), \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt4gotpew.scala:22:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                min_ending_here = temp * arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}