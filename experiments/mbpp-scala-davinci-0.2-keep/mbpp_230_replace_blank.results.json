{
  "name": "mbpp_230_replace_blank",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        var index = str.indexOf(\" \")\n        while (index != -1) {\n            str = str.substring(0, index) + char + str.substring(index + 1)\n            index = str.indexOf(\" \")\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n            i += 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        return str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmp36duheqi.scala:6)\n\tat Problem$.main(tmp36duheqi.scala:10)\n\tat Problem.main(tmp36duheqi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            }\n            else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        for (i <- 0 until str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1.charAt(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1.charAt(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replace(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        return str1.replace(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1.charAt(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1.charAt(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        for (i <- 0 until str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1, str.length)\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replace(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        for (i <- 0 until str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            }\n            else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replace(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replace(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        for (i <- 0 until str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replace(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1.charAt(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1.charAt(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        for (i <- 0 until str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replace(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n            i += 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n            i += 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        for (i <- 0 to str.length - 1) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1, str.length)\n            }\n            i += 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        val str2 = str1.replaceAll(\" \", char)\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmp9b5zqhd7.scala:6)\n\tat Problem$.main(tmp9b5zqhd7.scala:11)\n\tat Problem.main(tmp9b5zqhd7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        for (i <- 0 until str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1, str.length)\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        val str2 = str1.replaceAll(\" \", char)\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmp9b5zqhd7.scala:6)\n\tat Problem$.main(tmp9b5zqhd7.scala:11)\n\tat Problem.main(tmp9b5zqhd7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1.charAt(i) == ' ') {\n                str2 += char\n            }\n            else {\n                str2 += str1.charAt(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n            i += 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (c <- str1) {\n            if (c == ' ') {\n                str2 += char\n            } else {\n                str2 += c\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        for (i <- 0 until str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1, str.length)\n            }\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n            i += 1\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n            i += 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        for (i <- 0 until str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1)\n            }\n            i += 1\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1\n        for (i <- 0 to str.length - 1) {\n            if (str(i) == ' ') {\n                str = str.substring(0, i) + char + str.substring(i + 1, str.length)\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpkugr2240.scala:6)\n\tat Problem$.main(tmpkugr2240.scala:11)\n\tat Problem.main(tmpkugr2240.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpkugr2240.scala:6)\n\tat Problem$.main(tmpkugr2240.scala:11)\n\tat Problem.main(tmpkugr2240.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            }\n            else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (c <- str1) {\n            if (c == ' ') {\n                str2 += char\n            } else {\n                str2 += c\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str = str1.replace(\" \", char)\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpjw6zsa90.scala:6)\n\tat Problem$.main(tmpjw6zsa90.scala:10)\n\tat Problem.main(tmpjw6zsa90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        return str1.replaceAll(\" \", char)\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmp36duheqi.scala:6)\n\tat Problem$.main(tmp36duheqi.scala:10)\n\tat Problem.main(tmp36duheqi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpinjzcew_.scala:6)\n\tat Problem$.main(tmpinjzcew_.scala:11)\n\tat Problem.main(tmpinjzcew_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replace(\" \", char)\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = str1.replaceAll(\" \", char)\n        str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517676,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1029)\n\tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\tat java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem$.replaceBlank(tmpkugr2240.scala:6)\n\tat Problem$.main(tmpkugr2240.scala:11)\n\tat Problem.main(tmpkugr2240.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == ' ') str2 += char\n            else str2 += str1(i)\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n        var str2 = \"\"\n        for (i <- 0 to str1.length - 1) {\n            if (str1(i) == ' ') {\n                str2 += char\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2\n    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n",
      "timestamp": 1665517677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}