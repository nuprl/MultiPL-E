{
  "name": "mbpp_392_get_max_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val map = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (map.contains(n)) return map(n)\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            map(n) = max\n            max\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        f(n)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val max = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            max\n        }",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        if (n <= 5) return n\n        val maxSum = new Array[Long](n.toInt + 1)\n        maxSum(1) = 1\n        maxSum(2) = 2\n        maxSum(3) = 3\n        maxSum(4) = 4\n        maxSum(5) = 5\n        for (i <- 6 to n.toInt) {\n            maxSum(i) = max(maxSum(i / 2) + maxSum(i / 3) + maxSum(i / 4) + maxSum(i / 5), i)\n        }\n        maxSum(n.toInt)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            List(a, b, c, d, e).max\n        }",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(n, a + b + c + d)\n        }",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }",
    "        val cache = Array.fill(n.toInt + 1)(0L)\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n            else {\n                val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n.toInt) = max\n                max\n            }\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val memo = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (memo.contains(n)) return memo(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            memo(n) = result\n            result\n        }\n        getMaxSumHelper(n)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val max = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            println(n + \" \" + max)\n            max\n        }",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> maxSum)\n                maxSum\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSumHelper(n)",
    "        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = a + b + c + d\n            if (e > n) e else n\n        }",
    "        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) return 0\n        val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n        max",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = max\n                max\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else if (n < 0) -1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        getMaxSumHelper(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        return cache(n.toInt)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = n\n        return max(a + b + c + d, e)",
    "        if (n <= 0) 0\n        else {\n            val cache = new HashMap[Long, Long]\n            def getMaxSum(n : Long) : Long = {\n                if (n <= 0) 0\n                else if (cache.contains(n)) cache(n)\n                else {\n                    val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = maxSum\n                    maxSum\n                }\n            }\n            getMaxSum(n)\n        }",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new Array[Long](n.toInt + 1)\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (n == 0) 0\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n            else {\n                cache(n.toInt) = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n.toInt)\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n                    cache(n) = result\n                    result\n                }\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val map = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (map.contains(n)) return map(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            map(n) = result\n            result\n        }\n        getMaxSumHelper(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = maxSum\n                maxSum\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val memo = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (memo.contains(n)) memo(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                memo += (n -> result)\n                result\n            }\n        }\n        getMaxSumHelper(n)",
    "        if (n < 12) return n\n        var maxSum = n\n        for (i <- 2 to 5) {\n            val sum = getMaxSum(n / i)\n            if (sum > maxSum) maxSum = sum\n        }\n        maxSum",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)",
    "        if (n < 12) return n\n        val map = new HashMap[Long, Long]\n        def getMaxSumRec(n : Long) : Long = {\n            if (n < 12) return n\n            if (map.contains(n)) return map(n)\n            val m = max(getMaxSumRec(n / 2) + getMaxSumRec(n / 3) + getMaxSumRec(n / 4) + getMaxSumRec(n / 5), n)\n            map += (n -> m)\n            return m\n        }\n        return getMaxSumRec(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        getMaxSum(n)",
    "        if (n == 0) return 0\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 1\n        for (i <- 2 to n.toInt) {\n            val a = if (i % 2 == 0) dp(i / 2) else 0\n            val b = if (i % 3 == 0) dp(i / 3) else 0\n            val c = if (i % 4 == 0) dp(i / 4) else 0\n            val d = if (i % 5 == 0) dp(i / 5) else 0\n            dp(i) = max(a + b + c + d, i)\n        }\n        dp(n.toInt)",
    "        val cache = new HashMap[Long, Long]()\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            maxSum\n        }",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache += (n -> result)\n                    result\n                }\n            }\n        }\n        getMaxSum(n)",
    "        if (n < 0) return 0\n        if (n == 0) return 0\n        if (n == 1) return 1\n        if (n == 2) return 2\n        if (n == 3) return 3\n        if (n == 4) return 4\n        if (n == 5) return 5\n        val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n        return max",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)",
    "        val memo = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (memo.contains(n)) memo(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                memo(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]()\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        getMaxSumHelper(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSumRec(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumRec(n / 2) + getMaxSumRec(n / 3) + getMaxSumRec(n / 4) + getMaxSumRec(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumRec(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)",
    "        var cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = max\n            return max\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am = getMaxSum(n / 39)\n",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val sum = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = sum\n            sum\n        }\n        getMaxSumHelper(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)",
    "        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += n -> result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = max(a + b + c + d, n)\n            e\n        }",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            return result\n        }\n        getMaxSum(n)",
    "        val memo = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (memo.contains(n)) return memo(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            memo(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = max(a + b + c + d, n)\n            e\n        }",
    "        val cache = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        f(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            val a = if (i / 2 <= n) dp(i / 2) else 0\n            val b = if (i / 3 <= n) dp(i / 3) else 0\n            val c = if (i / 4 <= n) dp(i / 4) else 0\n            val d = if (i / 5 <= n) dp(i / 5) else 0\n            dp(i) = max(a + b + c + d, i)\n        }\n        dp(n.toInt)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val maxSum = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = maxSum\n            return maxSum\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val memo = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (memo.contains(n)) return memo(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            memo(n) = result\n            result\n        }\n        getMaxSumHelper(n)",
    "        var map = Map[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (map.contains(n)) map(n)\n            else {\n                val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                map += (n -> maxSum)\n                maxSum\n            }\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) 0\n        else {\n            val maxSum = new Array[Long](n.toInt + 1)\n            maxSum(0) = 0\n            maxSum(1) = 1\n            for (i <- 2 to n.toInt) {\n                val a = maxSum(i / 2)\n                val b = maxSum(i / 3)\n                val c = maxSum(i / 4)\n                val d = maxSum(i / 5)\n                maxSum(i) = max(a + b + c + d, i)\n            }\n            maxSum(n.toInt)\n        }",
    "        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            max(n, a + b + c + d + e)\n        }",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5), n)\n            cache(n) = result\n            result\n        }\n        f(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val max = max(a + b + c + d, n)\n            max\n        }",
    "        if (n <= 0) 0\n        else {\n            val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            maxSum\n        }",
    "        if (n <= 0) return 0\n        val m = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (m.contains(n)) return m(n)\n            val result = max(f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5), n)\n            m(n) = result\n            result\n        }\n        f(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            max(n, a + b + c + d + e)\n        }",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }",
    "        if (n < 12) return n\n        var maxSum = n\n        for (i <- 2 to 5) {\n            val sum = getMaxSum(n / i)\n            if (sum > maxSum) maxSum = sum\n        }\n        maxSum",
    "        if (n < 12) return n\n        var maxSum = n\n        for (i <- 2 to 5) {\n            val sum = getMaxSum(n / i)\n            if (sum > maxSum) maxSum = sum\n        }\n        maxSum",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        return getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        for (i <- 2 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)",
    "        if (n == 0) return 0\n        val maxSum = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n        maxSum",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = max\n            max\n        }\n        getMaxSum(n)",
    "        if (n == 0) return 0\n        val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n        return max",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = max(a + b + c + d, n)\n            e\n        }",
    "        if (n < 0) 0\n        else if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = a + b + c + d\n            if (e > n) e\n            else n\n        }",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSumHelper(n)",
    "        if (n <= 0) 0\n        else {\n            val maxSum = n max (getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            maxSum\n        }",
    "        if (n <= 0) return 0\n        if (n == 1) return 1\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (n == 1) return 1\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n < 0) return 0\n        if (n == 0) return 0\n        if (n == 1) return 1\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 0\n        dp(1) = 1\n        for (i <- 2 to n.toInt) {\n            val a = dp(i / 2)\n            val b = dp(i / 3)\n            val c = dp(i / 4)\n            val d = dp(i / 5)\n            dp(i) = max(a + b + c + d, i)\n        }\n        return dp(n.toInt)",
    "        if (n < 12) return n\n        val m = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (m.contains(n)) return m(n)\n            val result = max(f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5), n)\n            m(n) = result\n            return result\n        }\n        f(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) 0\n        else {\n            val half = getMaxSum(n / 2)\n            val third = getMaxSum(n / 3)\n            val fourth = getMaxSum(n / 4)\n            val fifth = getMaxSum(n / 5)\n            val sum = half + third + fourth + fifth\n            if (sum > n) sum\n            else n\n        }",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else {\n            val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            maxSum\n        }",
    "        if (n < 0) return 0\n        if (n == 0) return 0\n        if (n == 1) return 1\n        if (n == 2) return 2\n        if (n == 3) return 3\n        if (n == 4) return 4\n        if (n == 5) return 5\n        val max = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n        return max",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(n, a + b + c + d)\n        }",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSumHelper(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }",
    "        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am = getMaxSum(n / 39)\n",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = maxSum\n                    maxSum\n                }\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val map = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (map.contains(n)) return map(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            map += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = n\n        return max(a + b + c + d, e)",
    "        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am = getMaxSum(n / 39)\n",
    "        if (n < 12) return n\n        val memo = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n < 12) return n\n            if (memo.contains(n)) return memo(n)\n            val result = max(f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5), n)\n            memo(n) = result\n            result\n        }\n        f(n)",
    "        if (n == 0) return 0\n        var maxSum = n\n        for (i <- 2 to 5) {\n            val sum = getMaxSum(n / i)\n            if (sum > maxSum) maxSum = sum\n        }\n        maxSum",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new Array[Long](n.toInt + 1)\n        def getMaxSum(n : Long, cache : Array[Long]) : Long = {\n            if (n <= 0) 0\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n            else {\n                val max = max(n, getMaxSum(n / 2, cache) + getMaxSum(n / 3, cache) + getMaxSum(n / 4, cache) + getMaxSum(n / 5, cache))\n                cache(n.toInt) = max\n                max\n            }\n        }\n        getMaxSum(n, cache)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = max(a + b + c + d, n)\n            e\n        }",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)",
    "        var map = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (map.contains(n)) return map(n)\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            map += (n -> max)\n            return max\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n < 12) n\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            max(n, a + b + c + d + e)\n        }",
    "        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSumHelper(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            return result\n        }\n        return getMaxSumHelper(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val sum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = sum\n                sum\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> maxSum)\n                maxSum\n            }\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else if (n < 0) -1\n        else {\n            val memo = new HashMap[Long, Long]\n            def getMaxSum(n : Long) : Long = {\n                if (n == 0) 0\n                else if (n < 0) -1\n                else if (memo.contains(n)) memo(n)\n                else {\n                    val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    memo(n) = max\n                    max\n                }\n            }\n            getMaxSum(n)\n        }",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am = getMaxSum(n / 39)\n",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = max\n                max\n            }\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else {\n            val n2 = getMaxSum(n / 2)\n            val n3 = getMaxSum(n / 3)\n            val n4 = getMaxSum(n / 4)\n            val n5 = getMaxSum(n / 5)\n            val sum = n2 + n3 + n4 + n5\n            if (sum > n) sum else n\n        }",
    "        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n",
    "        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumRec(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumRec(n / 2) + getMaxSumRec(n / 3) + getMaxSumRec(n / 4) + getMaxSumRec(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSumRec(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = maxSum\n            return maxSum\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) 0\n        else {\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            max\n        }",
    "        if (n <= 0) return 0\n        if (n == 1) return 1\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i) = max(dp(i / 2) + dp(i / 3) + dp(i / 4) + dp(i / 5), i)\n        }\n        dp(n.toInt)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]()\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = result\n                    result\n                }\n            }\n        }\n        getMaxSum(n)",
    "        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = max(a + b + c + d, n)\n        return e",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSumHelper(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 5) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val memo = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (memo.contains(n)) return memo(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            memo += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(n, a + b + c + d)\n        }",
    "        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n"
  ]
}