{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    def maxSumIncreasingSubseq(a : List[Long], n : Long, index : Long, k : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSumIncreasingSubseq((List[Long](1l.toLong, 101l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong)), (7l), (4l), (6l)) == (11l));\n    assert(maxSumIncreasingSubseq((List[Long](1l.toLong, 101l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong)), (7l), (2l), (5l)) == (7l));\n    assert(maxSumIncreasingSubseq((List[Long](11l.toLong, 15l.toLong, 19l.toLong, 21l.toLong, 26l.toLong, 28l.toLong, 31l.toLong)), (7l), (2l), (4l)) == (71l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        var max = 0L\n        for (i <- 0 until n.toInt) {\n            if (i != index.toInt && i != k.toInt) {\n                max = max max dp(i)\n            }\n        }\n        max",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && dp(j) + a(i) > dp(i)) dp(i) = dp(j) + a(i)\n            }\n        }\n        var max = 0L\n        for (i <- index.toInt until k.toInt) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) <= a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        var dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- index.toInt until k.toInt) {\n            result = max(result, dp(i))\n        }\n        result",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) else 0\n            sum + maxSumIncreasingSubseq(a, n, index + 1, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(i) > a(j) && dp(j) > max) {\n                    max = dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        dp(k.toInt)",
    "        val dp = Array.fill(n.toInt)(0L)\n        val max = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            max(i) = a(i)\n        }\n        for (i <- 1 until n.toInt) {\n            for (j <- 0 until i) {\n                if (a(i) > a(j) && dp(i) < dp(j) + a(i)) {\n                    dp(i) = dp(j) + a(i)\n                    max(i) = max(j) max a(i)\n                }\n            }\n        }\n        var result = 0L\n        for (i <- index.toInt until k.toInt) {\n            result = result max (dp(i) + max(k.toInt) - max(i))\n        }\n        result",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && dp(j) + a(i) > dp(i)) {\n                    dp(i) = dp(j) + a(i)\n                }\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else if (k == n) {\n            val sum = a.slice(index.toInt, n.toInt).sum\n            sum\n        }\n        else {\n            val sum = a.slice(index.toInt, k.toInt).sum\n            val max = maxSumIncreasingSubseq(a, n, index, k + 1)\n            if (sum > max) sum\n            else max\n        }",
    "        var dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && dp(i) < dp(j) + a(i)) dp(i) = dp(j) + a(i)\n            }\n        }\n        var result = 0L\n        for (i <- index.toInt until k.toInt) {\n            if (result < dp(i)) result = dp(i)\n        }\n        result",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp2(i) = dp(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + dp(i))\n                }\n            }\n        }\n        dp2(k.toInt - 1)",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp(i) = max(dp(i), dp(j) + a(i))\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (i < index && dp(i) > result) result = dp(i)\n            if (i >= index && i <= k && dp(i) > result) result = dp(i)\n        }\n        result",
    "        var dp = Array.fill(n.toInt)(0L)\n        var max = 0L\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && dp(i) < dp(j) + a(i)) {\n                    dp(i) = dp(j) + a(i)\n                }\n            }\n            if (i < k && dp(i) > max) max = dp(i)\n        }\n        max",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 to n.toInt - 1) {\n            var max = 0L\n            for (j <- 0 to i - 1) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        var max = 0L\n        for (i <- index.toInt to k.toInt) {\n            max = max max dp(i)\n        }\n        max",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (k > index && a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum1, sum2)\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (i != index.toInt && i != k.toInt) {\n                result = max(result, dp(i))\n            }\n        }\n        result"
  ]
}