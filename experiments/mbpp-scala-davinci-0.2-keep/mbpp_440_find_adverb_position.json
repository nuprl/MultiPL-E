{
  "name": "mbpp_440_find_adverb_position",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\")).headOption\n        adverb match {\n            case Some(word) => Right(words.indexOf(word))\n            case None => Left(\"No adverb found\")\n        }",
    "        val word = text.split(\" \").find(x => x.endsWith(\"ly\"))\n        if (word.isEmpty) Left(\"No adverb found\")\n        else Right(text.split(\" \").indexOf(word.get))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"softly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.length > 0) {\n            Right(adverbPositions(0)._2)\n        } else {\n            Left(\"No adverbs found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"foolishly\", \"merrily\", \"lazily\", \"loudly\", \"quietly\", \"noisily\", \"carefully\", \"greedily\", \"hungrily\", \"sleepily\", \"sweetly\", \"warmly\", \"weakly\", \"wildly\", \"wickedly\", \"wisely\", \"worriedly\", \"bravely\", \"calmly\", \"cheerfully\", \"courageously\", \"elegantly\", \"faithfully\", \"fondly\", \"gracefully\", \"humbly\", \"joyfully\", \"kindly\", \"lovingly\", \"patiently\", \"politely\", \"proudly\", \"quietly\", \"seriously\", \"shyly\", \"tenderly\", \"truly\", \"vivaciously\", \"willfully\", \"zealously\", \"zestfully\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"quietly\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(position => position != -1).head\n        if (adverbPosition == -1) Left(\"No adverb found\") else Right(adverbPosition)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\", \"calmly\", \"carefully\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val pattern = \"\\\\w+ly\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(m) => Right(m.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        val result = pattern.findFirstMatchIn(text)\n        if (result.isEmpty) Left(\"No adverb found\")\n        else Right(result.get.start)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"silently\", \"beautifully\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(adverb) => Right(words.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.find(x => adverbs.contains(x._1))\n        adverbPosition match {\n            case Some(x) => Right(x._2)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs.head\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val firstAdverb = adverbs(0)\n            val firstAdverbPosition = text.indexOf(firstAdverb)\n            Right(firstAdverbPosition)\n        } else {\n            Left(\"No adverbs found\")\n        }",
    "        val words = text.split(\" \")\n        val adverb = words.filter(x => x.endsWith(\"ly\"))\n        if (adverb.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverb(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(x) => Right(words.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverbs(0)))",
    "        val pattern = \"\"\"([a-zA-Z]+)\"\"\".r\n        val words = pattern.findAllIn(text)\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.next))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2).headOption\n        adverbPosition match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs.head\n            val adverbIndex = words.indexOf(adverb)\n            Right(adverbIndex)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.length == 0)\n            Left(\"No adverbs found\")\n        else\n            Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(text.split(\" \").indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbPosition = text.split(\" \").zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2).headOption\n        adverbPosition match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(word => adverbs.contains(word._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)",
    "        val words = text.split(\" \")\n        val adverb = words.filter(x => x.endsWith(\"ly\")).headOption\n        adverb match {\n            case Some(x) => Right(words.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\", \"calmly\", \"carefully\", \"cheerfully\", \"cautiously\", \"eagerly\", \"elegantly\", \"frantically\", \"gracefully\", \"happily\", \"hastily\", \"hungrily\", \"jovially\", \"joyfully\", \"lazily\", \"loosely\", \"madly\", \"merrily\", \"nervously\", \"noisily\", \"obediently\", \"politely\", \"proudly\", \"quickly\", \"quietly\", \"rapidly\", \"sharply\", \"silently\", \"slowly\", \"smoothly\", \"softly\", \"swiftly\", \"tenderly\", \"vigorously\", \"warmly\", \"weakly\", \"wearily\", \"wildly\", \"worriedly\", \"zealously\")\n        val words = text.split(\" \")\n        var index = 0\n        for (word <- words) {\n            if (adverbs.contains(word)) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(\"No adverb found\")",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"joyfully\", \"calmly\", \"passionately\")\n        val words = text.split(\" \")\n        val adverb = words.filter(adverbs.contains(_))\n        if (adverb.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPositions.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverb = words.filter(adverbs.contains(_))\n        if (adverb.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverb(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\", \"excitedly\", \"angrily\", \"happily\", \"sadly\", \"quietly\", \"greedily\", \"sleepily\", \"noiselessly\", \"noisily\", \"loudly\", \"humbly\", \"proudly\", \"bashfully\", \"coyly\", \"defiantly\", \"deftly\", \"devotedly\", \"dexterously\", \"diligently\", \"dimly\", \"doubtfully\", \"dreamily\", \"eagerly\", \"early\", \"easily\", \"elegantly\", \"energetically\", \"enormously\", \"enthusiastically\", \"equally\", \"especially\", \"essentially\", \"evenly\", \"eventually\", \"exactly\", \"excitedly\", \"extremely\", \"fairly\", \"faithfully\", \"famously\", \"far\", \"fast\", \"fatally\", \"ferociously\", \"fervently\", \"fiercely\", \"fondly\", \"foolishly\", \"fortunately\", \"frankly\", \"frantically\", \"freely\", \"frenetically\", \"frequently\", \"frightfully\", \"fully\", \"furiously\", \"generally\", \"generously\", \"gently\", \"gladly\", \"gleefully\", \"gracefully\", \"gratefully\", \"greatly\", \"greedily\", \"happily\", \"hastily\", \"healthily\", \"heartily\", \"heavily\", \"helpfully\", \"highly\", \"honestly\", \"hopelessly\", \"hourly\", \"hungrily\", \"immediately\", \"innocently\", \"inquisitively\", \"instantly\", \"intensely\", \"intently\", \"interestingly\", \"inwardly\", \"irritably\", \"jaggedly\", \"jealously\", \"joshingly\", \"joyfully\", \"joyously\", \"jovially\", \"jubilantly\", \"judgmentally\", \"justly\", \"keenly\", \"kiddingly\", \"kindheartedly\", \"kindly\", \"knavishly\", \"knottily\", \"knowingly\", \"knowledgeably\", \"kookily\", \"lazily\", \"less\", \"lightly\",",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val pattern = \"\\\\w+ly\".r\n        val result = pattern.findFirstIn(text)\n        result match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = text.split(\" \").zipWithIndex.filter(x => x._1.endsWith(\"ly\")).map(x => (x._1, x._2 + 1))\n        if (adverbs.length > 0) Right(adverbs(0)._2) else Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverb found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(_ >= 0).headOption\n        adverbPosition match {\n            case Some(position) => Right(position)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.size == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"sleepily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty)\n            Left(\"No adverbs found\")\n        else\n            Right(adverbPositions.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"badly\", \"well\")\n        val adverbsPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbsPositionsFiltered = adverbsPositions.filter(position => position != -1)\n        if (adverbsPositionsFiltered.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbsPositionsFiltered.head)",
    "        val adverbs = Array(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(position => position != -1).head\n        if (adverbPosition == -1) Left(\"No adverb found\")\n        else Right(adverbPosition)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val result = adverbs.map(adverb => text.indexOf(adverb)).filter(_ != -1).headOption\n        result match {\n            case Some(index) => Right(index)\n            case None => Left(\"No adverbs found\")\n        }",
    "        val words = text.split(\" \")\n        val adverb = words.find(w => w.endsWith(\"ly\"))\n        adverb match {\n            case Some(w) => Right(words.indexOf(w))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverb = words.filter(_.endsWith(\"ly\"))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        val adverbs = pattern.findAllIn(text)\n        if (adverbs.hasNext) {\n            val firstAdverb = adverbs.next\n            val position = text.indexOf(firstAdverb)\n            Right(position)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = text.split(\" \").filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty)\n            Left(\"No adverbs found\")\n        else\n            Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions(0)._2)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbsWithPositions = adverbs.map(adverb => (adverb, text.indexOf(adverb)))\n        val adverbWithPosition = adverbsWithPositions.filter(adverbWithPosition => adverbWithPosition._2 != -1)\n        if (adverbWithPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbWithPosition.head._2)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\", \"calmly\", \"carefully\")\n        val words = text.split(\" \")\n        val adverbIndex = words.indexWhere(adverbs.contains(_))\n        if (adverbIndex == -1) Left(\"No adverb found\")\n        else Right(adverbIndex)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverb = words.filter(adverbs.contains(_))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(position => position != -1).head\n        if (adverbPosition == -1) Left(\"No adverb found\")\n        else Right(adverbPosition)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverb = words.filter(adverbs.contains(_))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverb = adverbs.find(text.contains(_))\n        adverb match {\n            case Some(adverb) => Right(text.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val adverbs = List(\"quickly\", \"slowly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(adv) => Right(words.indexOf(adv))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverb = adverbs.find(text.contains(_))\n        adverb match {\n            case Some(adverb) => Right(text.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\", \"excitedly\", \"angrily\", \"happily\", \"sadly\", \"quietly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(word => adverbs.contains(word._1))\n        if (adverbPositions.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPositions.head._2)",
    "        val regex = \"\\\\w+ly\".r\n        val result = regex.findFirstMatchIn(text)\n        result match {\n            case Some(x) => Right(x.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"sleepily\", \"lazily\", \"loudly\", \"quietly\")\n        val adverbsRegex = adverbs.mkString(\"|\")\n        val adverbRegex = s\"(?i)($adverbsRegex)\".r\n        val adverb = adverbRegex.findFirstIn(text)\n        adverb match {\n            case Some(adverb) => Right(adverbRegex.findFirstMatchIn(text).get.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverb found\")\n        } else {\n            Right(words.indexOf(adverbs(0)))\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            val adverb = adverbs(0)\n            val adverbPosition = words.indexOf(adverb)\n            Right(adverbPosition)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val firstAdverbPosition = adverbPositions.filter(position => position != -1).min\n        if (firstAdverbPosition == -1) Left(\"No adverb found\") else Right(firstAdverbPosition)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index.toLong)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val adverbs = text.split(\" \").filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val pattern = \"\\\\w+ly\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(s) => Right(s.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"awkwardly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            Right(adverbPositions.head._2)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = Array(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"foolishly\", \"carefully\", \"lazily\", \"loudly\", \"quietly\", \"badly\", \"well\", \"hard\", \"fast\", \"early\", \"soon\", \"late\", \"long\", \"far\", \"lately\", \"today\", \"tomorrow\", \"yesterday\", \"now\", \"ago\", \"here\", \"there\", \"then\", \"when\", \"where\", \"why\", \"how\", \"what\", \"who\", \"whom\", \"whose\", \"which\", \"that\", \"this\", \"these\", \"those\", \"thus\", \"however\", \"moreover\", \"nevertheless\", \"otherwise\", \"still\", \"yet\", \"anyway\", \"besides\", \"furthermore\", \"incidentally\", \"meanwhile\", \"likewise\", \"similarly\", \"already\", \"eventually\", \"finally\", \"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"next\", \"last\", \"previously\", \"initially\", \"originally\", \"usually\", \"sometimes\", \"often\", \"occasionally\", \"rarely\", \"generally\", \"usually\", \"constantly\", \"continually\", \"frequently\", \"regularly\", \"repeatedly\", \"normally\", \"occasionally\", \"rarely\", \"seldom\", \"sometimes\", \"usually\", \"always\", \"never\", \"forever\", \"ever\", \"sometimes\", \"occasionally\", \"rarely\", \"seldom\", \"usually\", \"always\", \"never\", \"forever\", \"ever\", \"almost\", \"nearly\", \"quite\", \"simply\", \"just\", \"hardly\", \"barely\", \"scarcely\", \"merely\", \"almost\", \"nearly\", \"quite\", \"simply\", \"just\", \"hardly\", \"barely\", \"scarcely\", \"merely\", \"almost\", \"nearly\", \"quite\", \"simply\", \"just\", \"hardly\", \"barely\", \"scarcely\", \"merely\", \"almost\", \"nearly\", \"quite\", \"simply\", \"just\", \"hardly\", \"barely\", \"scarcely\", \"merely\", \"almost\", \"nearly\", \"quite\", \"",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"quietly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPositions.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.size == 0) Left(\"No adverbs found\")\n        else Right(adverbPositions(0)._2)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(word => adverbs.contains(word._1)).map(_._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"coyly\", \"bashfully\", \"boldly\", \"calmly\", \"carefully\", \"cheerfully\", \"clearly\", \"closely\", \"coolly\", \"courageously\", \"crossly\", \"cruelly\", \"curiously\", \"daily\", \"daintily\", \"dearly\", \"deceivingly\", \"deeply\", \"defiantly\", \"deliberately\", \"delightfully\", \"diligently\", \"dimly\", \"doubtfully\", \"dreamily\", \"easily\", \"elegantly\", \"enormously\", \"enthusiastically\", \"equally\", \"especially\", \"evenly\", \"eventually\", \"exactly\", \"faithfully\", \"famously\", \"far\", \"fast\", \"fatally\", \"ferociously\", \"fervently\", \"fiercely\", \"fondly\", \"foolishly\", \"fortunately\", \"frankly\", \"frantically\", \"freely\", \"frenetically\", \"frightfully\", \"fully\", \"furiously\", \"generously\", \"gently\", \"gladly\", \"gleefully\", \"gracefully\", \"gratefully\", \"greatly\", \"greedily\", \"happily\", \"hastily\", \"healthily\", \"heavily\", \"helpfully\", \"helplessly\", \"highly\", \"honestly\", \"hopelessly\", \"hourly\", \"hungrily\", \"immediately\", \"innocently\", \"inquisitively\", \"instantly\", \"intensely\", \"intently\", \"interestingly\", \"inwardly\", \"jaggedly\", \"jealously\", \"joshingly\", \"joyfully\", \"joyously\", \"jovially\", \"jubilantly\", \"judgementally\", \"justly\", \"keenly\", \"kiddingly\", \"kindheartedly\", \"kindly\", \"knavishly\", \"knottily\", \"knowingly\", \"knowledgeably\", \"kookily\", \"lazily\", \"less\", \"lightly\", \"likely\", \"limply\", \"lively\", \"loftily\", \"longingly\", \"loosely\", \"",
    "        val pattern = \"\\\\w+ly\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(m) => Right(m.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"quietly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(a) => Right(words.indexOf(a))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"beautifully\", \"carefully\", \"happily\", \"sadly\", \"angrily\", \"loudly\", \"quietly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2).headOption\n        adverbPosition match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val index = adverbs.map(text.indexOf(_)).filter(_ != -1).head\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverb = adverbs.find(text.contains(_))\n        adverb match {\n            case Some(adverb) => Right(text.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\", \"angrily\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPosition = text.split(\" \").zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2).headOption\n        adverbPosition match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        val result = pattern.findFirstMatchIn(text)\n        if (result.isEmpty) Left(\"No adverb found\")\n        else Right(result.get.start)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.size > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            Right(words.indexOf(adverbs(0)))\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"calmly\", \"carefully\", \"fiercely\", \"fondly\", \"merrily\", \"noisily\", \"obediently\", \"politely\", \"quietly\", \"rapidly\", \"sadly\", \"sharply\", \"silently\", \"sleepily\", \"speedily\", \"swiftly\", \"tenderly\", \"vigorously\", \"warmly\", \"wearily\", \"wickedly\", \"wildly\", \"wisely\", \"zealously\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) return Right(i)\n        }\n        Left(\"No adverb found\")",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val adverbPosition = words.indexOf(adverb)\n            Right(adverbPosition)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"quietly\", \"well\", \"badly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(adverb) => Right(words.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"awkwardly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val adverbPosition = words.indexOf(adverb)\n            Right(adverbPosition)\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val position = text.indexOf(adverb)\n            Right(position)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val word = text.split(\" \").filter(x => x.endsWith(\"ly\")).headOption\n        word match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.length == 0) Left(\"No adverbs found\")\n        else Right(adverbPositions(0))",
    "        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        val matches = pattern.findAllIn(text)\n        if (matches.hasNext) {\n            val adverb = matches.next\n            val index = text.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"carefully\", \"happily\", \"sadly\", \"loudly\", \"quietly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val adverbPosition = words.indexOf(adverb)\n            Right(adverbPosition)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"carefully\", \"lazily\", \"sleepily\", \"noisily\", \"hungrily\", \"thirstily\", \"loudly\", \"quietly\", \"badly\", \"well\", \"hard\", \"fast\", \"early\", \"soon\", \"late\", \"far\", \"long\", \"high\", \"low\", \"near\", \"far\", \"right\", \"left\", \"up\", \"down\", \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"away\", \"back\", \"forward\", \"home\", \"here\", \"near\", \"there\", \"together\", \"apart\", \"now\", \"then\", \"today\", \"tomorrow\", \"yesterday\", \"ago\", \"before\", \"after\", \"later\", \"soon\", \"once\", \"twice\", \"still\", \"yet\", \"always\", \"never\", \"sometimes\", \"usually\", \"often\", \"sometimes\", \"seldom\", \"rarely\", \"probably\", \"almost\", \"enough\", \"too\", \"very\", \"quite\", \"just\", \"almost\", \"enough\", \"also\", \"even\", \"only\", \"really\", \"very\", \"almost\", \"enough\", \"too\", \"very\", \"quite\", \"just\", \"almost\", \"enough\", \"also\", \"even\", \"only\", \"really\", \"very\", \"almost\", \"enough\", \"too\", \"very\", \"quite\", \"just\", \"almost\", \"enough\", \"also\", \"even\", \"only\", \"really\", \"very\", \"almost\", \"enough\", \"too\", \"very\", \"quite\", \"just\", \"almost\", \"enough\", \"also\", \"even\", \"only\", \"really\", \"very\", \"almost\", \"enough\", \"too\", \"very\", \"quite\", \"just\", \"almost\", \"enough\", \"also\", \"even\", \"only\", \"really\", \"very\", \"almost\", \"enough\", \"too\", \"very\", \"quite\", \"just\", \"almost\", \"enough\", \"also\", \"even\", \"only\", \"really\", \"very\", \"almost\", \"enough\", \"too\", \"very\", \"quite\", \"just\", \"almost\", \"enough\", \"also\", \"even\", \"only\", \"",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"lazily\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val wordList = text.split(\" \")\n        val adverbList = wordList.filter(word => word.endsWith(\"ly\"))\n        if (adverbList.isEmpty) Left(\"No adverb found\")\n        else Right(wordList.indexOf(adverbList(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"suddenly\", \"quietly\", \"loudly\", \"carefully\", \"roughly\", \"politely\", \"foolishly\", \"merrily\", \"hungrily\", \"sleepily\", \"lazily\", \"noisily\", \"hungrily\", \"sleepily\", \"lazily\", \"noisily\", \"hastily\", \"calmly\", \"boldly\", \"bravely\", \"cheerfully\", \"courageously\", \"eagerly\", \"elegantly\", \"faithfully\", \"foolishly\", \"generously\", \"gracefully\", \"happily\", \"honestly\", \"hopefully\", \"jovially\", \"joyfully\", \"kindly\", \"lazily\", \"loosely\", \"madly\", \"merrily\", \"nicely\", \"obediently\", \"obnoxiously\", \"politely\", \"proudly\", \"quickly\", \"quietly\", \"rapidly\", \"rarely\", \"roughly\", \"sadly\", \"selfishly\", \"seriously\", \"shakily\", \"sharply\", \"silently\", \"slowly\", \"smoothly\", \"softly\", \"solemnly\", \"steadily\", \"sternly\", \"strangely\", \"stupidly\", \"sweetly\", \"swiftly\", \"tenderly\", \"tightly\", \"truly\", \"vivaciously\", \"warmly\", \"weakly\", \"wearily\", \"wildly\", \"wisely\", \"zealously\")\n        val words = text.split(\" \")\n        var i = 0\n        for (word <- words) {\n            if (adverbs.contains(word)) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverb = words.find(word => word.endsWith(\"ly\"))\n        adverb match {\n            case Some(word) => Right(words.indexOf(word))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) return Right(i)\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (words(i).endsWith(\"ly\")) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")"
  ]
}