{
  "name": "mbpp_440_find_adverb_position",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\")).headOption\n        adverb match {\n            case Some(word) => Right(words.indexOf(word))\n            case None => Left(\"No adverb found\")\n        }",
    "        val word = text.split(\" \").find(x => x.endsWith(\"ly\"))\n        if (word.isEmpty) Left(\"No adverb found\")\n        else Right(text.split(\" \").indexOf(word.get))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"softly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.length > 0) {\n            Right(adverbPositions(0)._2)\n        } else {\n            Left(\"No adverbs found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"foolishly\", \"merrily\", \"lazily\", \"loudly\", \"quietly\", \"noisily\", \"carefully\", \"greedily\", \"hungrily\", \"sleepily\", \"sweetly\", \"warmly\", \"weakly\", \"wildly\", \"wickedly\", \"wisely\", \"worriedly\", \"bravely\", \"calmly\", \"cheerfully\", \"courageously\", \"elegantly\", \"faithfully\", \"fondly\", \"gracefully\", \"humbly\", \"joyfully\", \"kindly\", \"lovingly\", \"patiently\", \"politely\", \"proudly\", \"quietly\", \"seriously\", \"shyly\", \"tenderly\", \"truly\", \"vivaciously\", \"willfully\", \"zealously\", \"zestfully\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"quietly\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(position => position != -1).head\n        if (adverbPosition == -1) Left(\"No adverb found\") else Right(adverbPosition)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\", \"calmly\", \"carefully\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val pattern = \"\\\\w+ly\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(m) => Right(m.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        val result = pattern.findFirstMatchIn(text)\n        if (result.isEmpty) Left(\"No adverb found\")\n        else Right(result.get.start)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"silently\", \"beautifully\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(adverb) => Right(words.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.find(x => adverbs.contains(x._1))\n        adverbPosition match {\n            case Some(x) => Right(x._2)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs.head\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val firstAdverb = adverbs(0)\n            val firstAdverbPosition = text.indexOf(firstAdverb)\n            Right(firstAdverbPosition)\n        } else {\n            Left(\"No adverbs found\")\n        }",
    "        val words = text.split(\" \")\n        val adverb = words.filter(x => x.endsWith(\"ly\"))\n        if (adverb.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverb(0)))"
  ]
}