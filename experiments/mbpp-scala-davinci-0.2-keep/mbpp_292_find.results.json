{
  "name": "mbpp_292_find",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        var q = n / m\n        return q\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) return 0\n        return 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        (n / m).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) return 0\n        else return 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n == 0) return 0\n        if (m == 0) return 0\n        if (n < m) return 0\n        return 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        var q = n / m\n        if (q * m == n) q\n        else q - 1\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjs6i97zc.scala:11)\n\tat Problem.main(tmpjs6i97zc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) return 0\n        return 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        val q = n / m\n        q\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        val q = n / m\n        q\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        val q = n / m\n        q\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) return 0\n        else return 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n/m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n == 0) return 0\n        if (n < m) return 0\n        return 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        var q = n / m\n        return q\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        val q = n / m\n        q\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) return 0\n        return 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        val q = n / m\n        q\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return (n / m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        val q = n / m\n        return q\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) return 0\n        else return 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        if (n == 0) 0\n        else if (n < m) 0\n        else 1 + find(n - m, m)\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        var result : Long = 0\n        var i : Long = 0\n        while (i * m <= n) {\n            result += 1\n            i += 1\n        }\n        return result - 1\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n        return n / m\n    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509722,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}