{
  "name": "mbpp_245_max_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                if (arr(i) < arr(j)) dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val maxSum = Array.fill(arr.length)(0L)\n        for (i <- 0 until arr.length) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) sum = max(sum, maxSum(j))\n            }\n            maxSum(i) = sum + arr(i)\n        }\n        maxSum.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        dp.map(x => x(0) + x(1) - arr(dp.indexOf(x))).max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) ans = max(ans, dp(i))\n        ans",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && left(i) < left(j) + arr(i)) left(i) = left(j) + arr(i)\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && right(i) < right(j) + arr(i)) right(i) = right(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (max < left(i) + right(i) - arr(i)) max = left(i) + right(i) - arr(i)\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    lis(i) = max(lis(i), lis(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    lds(i) = max(lds(i), lds(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, lis(i) + lds(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    lis(i) = max(lis(i), lis(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    lds(i) = max(lds(i), lds(j) + arr(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val inc = Array.fill(n)(0L)\n        val dec = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            inc(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) inc(i) = max(inc(i), inc(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dec(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dec(i) = max(dec(i), dec(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, inc(i) + dec(i) - arr(i))\n        max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = 1\n            dp(i)(1) = 1\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + 1)\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + 1)\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i)(0) + dp(i)(1) - 1)\n        }\n        max",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i)(0) + dp(i)(1) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(1)\n        val lds = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && lis(i) < lis(j) + 1) lis(i) = lis(j) + 1\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && lds(i) < lds(j) + 1) lds(i) = lds(j) + 1\n            }\n        }\n        val max = lis.zip(lds).map(x => x._1 + x._2 - 1).max\n        max",
    "        val n = arr.length\n        val increasing = Array.ofDim[Long](n)\n        val decreasing = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            increasing(i) = arr(i)\n            decreasing(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && increasing(i) < increasing(j) + arr(i)) increasing(i) = increasing(j) + arr(i)\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && decreasing(i) < decreasing(j) + arr(i)) decreasing(i) = decreasing(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (max < increasing(i) + decreasing(i) - arr(i)) max = increasing(i) + decreasing(i) - arr(i)\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n)\n        for (i <- 0 until n) dp(i) = arr(i)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.ofDim[Long](n)\n        for (i <- 0 until n) dp2(i) = arr(i)\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + arr(i)\n        }\n        dp.max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(1)\n        val lds = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && lis(i) < lis(j) + 1) lis(i) = lis(j) + 1\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && lds(i) < lds(j) + 1) lds(i) = lds(j) + 1\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (lis(i) + lds(i) - 1 > max) max = lis(i) + lds(i) - 1\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        var max = 0L\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) + arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val lis = Array.fill(n)(1)\n        val lds = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && lis(i) < lis(j) + 1) lis(i) = lis(j) + 1\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && lds(i) < lds(j) + 1) lds(i) = lds(j) + 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, lis(i) + lds(i) - 1)\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) + arr(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + arr(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = 1\n            dp(i)(1) = 1\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + 1)\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + 1)\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - 1)\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, left(i) + right(i) - arr(i))\n        max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = arr(i)\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(i)(j) = max(dp(i)(j - 1), arr(j))\n            }\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(j)(i) = max(dp(j - 1)(i), arr(j))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                max = max(max, dp(i)(j) + dp(j)(i))\n            }\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        left(0) = arr(0)\n        right(n - 1) = arr(n - 1)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1), arr(i))\n            right(n - 1 - i) = max(right(n - i), arr(n - 1 - i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            ans = max(ans, dp(i))\n        }\n        ans",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) ans = max(ans, dp1(i) + dp2(i) - arr(i))\n        ans",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            ans = max(ans, dp(i))\n        }\n        ans",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = 1\n            dp(i)(1) = 1\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + 1)\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + 1)\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - 1)\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0) left(i) = max(left(i), left(i - 1) + arr(i))\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1) right(i) = max(right(i), right(i + 1) + arr(i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                if (arr(j) > arr(i)) dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) ans = max(ans, dp(i)(0) + dp(i)(1) - arr(i))\n        ans",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result",
    "        val dp = Array.fill(arr.length)(0L)\n        for (i <- 0 until arr.length) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(arr.length)(0L)\n        for (i <- arr.length - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- i + 1 until arr.length) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until arr.length) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = new Array[Long](n)\n        val right = new Array[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) ans = max(ans, dp(i) + dp2(i) - arr(i))\n        ans",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = 1\n            dp(i)(1) = 1\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + 1)\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + 1)\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - 1)\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0) left(i) = max(left(i), left(i - 1) + arr(i))\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1) right(i) = max(right(i), right(i + 1) + arr(i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) ans = max(ans, dp(i) + dp2(i) - arr(i))\n        ans",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(0)\n        val lds = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                if (arr(i) < arr(j)) dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max max (left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        dp(0)(0) = arr(0)\n        dp(0)(1) = arr(0)\n        for (i <- 1 until n) {\n            dp(i)(0) = max(dp(i - 1)(0) + arr(i), arr(i))\n            dp(i)(1) = max(dp(i - 1)(1) + arr(i), arr(i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) + arr(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && left(i) < left(j) + arr(i)) left(i) = left(j) + arr(i)\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && right(i) < right(j) + arr(i)) right(i) = right(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (max < left(i) + right(i) - arr(i)) max = left(i) + right(i) - arr(i)\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        left.zip(right).map(x => x._1 + x._2 - arr(x._1.toInt)).max",
    "        val n = arr.length\n        val lis = Array.ofDim[Long](n)\n        val lds = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            lds(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        dp2(n - 1) = arr(n - 1)\n        for (i <- 1 until n) {\n            dp(i) = max(dp(i - 1) + arr(i), arr(i))\n        }\n        for (i <- n - 2 to 0 by -1) {\n            dp2(i) = max(dp2(i + 1) + arr(i), arr(i))\n        }\n        var max = 0L\n        for (i <- 0 until n - 1) {\n            max = max(max, dp(i) + dp2(i + 1))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var maxSum = 0L\n        for (i <- 0 until n) {\n            maxSum = max(maxSum, lis(i) + lds(i) - arr(i))\n        }\n        maxSum",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp1(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) + arr(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + arr(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) max = max max dp(j)\n            }\n            dp(i) = max + arr(i)\n        }\n        dp.max",
    "        val n = arr.length\n        val inc = Array.fill(n)(0L)\n        val dec = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            inc(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) inc(i) = max(inc(i), inc(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dec(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dec(i) = max(dec(i), dec(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, inc(i) + dec(i) - arr(i))\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i) && lis(j) + arr(i) > lis(i)) lis(i) = lis(j) + arr(i)\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i) && lds(j) + arr(i) > lds(i)) lds(i) = lds(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (lis(i) + lds(i) - arr(i) > max) max = lis(i) + lds(i) - arr(i)\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dpr = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dpr(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dpr(i) = max(dpr(i), dpr(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dpr(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp1(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp1(i) = max(dp1(i), dp1(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp1(i) + dp2(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = 1\n            dp(i)(1) = 1\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + 1)\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + 1)\n                }\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            ans = max(ans, dp(i)(0) + dp(i)(1) - 1)\n        }\n        ans",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                if (arr(j) > arr(i)) dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n            }\n        }\n        dp.map(x => x(0) + x(1) - arr(dp.indexOf(x))).max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp(n - 1)",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = 1\n            dp(i)(1) = 1\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + 1)\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + 1)\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - 1)\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            ans = max(ans, dp(i) + dp2(i) - arr(i))\n        }\n        ans",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && left(i) < left(j) + arr(i)) left(i) = left(j) + arr(i)\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j) && right(i) < right(j) + arr(i)) right(i) = right(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (max < left(i) + right(i) - arr(i)) max = left(i) + right(i) - arr(i)\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                if (arr(j) > arr(i)) dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val dp = Array.fill(arr.length)(0L)\n        val dp2 = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        dp2(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = arr(i)\n            dp2(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) + arr(i))\n                }\n                if (arr(j) > arr(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + arr(i))\n                }\n            }\n        }\n        dp.max + dp2.max - arr.max",
    "        val n = arr.length\n        val inc = Array.fill(n)(0L)\n        val dec = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            inc(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) inc(i) = max(inc(i), inc(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dec(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dec(i) = max(dec(i), dec(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, inc(i) + dec(i) - arr(i))\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) + arr(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + arr(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) max = max max dp(j)\n            }\n            dp(i) = max + arr(i)\n        }\n        dp(n - 1)",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = 1\n            dp(i)(1) = 1\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + 1)\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + 1)\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - 1)\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1), arr(i - 1))\n            right(n - i - 1) = max(right(n - i), arr(n - i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                if (arr(i) < arr(j)) dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = new Array[Long](n)\n        val right = new Array[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1), arr(i) + left(i - 1))\n        }\n        for (i <- n - 2 to 0 by -1) {\n            right(i) = max(right(i + 1), arr(i) + right(i + 1))\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = arr(i)\n        }\n        for (i <- 0 until n; j <- i + 1 until n) {\n            dp(i)(j) = max(dp(i)(j - 1) + arr(j), dp(i)(j - 1))\n        }\n        for (i <- n - 1 to 0 by -1; j <- i - 1 to 0 by -1) {\n            dp(i)(j) = max(dp(i)(j), dp(i + 1)(j) + arr(i))\n        }\n        dp(0)(n - 1)",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = 1\n            dp(i)(1) = 1\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + 1)\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + 1)\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i)(0) + dp(i)(1) - 1)\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, lis(i) + lds(i) - arr(i))\n        max",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i))\n        result",
    "        val dp = Array.ofDim[Long](arr.length, 2)\n        for (i <- 0 until arr.length) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, left(i) + right(i) - arr(i))\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, dp(i))\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            ans = max(ans, left(i) + right(i) - arr(i))\n        }\n        ans",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = arr(i)\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(i)(j) = max(dp(i)(j - 1), arr(j))\n            }\n        }\n        for (i <- 0 until n) {\n            for (j <- i - 1 to 0 by -1) {\n                dp(i)(j) = max(dp(i)(j), arr(j))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                result = max(result, dp(i)(j) * (j - i + 1))\n            }\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0)\n        val dp2 = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) + arr(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n)\n        for (i <- 0 until n) dp(i) = arr(i)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        val result = Array.fill(n)(0L)\n        for (i <- 0 until n) result(i) = left(i) + right(i) - arr(i)\n        result.max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        }\n        result",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = 1\n            dp(i)(1) = 1\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + 1)\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + 1)\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - 1)\n        }\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            ans = max(ans, dp(i) + dp2(i) - arr(i))\n        }\n        ans",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result",
    "        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max",
    "        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        left(0) = arr(0)\n        right(n - 1) = arr(n - 1)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1) + arr(i), arr(i))\n        }\n        for (i <- n - 2 to 0 by -1) {\n            right(i) = max(right(i + 1) + arr(i), arr(i))\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max"
  ]
}