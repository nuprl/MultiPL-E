{
  "name": "mbpp_108_merge_sorted_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to merge three lists into a single sorted list.\n    def mergeSortedList(num1 : List[Long], num2 : List[Long], num3 : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(mergeSortedList((List[Long](25l.toLong, 24l.toLong, 15l.toLong, 4l.toLong, 5l.toLong, 29l.toLong, 110l.toLong)), (List[Long](19l.toLong, 20l.toLong, 11l.toLong, 56l.toLong, 25l.toLong, 233l.toLong, 154l.toLong)), (List[Long](24l.toLong, 26l.toLong, 54l.toLong, 48l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 11l.toLong, 15l.toLong, 19l.toLong, 20l.toLong, 24l.toLong, 24l.toLong, 25l.toLong, 25l.toLong, 26l.toLong, 29l.toLong, 48l.toLong, 54l.toLong, 56l.toLong, 110l.toLong, 154l.toLong, 233l.toLong))));\n    assert(mergeSortedList((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (List[Long](2l.toLong, 5l.toLong, 7l.toLong, 11l.toLong)), (List[Long](1l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 12l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong))));\n    assert(mergeSortedList((List[Long](18l.toLong, 14l.toLong, 10l.toLong, 9l.toLong, 8l.toLong, 7l.toLong, 9l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 1l.toLong)), (List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 25l.toLong, 58l.toLong)), (List[Long](12l.toLong, 74l.toLong, 9l.toLong, 50l.toLong, 61l.toLong, 41l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 14l.toLong, 18l.toLong, 22l.toLong, 25l.toLong, 25l.toLong, 35l.toLong, 41l.toLong, 50l.toLong, 58l.toLong, 61l.toLong, 65l.toLong, 74l.toLong, 75l.toLong, 85l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        var result = List[Long]()\n        var l1 = num1\n        var l2 = num2\n        var l3 = num3\n        while (!l1.isEmpty || !l2.isEmpty || !l3.isEmpty) {\n            if (l1.isEmpty) {\n                if (l2.isEmpty) {\n                    result = result ::: l3\n                    l3 = List[Long]()\n                } else if (l3.isEmpty) {\n                    result = result ::: l2\n                    l2 = List[Long]()\n                } else {\n                    if (l2.head < l3.head) {\n                        result = result :+ l2.head\n                        l2 = l2.tail\n                    } else {\n                        result = result :+ l3.head\n                        l3 = l3.tail\n                    }\n                }\n            } else if (l2.isEmpty) {\n                if (l1.isEmpty) {\n                    result = result ::: l3\n                    l3 = List[Long]()\n                } else if (l3.isEmpty) {\n                    result = result ::: l1\n                    l1 = List[Long]()\n                } else {\n                    if (l1.head < l3.head) {\n                        result = result :+ l1.head\n                        l1 = l1.tail\n                    } else {\n                        result = result :+ l3.head\n                        l3 = l3.tail\n                    }\n                }\n            } else if (l3.isEmpty) {\n                if (l1.isEmpty) {\n                    result = result ::: l2\n                    l2 = List[Long]()\n                } else if (l2.isEmpty) {\n                    result = result ::: l1\n                    l1 = List[Long]()\n                } else {\n                    if (l1.head < l2.head) {\n                        result = result :+ l1.head\n                        l1 = l1.tail\n                    } else {\n                        result = result :+ l2.head\n                        l2 = l2.tail\n                    }\n                }\n            } else {\n                if (l1.head < l2.",
    "        var result = new ListBuffer[Long]\n        var i = 0; var j = 0; var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result += num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result += num2(j)\n                j += 1\n            } else {\n                result += num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result += num3(k)\n            k += 1\n        }\n        result.toList",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result += num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result += num2(j)\n                j += 1\n            } else {\n                result += num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result += num3(k)\n            k += 1\n        }\n        result.toList",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result"
  ]
}