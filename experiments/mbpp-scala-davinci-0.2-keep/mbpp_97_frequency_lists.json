{
  "name": "mbpp_97_frequency_lists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    def frequencyLists(list1 : List[List[Long]]) : Map[Long,Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(frequencyLists((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong, 5l.toLong)))).equals((Map[Long,Long](1l -> 1l, 2l -> 3l, 3l -> 1l, 4l -> 1l, 5l -> 2l, 6l -> 1l, 7l -> 1l, 8l -> 1l, 9l -> 1l))));\n    assert(frequencyLists((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong)))).equals((Map[Long,Long](1l -> 1l, 2l -> 1l, 3l -> 1l, 4l -> 1l, 5l -> 1l, 6l -> 1l, 7l -> 1l, 8l -> 1l, 9l -> 1l, 10l -> 1l, 11l -> 1l, 12l -> 1l))));\n    assert(frequencyLists((List[List[Long]](List[Long](20l.toLong, 30l.toLong, 40l.toLong, 17l.toLong), List[Long](18l.toLong, 16l.toLong, 14l.toLong, 13l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong)))).equals((Map[Long,Long](20l -> 2l, 30l -> 2l, 40l -> 2l, 17l -> 1l, 18l -> 1l, 16l -> 1l, 14l -> 1l, 13l -> 1l, 10l -> 1l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (i <- l) {\n                if (map.contains(i)) {\n                    map(i) = map(i) + 1\n                } else {\n                    map(i) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        return map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (i <- l) {\n                if (map.contains(i)) {\n                    map(i) += 1\n                } else {\n                    map(i) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        return map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) = map(j) + 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        map",
    "        var freq = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                freq(e) = freq.getOrElse(e, 0) + 1\n            }\n        }\n        freq",
    "        var result = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (result.contains(j)) {\n                    result(j) += 1\n                } else {\n                    result += (j -> 1)\n                }\n            }\n        }\n        result",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var freqMap = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (freqMap.contains(element)) {\n                    freqMap(element) += 1\n                } else {\n                    freqMap(element) = 1\n                }\n            }\n        }\n        return freqMap",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        map",
    "        val freq = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (freq.contains(e)) {\n                    freq(e) += 1\n                } else {\n                    freq(e) = 1\n                }\n            }\n        }\n        freq"
  ]
}