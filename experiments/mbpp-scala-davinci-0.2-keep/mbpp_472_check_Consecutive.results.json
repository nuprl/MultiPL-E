{
  "name": "mbpp_472_check_Consecutive",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) != sorted(i - 1) + 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sortWith(_ < _)\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) != sorted(i - 1) + 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sortWith(_ < _)\n        val diff = sorted.zip(sorted.tail).map(x => x._2 - x._1)\n        diff.forall(x => x == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.size) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) if (sorted(i) + 1 != sorted(i + 1)) return false\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sortWith(_ < _)\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        val diff = sorted.last - sorted.head\n        if (diff == sorted.length - 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        l.sortWith((x, y) => x < y)\n        var prev = l.head\n        for (i <- l.tail) {\n            if (i != prev + 1) return false\n            prev = i\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sortWith(_ < _)\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i) + 1 != sorted(i + 1)) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i) + 1 != sorted(i + 1)) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) != sorted(i - 1) + 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        var min = l.min\n        var max = l.max\n        if (max - min + 1 == l.length) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until l.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        if (l.isEmpty) return true\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val s = l.sorted\n        for (i <- 1 until s.length) {\n            if (s(i) - s(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) != sorted(i) + 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i) + 1 != sorted(i + 1)) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        l.sortWith(_ < _) == (l.head to l.last).toList\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        val diffs = sorted.zip(sorted.tail).map(x => x._2 - x._1)\n        diffs.forall(x => x == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        l.sorted.sliding(2).forall(x => x(1) - x(0) == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sortWith(_ < _)\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        l.sorted.sliding(2).forall(x => x(1) - x(0) == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        val min = sorted.head\n        val max = sorted.last\n        if (max - min + 1 == l.length) {\n            for (i <- 0 until l.length - 1) {\n                if (sorted(i + 1) - sorted(i) != 1) return false\n            }\n            true\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        var sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        val min = sorted.head\n        val max = sorted.last\n        if (max - min + 1 != l.length) return false\n        for (i <- 0 until l.length) {\n            if (sorted(i) != min + i) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return true\n        val sorted = l.sorted\n        for (i <- 0 until sorted.size - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) != sorted(i) + 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) if (sorted(i + 1) - sorted(i) != 1) return false\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        l.sortWith(_ < _) == (l.head to l.last).toList\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) != sorted(i) + 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i) + 1 != sorted(i + 1)) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) != sorted(i) + 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val s = l.sorted\n        for (i <- 1 until s.length) {\n            if (s(i) - s(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        var min = Long.MaxValue\n        var max = Long.MinValue\n        for (i <- l) {\n            if (i < min) min = i\n            if (i > max) max = i\n        }\n        return (max - min + 1 == l.length)\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until l.length - 1) {\n            if (sorted(i + 1) != sorted(i) + 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}