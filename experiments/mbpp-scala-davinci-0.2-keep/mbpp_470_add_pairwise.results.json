{
  "name": "mbpp_470_add_pairwise",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz5m0wmy2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz5m0wmy2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz5m0wmy2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        val tup_sum = tup.zipWithIndex.map(x => if (x._2 == tup_len - 1) tup(0) + x._1 else tup(x._2 + 1) + x._1).sum\n        return tup_sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekginvee.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekginvee.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekginvee.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjppq1mmh.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjppq1mmh.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjppq1mmh.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str : String = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += tup_str(i).asDigit + tup_str(i + 1).asDigit\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmjcu8edy.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmjcu8edy.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmjcu8edy.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var result : Long = 0\n        var tup_str : String = test_tup.toString\n        for (i <- 0 to tup_str.length - 2) {\n            result += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpariucv48.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpariucv48.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpariucv48.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6eu5o1i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6eu5o1i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6eu5o1i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokh8cpze.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokh8cpze.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokh8cpze.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + (tup / 10 % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph0spub62.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph0spub62.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph0spub62.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6bp_ue4.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6bp_ue4.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6bp_ue4.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(_.asDigit)\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len - 1) {\n            sum += tup(i) + tup(i + 1)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6a7jcl_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6a7jcl_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6a7jcl_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2bzu0ju.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2bzu0ju.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2bzu0ju.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(_.asDigit)\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len) {\n            sum += tup(i) + tup((i + 1) % tup_len)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzwd_id6i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzwd_id6i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzwd_id6i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup.toString.toList\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).toString.toInt + tup(i + 1).toString.toInt)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd5ifwqu.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd5ifwqu.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd5ifwqu.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v3c3tpx.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v3c3tpx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v3c3tpx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjppq1mmh.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjppq1mmh.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjppq1mmh.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str = test_tup.toString\n        var tup_arr = tup_str.toCharArray\n        for (i <- 0 to tup_arr.length - 2) {\n            sum += tup_arr(i).asDigit + tup_arr(i + 1).asDigit\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_7vwjdb.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_7vwjdb.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_7vwjdb.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup.toString.toList\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).toString.toInt + tup(i + 1).toString.toInt)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd5ifwqu.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd5ifwqu.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd5ifwqu.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + (tup / 10 % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf2nb6q4d.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf2nb6q4d.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf2nb6q4d.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup : Long = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1tuj2c4.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1tuj2c4.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1tuj2c4.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup.toString.toList\n        var sum = 0\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).toString.toInt + tup(i + 1).toString.toInt)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k4190q_.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k4190q_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k4190q_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) * pow(10, i).toLong\n            tup /= 10\n            i += 2\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5olwy26.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5olwy26.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5olwy26.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var test_tup_str = test_tup.toString\n        for (i <- 0 until test_tup_str.length - 1) {\n            sum += (test_tup_str(i).asDigit + test_tup_str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jpbpl6g.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jpbpl6g.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jpbpl6g.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        val str = test_tup.toString\n        for (i <- 0 until str.length - 1) {\n            sum += (str(i).asDigit + str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe7ahl6l.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe7ahl6l.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe7ahl6l.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val sum = tup.zip(tup.tail).map(x => x._1 + x._2).sum\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5mvi656.scala:11:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5mvi656.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5mvi656.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokh8cpze.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokh8cpze.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokh8cpze.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup.toString.toList\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).asDigit + tup(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp552aafab.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp552aafab.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp552aafab.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var num : Long = test_tup\n        while (num > 0) {\n            sum += (num % 10) + ((num / 10) % 10)\n            num /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpug0uqqyp.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpug0uqqyp.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpug0uqqyp.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.asDigit)\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len) {\n            sum += tup(i) + tup((i + 1) % tup_len)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0f_l95z0.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0f_l95z0.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0f_l95z0.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(_.asDigit)\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len) {\n            sum += tup(i) + tup((i + 1) % tup_len)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124252,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58_dren0.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58_dren0.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58_dren0.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup_len = test_tup.toString.length\n        var sum = 0L\n        for (i <- 0 until tup_len - 1) {\n            sum += (test_tup / pow(10, i).toLong % 10 + test_tup / pow(10, i + 1).toLong % 10)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqptziyof.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqptziyof.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqptziyof.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup.toString.toList\n        var sum = 0\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).asDigit + tup(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg58udsg7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg58udsg7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg58udsg7.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(_.asDigit)\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len) {\n            if (i == tup_len - 1) sum += tup(i) + tup(0)\n            else sum += tup(i) + tup(i + 1)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ep2rn34.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ep2rn34.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ep2rn34.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6eu5o1i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6eu5o1i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6eu5o1i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var str = test_tup.toString\n        for (i <- 0 until str.length - 1) {\n            sum += (str(i).asDigit + str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmb04ygr.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmb04ygr.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmb04ygr.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup.toString.toList\n        for (i <- 0 until tup.length - 1) {\n            sum += tup(i).asDigit + tup(i + 1).asDigit\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpha8hn9lr.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpha8hn9lr.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpha8hn9lr.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str = test_tup.toString\n        for (i <- 0 to tup_str.length - 2) {\n            sum += tup_str(i).asDigit + tup_str(i + 1).asDigit\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph3u59q1g.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph3u59q1g.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph3u59q1g.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList\n        var sum = 0\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).asDigit + tup(i + 1).asDigit)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dyvf_7e.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dyvf_7e.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dyvf_7e.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += (tup % 10) * (tup % 10)\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpldwsmrmr.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpldwsmrmr.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpldwsmrmr.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup : Long = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmc85sxw8.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmc85sxw8.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmc85sxw8.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        var sum = 0L\n        for (i <- 0 until tup.length - 1) {\n            sum += tup(i) + tup(i + 1)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqnhbpei.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqnhbpei.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqnhbpei.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8uf71m3.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8uf71m3.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8uf71m3.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v3c3tpx.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v3c3tpx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v3c3tpx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup : Long = test_tup\n        var last_digit : Long = 0\n        while (tup > 0) {\n            last_digit = tup % 10\n            sum += last_digit\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiwmmb3e4.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiwmmb3e4.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiwmmb3e4.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8kryzh5a.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8kryzh5a.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8kryzh5a.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp83r4zqll.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp83r4zqll.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp83r4zqll.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup.toString.toList\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).toString.toInt + tup(i + 1).toString.toInt)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124278,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsr2zmay.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsr2zmay.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsr2zmay.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str : String = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124278,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuxddmv2d.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuxddmv2d.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuxddmv2d.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        val tup_sum = (0 until tup_len).map(i => (tup(i) + tup((i + 1) % tup_len)) % 10).sum\n        return tup_sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124279,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp09n49hkx.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp09n49hkx.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp09n49hkx.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup_list = test_tup.toString.toList.map(_.asDigit)\n        var sum = 0\n        for (i <- 0 until tup_list.length - 1) {\n            sum += tup_list(i) + tup_list(i + 1)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124279,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoo5z2dp.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoo5z2dp.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoo5z2dp.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup.toString\n        var sum = 0\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).toString.toInt + tup(i + 1).toString.toInt)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124279,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjx414fng.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjx414fng.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjx414fng.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup.toString.toList\n        var sum = 0\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).asDigit + tup(i + 1).asDigit)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpngkpj8.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpngkpj8.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpngkpj8.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(_.asDigit)\n        val sum = (tup.zip(tup.tail) :+ (tup.head, tup.last)).map(x => x._1 + x._2).sum\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124279,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptd5qyx3f.scala:11:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptd5qyx3f.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptd5qyx3f.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += (tup % 10) + (tup / 10 % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124279,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6c5d0n5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6c5d0n5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6c5d0n5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v3c3tpx.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v3c3tpx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v3c3tpx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while(tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124279,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagjys2zn.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagjys2zn.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagjys2zn.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str : String = test_tup.toString\n        for (i <- 0 to tup_str.length - 2) {\n            sum += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124279,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt36f84dp.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt36f84dp.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt36f84dp.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str : String = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124278,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuxddmv2d.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuxddmv2d.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuxddmv2d.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124279,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfskxhu57.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfskxhu57.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfskxhu57.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.asDigit)\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len - 1) {\n            sum += tup(i) + tup(i + 1)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124279,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrvkn53b.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrvkn53b.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrvkn53b.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while(tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124279,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsn5m9fmz.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsn5m9fmz.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsn5m9fmz.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509751,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87r613z2.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}