{
  "name": "mbpp_463_max_subarray_product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar",
    "        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val tempMax = max(curr, max(curr * maxProduct, curr * minProduct))\n            val tempMin = min(curr, min(curr * maxProduct, curr * minProduct))\n            maxProduct = tempMax\n            minProduct = tempMin\n            result = max(result, maxProduct)\n        }\n        result",
    "        var maxProduct = arr(0)\n        var currProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            currProduct = max(currProduct * arr(i), arr(i))\n            maxProduct = max(maxProduct, currProduct)\n        }\n        maxProduct",
    "        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            } else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar",
    "        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val temp = max\n            max = max(max * curr, min * curr, curr)\n            min = min(temp * curr, min * curr, curr)\n            result = max(max, result)\n        }\n        result",
    "        var maxProduct = 0L\n        var maxProductEndingHere = 1L\n        var minProductEndingHere = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProductEndingHere *= arr(i)\n                minProductEndingHere = min(minProductEndingHere * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProductEndingHere = 1\n                minProductEndingHere = 1\n            } else {\n                val temp = maxProductEndingHere\n                maxProductEndingHere = max(minProductEndingHere * arr(i), 1)\n                minProductEndingHere = temp * arr(i)\n            }\n            if (maxProduct < maxProductEndingHere) maxProduct = maxProductEndingHere\n        }\n        maxProduct",
    "        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val curr = arr(i)\n            val maxProduct1 = max(curr, max(maxProduct * curr, minProduct * curr))\n            val minProduct1 = min(curr, min(maxProduct * curr, minProduct * curr))\n            maxProduct = maxProduct1\n            minProduct = minProduct1\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar",
    "        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = max\n            max = max(max * arr(i), min * arr(i), arr(i))\n            min = min(temp * arr(i), min * arr(i), arr(i))\n            result = max(result, max)\n        }\n        result",
    "        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1)\n            } else if (arr(i) == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar",
    "        var maxProduct = arr(0)\n        var currentMaxProduct = arr(0)\n        var currentMinProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            val nextMaxProduct = max(max(currentMaxProduct * arr(i), currentMinProduct * arr(i)), arr(i))\n            val nextMinProduct = min(min(currentMaxProduct * arr(i), currentMinProduct * arr(i)), arr(i))\n            maxProduct = max(maxProduct, nextMaxProduct)\n            currentMaxProduct = nextMaxProduct\n            currentMinProduct = nextMinProduct\n        }\n        maxProduct",
    "        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            val maxProductCopy = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(maxProductCopy * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar",
    "        var max = Long.MinValue\n        var min = Long.MaxValue\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else if (arr(i) == 0) {\n                max = 0\n                min = 0\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > result) result = max\n        }\n        result",
    "        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(max(a, b), arr(i))\n            min = min(min(a, b), arr(i))\n            result = max(result, max)\n        }\n        result",
    "        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val maxProductTemp = max(x, max(x * maxProduct, x * minProduct))\n            val minProductTemp = min(x, min(x * maxProduct, x * minProduct))\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar",
    "        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val temp = maxProduct\n            maxProduct = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            minProduct = min(min(temp * arr(i), minProduct * arr(i)), arr(i))\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar",
    "        var maxProduct = arr(0)\n        var minProduct = arr(0)\n        var maxSoFar = arr(0)\n        for (i <- 1 until arr.length) {\n            val maxProductTemp = max(max(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            val minProductTemp = min(min(maxProduct * arr(i), minProduct * arr(i)), arr(i))\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar",
    "        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                maxProduct *= arr(i)\n                minProduct = min(minProduct * arr(i), 1L)\n            }\n            else if (arr(i) == 0) {\n                maxProduct = 1L\n                minProduct = 1L\n            }\n            else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * arr(i), 1L)\n                minProduct = temp * arr(i)\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar",
    "        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            val temp = maxProduct\n            maxProduct = max(max(maxProduct * x, minProduct * x), x)\n            minProduct = min(min(temp * x, minProduct * x), x)\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar",
    "        var maxProduct = arr.head\n        var minProduct = arr.head\n        var maxSoFar = arr.head\n        for (i <- 1 until arr.length) {\n            val cur = arr(i)\n            val maxProductTemp = max(max(cur * maxProduct, cur * minProduct), cur)\n            val minProductTemp = min(min(cur * maxProduct, cur * minProduct), cur)\n            maxProduct = maxProductTemp\n            minProduct = minProductTemp\n            maxSoFar = max(maxSoFar, maxProduct)\n        }\n        maxSoFar",
    "        var maxProduct = 1L\n        var minProduct = 1L\n        var maxSoFar = 1L\n        for (x <- arr) {\n            if (x > 0) {\n                maxProduct *= x\n                minProduct = min(minProduct * x, 1)\n            } else if (x == 0) {\n                maxProduct = 1\n                minProduct = 1\n            } else {\n                val temp = maxProduct\n                maxProduct = max(minProduct * x, 1)\n                minProduct = temp * x\n            }\n            if (maxSoFar < maxProduct) maxSoFar = maxProduct\n        }\n        maxSoFar"
  ]
}