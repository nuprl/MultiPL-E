{
  "name": "mbpp_793_last",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the last position of an element in a sorted array.\n    def last(arr : List[Long], x : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val index = arr.indexOf(x)\n        if (index == -1) -1\n        else {\n            var i = index\n            while (i < arr.length && arr(i) == x) i += 1\n            i - 1\n        }",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l\n        else -1",
    "        var low = 0\n        var high = arr.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1 || arr(mid + 1) > x) return mid\n                else low = mid + 1\n            }\n            else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        -1",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        def search(l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else search(m + 1, r)\n                }\n                else if (arr(m.toInt) > x) search(l, m - 1)\n                else search(m + 1, r)\n            }\n        }\n        search(0, arr.length - 1)",
    "        var l = 0; var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) > x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) return -1\n            val m = (l + r) / 2\n            if (arr(m.toInt) == x && (m == r || arr(m.toInt + 1) != x)) return m\n            if (arr(m.toInt) > x) return last(arr, x, l, m - 1)\n            return last(arr, x, m + 1, r)\n        }\n        return last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) mid\n                else if (arr(mid.toInt) <= x) last(arr, x, mid + 1, high)\n                else last(arr, x, low, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                result = mid\n                low = mid + 1\n            }\n            else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result",
    "        var lo = 0\n        var hi = arr.length - 1\n        while (lo < hi) {\n            val mid = (lo + hi) / 2\n            if (arr(mid) <= x) lo = mid + 1\n            else hi = mid\n        }\n        if (arr(lo) == x) lo else -1",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (i == arr.length) -1\n            else if (arr(i.toInt) == x) i\n            else last(arr, x, i + 1)\n        }\n        last(arr, x, 0)",
    "        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)",
    "        def binarySearch(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else binarySearch(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) binarySearch(arr, x, low, mid - 1)\n                else binarySearch(arr, x, mid + 1, high)\n            }\n        }\n        binarySearch(arr, x, 0, arr.length - 1)",
    "        def search(l : Long, r : Long) : Long = {\n            if (l > r) return -1\n            val mid = (l + r) / 2\n            if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) return mid\n            else if (arr(mid.toInt) <= x) search(mid + 1, r)\n            else search(l, mid - 1)\n        }\n        search(0, arr.length - 1)",
    "        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) <= x) i = mid + 1\n            else j = mid\n        }\n        if (arr(i) == x) i\n        else -1",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) mid\n                else if (arr(mid.toInt) <= x) last(arr, x, mid + 1, high)\n                else last(arr, x, low, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var left = 0\n        var right = arr.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == x) {\n                result = mid\n                left = mid + 1\n            }\n            else if (arr(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        result",
    "        var l = 0L\n        var r = arr.length - 1\n        var m = 0L\n        var result = -1L\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m.toInt) == x) {\n                result = m\n                l = m + 1\n            } else if (arr(m.toInt) < x) l = m + 1 else r = m - 1\n        }\n        result",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (i == arr.length) -1\n            else if (arr(i.toInt) == x) i\n            else last(arr, x, i + 1)\n        }\n        last(arr, x, 0)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) mid\n                else if (arr(mid.toInt) <= x) last(arr, x, mid + 1, high)\n                else last(arr, x, low, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l\n        else -1",
    "        def search(low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) return mid\n            else if (arr(mid.toInt) <= x) search(mid + 1, high)\n            else search(low, mid - 1)\n        }\n        search(0, arr.length - 1)",
    "        var l = 0L; var r = arr.length - 1L; var ans = -1L\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) == x) {\n                ans = m\n                l = m + 1\n            } else if (arr(m.toInt) > x) r = m - 1\n            else l = m + 1\n        }\n        ans",
    "        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                result = mid\n                low = mid + 1\n            } else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result",
    "        var left = 0\n        var right = arr.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) {\n                left = mid + 1\n                result = mid\n            } else {\n                right = mid - 1\n            }\n        }\n        result",
    "        var l = 0\n        var r = arr.length - 1\n        var m = (l + r) / 2\n        while (l < r) {\n            if (arr(m) <= x) l = m + 1\n            else r = m\n            m = (l + r) / 2\n        }\n        if (arr(m) == x) m else -1",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l;\n        else -1;",
    "        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)",
    "        def search(l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1) m\n                    else if (arr(m.toInt + 1) != x) m\n                    else search(m + 1, r)\n                }\n                else if (arr(m.toInt) < x) search(m + 1, r)\n                else search(l, m - 1)\n            }\n        }\n        search(0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val mid = (l + r) / 2\n                if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) mid\n                else if (arr(mid.toInt) <= x) last(arr, x, mid + 1, r)\n                else last(arr, x, l, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var low = 0\n        var high = arr.length - 1\n        while (low < high) {\n            val mid = (low + high) / 2\n            if (arr(mid) <= x) low = mid + 1\n            else high = mid\n        }\n        if (arr(low) == x) low\n        else -1",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            } else if (arr(mid) > x) r = mid - 1\n            else l = mid + 1\n        }\n        ans",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) < x) last(arr, x, m + 1, r)\n                else last(arr, x, l, m - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) > x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == high || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l;\n        else -1;",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1) mid\n                    else if (arr(mid.toInt + 1) == x) last(arr, x, mid + 1, end)\n                    else mid\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == high) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var left = 0\n        var right = arr.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n        result",
    "        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) <= x) i = mid + 1\n            else j = mid\n        }\n        if (arr(i) == x) i else -1",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) return mid\n            else if (arr(mid.toInt) <= x) return last(arr, x, mid + 1, high)\n            else return last(arr, x, low, mid - 1)\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0; var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        def search(l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else search(m + 1, r)\n                }\n                else if (arr(m.toInt) > x) search(l, m - 1)\n                else search(m + 1, r)\n            }\n        }\n        search(0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) < x) last(arr, x, m + 1, r)\n                else last(arr, x, l, m - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def search(low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else search(mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) search(low, mid - 1)\n                else search(mid + 1, high)\n            }\n        }\n        search(0, arr.length - 1)",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l;\n        else -1;",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l <= r) {\n            val m = (l + r) / 2;\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m;\n                else l = m + 1;\n            }\n            else if (arr(m) < x) l = m + 1;\n            else r = m - 1;\n        }\n        -1;",
    "        var l = 0; var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) > x) return m\n                else l = m + 1\n            }\n            else if (arr(m) < x) l = m + 1\n            else r = m - 1\n        }\n        -1",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        var l = 0\n        var r = arr.length - 1\n        var m = (l + r) / 2\n        while (l < r) {\n            if (arr(m) <= x) l = m + 1\n            else r = m\n            m = (l + r) / 2\n        }\n        if (arr(m) == x) m\n        else -1",
    "        var l = 0; var r = arr.length - 1\n        var m = (l + r) / 2\n        while (l <= r) {\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m) < x) l = m + 1\n            else r = m - 1\n            m = (l + r) / 2\n        }\n        -1",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r + 1) / 2\n            if (arr(m) <= x) l = m\n            else r = m - 1\n        }\n        if (arr(l) == x) l else -1",
    "        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)",
    "        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                result = mid\n                low = mid + 1\n            } else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result",
    "        var low = 0\n        var high = arr.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1 || arr(mid + 1) != x) return mid\n                else low = mid + 1\n            }\n            else if (arr(mid) < x) low = mid + 1\n            else high = mid - 1\n        }\n        -1",
    "        var l = 0;\n        var r = arr.length - 1;\n        var m = 0;\n        while (l <= r) {\n            m = (l + r) / 2;\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m;\n                else l = m + 1;\n            }\n            else if (arr(m) < x) l = m + 1;\n            else r = m - 1;\n        }\n        -1;",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def search(low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) return mid\n            else if (arr(mid.toInt) <= x) search(mid + 1, high)\n            else search(low, mid - 1)\n        }\n        search(0, arr.length - 1)",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l;\n        else -1;",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l <= r) {\n            val m = (l + r) / 2;\n            if (arr(m) == x) {\n                if (m == arr.length - 1) return m;\n                else if (arr(m + 1) != x) return m;\n                else l = m + 1;\n            }\n            else if (arr(m) < x) l = m + 1;\n            else r = m - 1;\n        }\n        -1;",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x && (m == arr.length - 1 || arr(m.toInt + 1) != x)) m\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r + 1) / 2\n            if (arr(m) <= x) l = m\n            else r = m - 1\n        }\n        if (arr(l) == x) l\n        else -1",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, index : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) index\n            else last(arr.tail, x, index + 1)\n        }\n        last(arr, x, 0)",
    "        var i = 0;\n        var j = arr.length - 1;\n        var k = -1;\n        while (i <= j) {\n            val m = (i + j) / 2;\n            if (arr(m) == x) {\n                k = m;\n                i = m + 1;\n            } else if (arr(m) < x) {\n                i = m + 1;\n            } else {\n                j = m - 1;\n            }\n        }\n        k;",
    "        var low = 0\n        var high = arr.length - 1\n        while (low < high) {\n            var mid = (low + high) / 2\n            if (arr(mid) <= x) low = mid + 1\n            else high = mid\n        }\n        if (arr(low) == x) low\n        else -1",
    "        var low = 0;\n        var high = arr.length - 1;\n        while (low <= high) {\n            val mid = (low + high) / 2;\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1 || arr(mid + 1) > x) return mid;\n                else low = mid + 1;\n            }\n            else if (arr(mid) > x) high = mid - 1;\n            else low = mid + 1;\n        }\n        -1;",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.size - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.size - 1)",
    "        def binarySearch(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1) mid\n                    else if (arr(mid.toInt + 1) == x) binarySearch(arr, x, mid + 1, high)\n                    else mid\n                }\n                else if (arr(mid.toInt) < x) binarySearch(arr, x, mid + 1, high)\n                else binarySearch(arr, x, low, mid - 1)\n            }\n        }\n        binarySearch(arr, x, 0, arr.length - 1)",
    "        def search(start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) mid\n                else if (arr(mid.toInt) > x) search(start, mid - 1)\n                else search(mid + 1, end)\n            }\n        }\n        search(0, arr.length - 1)",
    "        var left = 0\n        var right = arr.length - 1\n        var mid = 0\n        while (left <= right) {\n            mid = (left + right) / 2\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1) return mid\n                else if (arr(mid + 1) != x) return mid\n                else left = mid + 1\n            }\n            else if (arr(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        -1",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) return -1\n            val m = (l + r) / 2\n            if (arr(m.toInt) == x) {\n                if (m == arr.length - 1 || arr(m.toInt + 1) > x) return m\n                else return last(arr, x, m + 1, r)\n            }\n            else if (arr(m.toInt) > x) return last(arr, x, l, m - 1)\n            else return last(arr, x, m + 1, r)\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var left = 0\n        var right = arr.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == x) {\n                result = mid\n                left = mid + 1\n            } else if (arr(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        result",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0; var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) > x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        def search(low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) mid\n                else if (arr(mid.toInt) <= x) search(mid + 1, high)\n                else search(low, mid - 1)\n            }\n        }\n        search(0, arr.length - 1)",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l else -1",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1 else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        def last(arr : List[Long], x : Long, left : Long, right : Long) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == right) mid\n                    else last(arr, x, mid + 1, right)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, left, mid - 1)\n                else last(arr, x, mid + 1, right)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        var m = 0\n        var result = -1\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m) == x) {\n                result = m\n                l = m + 1\n            } else if (arr(m) < x) {\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        result",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) return -1\n            val m = (l + r) / 2\n            if (arr(m.toInt) == x && (m == arr.length - 1 || arr(m.toInt + 1) != x)) return m\n            else if (arr(m.toInt) <= x) return last(arr, x, m + 1, r)\n            else return last(arr, x, l, m - 1)\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        var low = 0\n        var high = arr.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1 || arr(mid + 1) > x) return mid\n                else low = mid + 1\n            }\n            else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        -1",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        var l = 0;\n        var r = arr.length - 1;\n        var m = 0;\n        var result = -1;\n        while (l <= r) {\n            m = (l + r) / 2;\n            if (arr(m) == x) {\n                result = m;\n                l = m + 1;\n            } else if (arr(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        result;",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var left = 0\n        var right = arr.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) {\n                left = mid + 1\n                result = mid\n            } else right = mid - 1\n        }\n        result",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) == x) {\n                if (m == arr.length - 1 || arr(m.toInt + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m.toInt) < x) l = m + 1\n            else r = m - 1\n        }\n        -1",
    "        var start = 0\n        var end = arr.length - 1\n        var result = -1\n        while (start <= end) {\n            val mid = (start + end) / 2\n            if (arr(mid) == x) {\n                result = mid\n                start = mid + 1\n            } else if (arr(mid) > x) {\n                end = mid - 1\n            } else {\n                start = mid + 1\n            }\n        }\n        result",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x && (m == r || arr(m.toInt + 1) != x)) m\n                else if (arr(m.toInt) <= x) last(arr, x, m + 1, r)\n                else last(arr, x, l, m - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r + 1) / 2\n            if (arr(m) <= x) l = m\n            else r = m - 1\n        }\n        if (arr(l) == x) l else -1",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0L\n        var r = arr.length - 1\n        var m = 0L\n        var result = -1L\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m.toInt) == x) {\n                result = m\n                l = m + 1\n            } else if (arr(m.toInt) < x) {\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        result",
    "        var l = 0\n        var r = arr.length - 1\n        var result = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                result = m\n                l = m + 1\n            } else if (arr(m) < x) l = m + 1\n            else r = m - 1\n        }\n        result",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) mid\n                else if (arr(mid.toInt) <= x) last(arr, x, mid + 1, high)\n                else last(arr, x, low, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val m = (i + j) / 2\n            if (arr(m) <= x) i = m + 1\n            else j = m\n        }\n        if (arr(i) == x) i else -1",
    "        def binarySearch(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) return mid\n            else if (arr(mid.toInt) <= x) binarySearch(arr, x, mid + 1, high)\n            else binarySearch(arr, x, low, mid - 1)\n        }\n        binarySearch(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0L\n        var r = arr.size - 1\n        var m = (l + r) / 2\n        while (l < r) {\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n            m = (l + r) / 2\n        }\n        if (arr(m.toInt) == x) m else -1",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r + 1) / 2\n            if (arr(m) <= x) l = m else r = m - 1\n        }\n        if (arr(l) == x) l else -1",
    "        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)",
    "        var l = 0\n        var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1) return m\n                else if (arr(m + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        var l = 0L\n        var r = arr.length - 1\n        var m = (l + r) / 2\n        while (l <= r) {\n            if (arr(m.toInt) == x) {\n                if (m == arr.length - 1 || arr(m.toInt + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m.toInt) > x) r = m - 1\n            else l = m + 1\n            m = (l + r) / 2\n        }\n        -1",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0; var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) > x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1 else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1) mid\n                    else if (arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) mid\n                else if (arr(mid.toInt) <= x) last(arr, x, mid + 1, high)\n                else last(arr, x, low, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) == x) {\n                if (m == arr.length - 1 || arr(m.toInt + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m.toInt) < x) l = m + 1\n            else r = m - 1\n        }\n        -1",
    "        var l = 0; var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1 || arr(mid + 1) != x) return mid\n                else left = mid + 1\n            }\n            else if (arr(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        -1",
    "        var l = 0; var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        var m = 0\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l;\n        else -1;",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l <= r) {\n            val m = (l + r) / 2;\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) > x) return m;\n                else l = m + 1;\n            }\n            else if (arr(m) > x) r = m - 1;\n            else l = m + 1;\n        }\n        -1;",
    "        var left = 0\n        var right = arr.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == x) {\n                result = mid\n                left = mid + 1\n            } else if (arr(mid) > x) {\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        }\n        result",
    "        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n        result",
    "        var l = 0\n        var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) > x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) <= x) i = mid + 1\n            else j = mid\n        }\n        if (arr(i) == x) i else -1",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        var l = 0; var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l else -1",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1) mid\n                    else if (arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l <= r) {\n            val m = (l + r) / 2;\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) > x) return m;\n                else l = m + 1;\n            }\n            else if (arr(m) > x) r = m - 1;\n            else l = m + 1;\n        }\n        -1;",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l <= r) {\n            val m = (l + r) / 2;\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m;\n                else l = m + 1;\n            } else if (arr(m) < x) l = m + 1;\n            else r = m - 1;\n        }\n        -1;",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                ans = m\n                l = m + 1\n            } else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        ans",
    "        def rec(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else rec(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) rec(arr, x, start, mid - 1)\n                else rec(arr, x, mid + 1, end)\n            }\n        }\n        rec(arr, x, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) > x) return m\n                else l = m + 1\n            }\n            else if (arr(m) < x) l = m + 1\n            else r = m - 1\n        }\n        -1",
    "        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                result = mid\n                low = mid + 1\n            }\n            else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l;\n        else -1;",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        var l = 0;\n        var r = arr.length - 1;\n        var result = -1;\n        while (l <= r) {\n            val m = l + (r - l) / 2;\n            if (arr(m) <= x) {\n                result = m;\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        result;",
    "        var l = 0; var r = arr.size - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        var l = 0\n        var r = arr.length - 1\n        var m = 0\n        var result = -1\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m) == x) {\n                result = m\n                l = m + 1\n            } else if (arr(m) < x) {\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        result",
    "        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1) m\n                    else if (arr(m.toInt + 1) == x) last(arr, x, m + 1, r)\n                    else m\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        def search(start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) mid\n                else if (arr(mid.toInt) > x) search(start, mid - 1)\n                else search(mid + 1, end)\n            }\n        }\n        search(0, arr.length - 1)",
    "        def search(l : Long, r : Long) : Long = {\n            if (l == r) {\n                if (arr(l.toInt) == x) l else -1\n            } else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == r || arr(m.toInt + 1) != x) m else search(m + 1, r)\n                } else if (arr(m.toInt) < x) search(m + 1, r) else search(l, m - 1)\n            }\n        }\n        search(0, arr.length - 1)",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l;\n        else -1;",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        return arr.lastIndexOf(x)",
    "        var l = 0;\n        var r = arr.length - 1;\n        var ans = -1;\n        while (l <= r) {\n            val m = (l + r) / 2;\n            if (arr(m) == x) {\n                ans = m;\n                l = m + 1;\n            }\n            else if (arr(m) > x) r = m - 1;\n            else l = m + 1;\n        }\n        ans;",
    "        var left = 0\n        var right = arr.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n        result",
    "        var l = 0L\n        var r = arr.length - 1\n        var m = 0L\n        var result = -1L\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m.toInt) == x) {\n                result = m\n                l = m + 1\n            } else if (arr(m.toInt) < x) {\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        result",
    "        var l = 0L\n        var r = arr.length - 1\n        var m = 0L\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m.toInt) == x) {\n                if (m == arr.length - 1 || arr(m.toInt + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m.toInt) < x) l = m + 1\n            else r = m - 1\n        }\n        -1",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def search(l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else search(m + 1, r)\n                }\n                else if (arr(m.toInt) < x) search(m + 1, r)\n                else search(l, m - 1)\n            }\n        }\n        search(0, arr.length - 1)",
    "        var start = 0\n        var end = arr.length - 1\n        var result = -1\n        while (start <= end) {\n            val mid = (start + end) / 2\n            if (arr(mid) == x) {\n                result = mid\n                start = mid + 1\n            }\n            else if (arr(mid) > x) end = mid - 1\n            else start = mid + 1\n        }\n        result",
    "        def helper(arr : List[Long], x : Long, index : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) index\n            else helper(arr.tail, x, index + 1)\n        }\n        helper(arr, x, 0)",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l.toInt) == x) l\n        else -1",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1) m\n                    else if (arr(m.toInt + 1) == x) last(arr, x, m + 1, r)\n                    else m\n                }\n                else if (arr(m.toInt) < x) last(arr, x, m + 1, r)\n                else last(arr, x, l, m - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) left = mid + 1\n            else right = mid\n        }\n        if (arr(left) == x) left else -1",
    "        def binarySearch(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) return -1\n            val mid = (l + r) / 2\n            if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) return mid\n            else if (arr(mid.toInt) <= x) return binarySearch(arr, x, mid + 1, r)\n            else return binarySearch(arr, x, l, mid - 1)\n        }\n        return binarySearch(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) mid\n                else if (arr(mid.toInt) <= x) last(arr, x, mid + 1, high)\n                else last(arr, x, low, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l;\n        else -1;",
    "        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                ans = m\n                l = m + 1\n            } else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        ans",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var lo = 0\n        var hi = arr.length - 1\n        while (lo < hi) {\n            val mid = (lo + hi) / 2\n            if (arr(mid) <= x) lo = mid + 1\n            else hi = mid\n        }\n        if (arr(lo) == x) lo\n        else -1",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1) m\n                    else if (arr(m.toInt + 1) == x) last(arr, x, m + 1, r)\n                    else m\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1",
    "        var l = 0; var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1 else r = m\n        }\n        if (arr(l) == x) l else -1"
  ]
}