{
  "name": "mbpp_739_find_Index",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    def findIndex(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findIndex((2l)) == (4l));\n    assert(findIndex((3l)) == (14l));\n    assert(findIndex((4l)) == (45l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 1L\n        var t = 1L\n        while(t.toString.length < n) {\n            i += 1\n            t += i\n        }\n        return i",
    "        var i = 1L\n        var t = 0L\n        while(t.toString.length < n) {\n            t = (i * (i + 1)) / 2\n            i += 1\n        }\n        i - 1",
    "        var i = 1L\n        var t = 1L\n        while (t.toString.length < n) {\n            i += 1\n            t += i\n        }\n        return i",
    "        var i = 1L\n        var t = 0L\n        while (t.toString.length < n) {\n            t = t + i\n            i += 1\n        }\n        i - 1",
    "        var i = 1L\n        var t = 0L\n        while (t.toString.length < n) {\n            t += i\n            i += 1\n        }\n        i - 1",
    "        var i = 1L\n        var t = 0L\n        while (t.toString.length < n) {\n            t += i\n            i += 1\n        }\n        i - 1",
    "        var i = 1L\n        while (true) {\n            val t = (i * (i + 1)) / 2\n            if (t.toString.length == n) return i\n            i += 1\n        }\n        return -1",
    "        var i = 1L\n        var t = 1L\n        while(t.toString.length < n) {\n            i += 1\n            t = (i * (i + 1)) / 2\n        }\n        return i",
    "        var i = 1L\n        var t = 0L\n        while(t.toString.length < n) {\n            t += i\n            i += 1\n        }\n        i - 1",
    "        var i = 1L\n        while (true) {\n            val t = (i * (i + 1)) / 2\n            if (t.toString.size >= n) return i\n            i += 1\n        }\n        return -1",
    "        var i = 1L\n        while (true) {\n            val t = (i * (i + 1)) / 2\n            if (t.toString.length == n) return i\n            i += 1\n        }\n        return -1",
    "        var i = 1L\n        var t = 1L\n        while (t.toString.length < n) {\n            i += 1\n            t += i\n        }\n        return i",
    "        var i = 1L\n        while(true) {\n            val t = i * (i + 1) / 2\n            if (t.toString.length == n) return i\n            i += 1\n        }\n        -1",
    "        var i = 1L\n        while(true) {\n            val t = (i * (i + 1)) / 2\n            if (t.toString.length == n) return i\n            i += 1\n        }\n        return -1",
    "        var i = 1L\n        var t = 1L\n        while (t.toString.length < n) {\n            i += 1\n            t += i\n        }\n        return i",
    "        var i = 1L\n        var t = 0L\n        while (t.toString.length < n) {\n            t += i\n            i += 1\n        }\n        i - 1",
    "        var i = 1L\n        while (true) {\n            val t = (i * (i + 1)) / 2\n            if (t.toString.length == n) return i\n            i += 1\n        }\n        return -1",
    "        var i = 1L\n        while(true) {\n            val t = (i * (i + 1)) / 2\n            if(t.toString.length == n) return i\n            i += 1\n        }\n        return -1",
    "        var i = 1L\n        while (true) {\n            val t = i * (i + 1) / 2\n            if (t.toString.length == n) return i\n            i += 1\n        }\n        return -1",
    "        var i = 1L\n        var sum = 0L\n        while (sum.toString.length < n) {\n            sum += i\n            i += 1\n        }\n        i - 1"
  ]
}