{
  "name": "mbpp_591_swap_List",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to interchange the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(swapList((List[Long](12l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 24l.toLong))).equals((List[Long](24l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 12l.toLong))));\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        return newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ++ middle ++ List(first)",
    "        val temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val newList = List(1, 2, 3, 8, 5, 6)\n        val newList2 = newList.last :: newList.init.tail :+ newList.head\n        newList2",
    "        val newList = List(1,2,3,4,5,6)\n        val newList1 = newList.head :: newList.reverse.tail.reverse\n        return newList1",
    "        val temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        return List(newList.last) ::: newList.slice(1, newList.length - 1) ::: List(newList.head)",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = temp2 :: newList3\n        val newList5 = newList4 :+ temp\n        return newList5"
  ]
}