{
  "name": "mbpp_720_add_dict_to_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        if (test_tup < 0) Left(test_tup)\n        else Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxl_5g2eh.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxl_5g2eh.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxl_5g2eh.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        var tup_dict = test_tup.toString.split(\"\").map(_.toInt).toList\n        var dict_list = test_dict.toList\n        var dict_list_int = dict_list.map(x => x._2.toInt)\n        var dict_list_int_sum = dict_list_int.sum\n        var tup_dict_sum = tup_dict.sum\n        var tup_dict_sum_dict_list_int_sum = tup_dict_sum + dict_list_int_sum\n        if (tup_dict_sum_dict_list_int_sum % 2 == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95sio671.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95sio671.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95sio671.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        if(test_tup > 0)\n            Left(test_tup)\n        else\n            Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ityh6mi.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ityh6mi.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ityh6mi.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup_dict = Map(test_tup.toString -> test_tup)\n        val new_dict = test_dict ++ tup_dict\n        if (new_dict.size == test_dict.size) {\n            Left(test_tup)\n        } else {\n            Right(new_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_n85hf5m.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_n85hf5m.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_n85hf5m.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(x => x.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            val test_tup_list_int_sum_str = test_tup_list_int_sum.toString\n            val test_tup_list_int_sum_str_list = test_tup_list_int_sum_str.split(\"\").toList\n            val test_tup_list_int_sum_str_list_int = test_tup_list_int_sum_str_list.map(x => x.toInt)\n            val test_tup_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int.sum\n            val test_tup_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum.toString\n            val test_tup_list_int_sum_str_list_int_sum_str_list = test_tup_list_int_sum_str_list_int_sum_str.split(\"\").toList\n            val test_tup_list_int_sum_str_list_int_sum_str_list_int = test_tup_list_int_sum_str_list_int_sum_str_list.map(x => x.toInt)\n            val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int_sum_str_list_int.sum\n            val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum_str_list_\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu8fde_vr.scala:27:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu8fde_vr.scala:18:78 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtest_tup_list_int_sum_str_list_int_sum_str_list_int_sum_str\u001b[0m = test_tup_list_int_sum_str_list_int_sum_str_list_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Not found: test_tup_list_int_sum_str_list_int_sum_str_list_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu8fde_vr.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu8fde_vr.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft61flrj.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft61flrj.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft61flrj.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(_.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmcq8h0mn.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmcq8h0mn.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmcq8h0mn.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        //Write your code here\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprk8n8sp4.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprk8n8sp4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprk8n8sp4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup_list = test_tup.toString.split(\"\").map(_.toInt).toList\n        val sum = tup_list.sum\n        if (sum > 10) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123723,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpghce0kaw.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpghce0kaw.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpghce0kaw.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add code here\n        var test_tup1 = test_tup\n        var test_dict1 = test_dict\n        Right(test_dict1)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzpv9wfc3.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzpv9wfc3.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzpv9wfc3.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft61flrj.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft61flrj.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft61flrj.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").map(_.toInt).toList\n        val test_tup_sum = test_tup_list.sum\n        if (test_tup_sum == 0) {\n            Left(test_tup)\n        } else {\n            val test_tup_sum_str = test_tup_sum.toString\n            val test_tup_sum_str_list = test_tup_sum_str.split(\"\").map(_.toInt).toList\n            val test_tup_sum_str_list_sum = test_tup_sum_str_list.sum\n            if (test_tup_sum_str_list_sum == 0) {\n                Left(test_tup)\n            } else {\n                val test_tup_sum_str_list_sum_str = test_tup_sum_str_list_sum.toString\n                val test_tup_sum_str_list_sum_str_list = test_tup_sum_str_list_sum_str.split(\"\").map(_.toInt).toList\n                val test_tup_sum_str_list_sum_str_list_sum = test_tup_sum_str_list_sum_str_list.sum\n                if (test_tup_sum_str_list_sum_str_list_sum == 0) {\n                    Left(test_tup)\n                } else {\n                    val test_tup_sum_str_list_sum_str_list_sum_str = test_tup_sum_str_list_sum_str_list_sum.toString\n                    val test_tup_sum_str_list_sum_str_list_sum_str_list = test_tup_sum_str_list_sum_str_list_sum_str.split(\"\").map(_.toInt).toList\n                    val test_tup_sum_str_list_sum_str_list_sum_str_list_sum = test_tup_sum_str_list_sum_str_list_sum_str_list.sum\n                    if (test_\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc0k15r4b.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc0k15r4b.scala:35:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc0k15r4b.scala:26:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                    \u001b[33mif\u001b[0m (test_\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: test_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0k15r4b.scala:29:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0k15r4b.scala:30:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.toList\n        val test_dict_list = test_dict.toList\n        val test_tup_dict = test_tup_list.zip(test_dict_list).toMap\n        val test_tup_dict_list = test_tup_dict.toList\n        val test_tup_dict_list_sorted = test_tup_dict_list.sortBy(_._1)\n        val test_tup_dict_list_sorted_map = test_tup_dict_list_sorted.toMap\n        val test_tup_dict_list_sorted_map_list = test_tup_dict_list_sorted_map.toList\n        val test_tup_dict_list_sorted_map_list_sorted = test_tup_dict_list_sorted_map_list.sortBy(_._2)\n        val test_tup_dict_list_sorted_map_list_sorted_map = test_tup_dict_list_sorted_map_list_sorted.toMap\n        val test_tup_dict_list_sorted_map_list_sorted_map_list = test_tup_dict_list_sorted_map_list_sorted_map.toList\n        val test_tup_dict_list_sorted_map_list_sorted_map_list_sorted = test_tup_dict_list_sorted_map_list_sorted_map_list.sortBy(_._1)\n        val test_tup_dict_list_sorted_map_list_sorted_map_list_sorted_map = test_tup_dict_list_sorted_map_list_sorted_map_list_sorted.toMap\n        val test_tup_dict_list_sorted_map_list_sorted_map_list_sorted_map_list = test_tup_dict_list_sorted_map_list_sorted_map_list_sorted_map.toList\n        val test_tup_dict_list_sorted_\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvikqdy3k.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvikqdy3k.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Either[Long, collection.mutable.Map[String, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvikqdy3k.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvikqdy3k.scala:23:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            return Right(test_dict)\n        }\n        else {\n            return Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpusybtcki.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpusybtcki.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpusybtcki.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnrk_xf8.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnrk_xf8.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnrk_xf8.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptjmnk1j5.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptjmnk1j5.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptjmnk1j5.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123723,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvu9e1tn.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvu9e1tn.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvu9e1tn.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi90e3p88.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi90e3p88.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi90e3p88.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptjmnk1j5.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptjmnk1j5.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptjmnk1j5.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        if(test_tup > 0)\n            Left(test_tup)\n        else\n            Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ityh6mi.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ityh6mi.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ityh6mi.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tuple = (test_tup, test_dict)\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8hbx6s4u.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8hbx6s4u.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8hbx6s4u.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu42cvdc.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu42cvdc.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu42cvdc.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_new = (test_tup, test_dict)\n        Right(test_tup_new)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr5rbptmu.scala:7:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        Right(test_tup_new)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m   Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mtest\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mtup\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mnew\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m   Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr5rbptmu.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr5rbptmu.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) Left(test_tup)\n        else Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3btwv4n9.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3btwv4n9.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3btwv4n9.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptjmnk1j5.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptjmnk1j5.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptjmnk1j5.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        if (test_tup == 0) {\n            return Right(test_dict)\n        }\n        else {\n            return Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3qx_gz44.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3qx_gz44.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3qx_gz44.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val new_dict = test_dict + (\"test\" -> test_tup)\n        Right(new_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7m7t_3w.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7m7t_3w.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7m7t_3w.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdag_oe3.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdag_oe3.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdag_oe3.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzd886idk.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzd886idk.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzd886idk.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_new = (test_tup, test_dict)\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyu8524j6.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyu8524j6.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyu8524j6.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 1) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpateyajzn.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpateyajzn.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpateyajzn.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_uv02gc.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_uv02gc.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_uv02gc.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        return Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3kuu_f5u.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3kuu_f5u.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3kuu_f5u.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val result = (test_tup, test_dict)\n        Right(result)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3gqr_lis.scala:8:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        Right(result)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m         Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mresult\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m         Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3gqr_lis.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3gqr_lis.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup_dict = test_tup -> test_dict\n        Right(tup_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36xgwji6.scala:7:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        Right(tup_dict)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m       Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mtup\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mdict\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m       Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36xgwji6.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36xgwji6.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(_.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9ejx12h.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9ejx12h.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9ejx12h.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9n48xkb.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9n48xkb.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9n48xkb.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.toList\n        val test_dict_list = test_dict.toList\n        val test_tup_list_len = test_tup_list.length\n        val test_dict_list_len = test_dict_list.length\n        var test_dict_list_len_index = test_dict_list_len - 1\n        var test_tup_list_len_index = test_tup_list_len - 1\n        var test_tup_list_len_index_2 = test_tup_list_len - 2\n        var test_tup_list_len_index_3 = test_tup_list_len - 3\n        var test_tup_list_len_index_4 = test_tup_list_len - 4\n        var test_tup_list_len_index_5 = test_tup_list_len - 5\n        var test_tup_list_len_index_6 = test_tup_list_len - 6\n        var test_tup_list_len_index_7 = test_tup_list_len - 7\n        var test_tup_list_len_index_8 = test_tup_list_len - 8\n        var test_tup_list_len_index_9 = test_tup_list_len - 9\n        var test_tup_list_len_index_10 = test_tup_list_len - 10\n        var test_tup_list_len_index_11 = test_tup_list_len - 11\n        var test_tup_list_len_index_12 = test_tup_list_len - 12\n        var test_tup_list_len_index_13 = test_tup_list_len - 13\n        var test_tup_list_len_index_14 = test_tup_list_len - 14\n        var test_tup_list_len_index_15 = test_tup_list_len - 15\n        var test_tup_list_len_index_16 = test_tup_list_len - 16\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp0mu7y3tt.scala:27:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0mu7y3tt.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Either[Long, collection.mutable.Map[String, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0mu7y3tt.scala:30:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0mu7y3tt.scala:31:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123723,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvu9e1tn.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvu9e1tn.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvu9e1tn.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxn4exkya.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnrk_xf8.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnrk_xf8.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnrk_xf8.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        }\n        else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph68i0y5y.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph68i0y5y.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph68i0y5y.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4avs8hcq.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4avs8hcq.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4avs8hcq.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(_.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        val test_tup_list_int_sum_str = test_tup_list_int_sum.toString\n        val test_tup_list_int_sum_str_list = test_tup_list_int_sum_str.split(\"\").toList\n        val test_tup_list_int_sum_str_list_int = test_tup_list_int_sum_str_list.map(_.toInt)\n        val test_tup_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int.sum\n        val test_tup_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum.toString\n        val test_tup_list_int_sum_str_list_int_sum_str_list = test_tup_list_int_sum_str_list_int_sum_str.split(\"\").toList\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int = test_tup_list_int_sum_str_list_int_sum_str_list.map(_.toInt)\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int_sum_str_list_int.sum\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum_str_list_int_sum.toString\n        val test_tup_list_int_sum_str_list_int_sum_str\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbbab4y0b.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbbab4y0b.scala:19:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Either[Long, collection.mutable.Map[String, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbbab4y0b.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbbab4y0b.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu42cvdc.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu42cvdc.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu42cvdc.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_uv02gc.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_uv02gc.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_uv02gc.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(_.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        val test_tup_list_int_sum_str = test_tup_list_int_sum.toString\n        val test_tup_list_int_sum_str_list = test_tup_list_int_sum_str.split(\"\").toList\n        val test_tup_list_int_sum_str_list_int = test_tup_list_int_sum_str_list.map(_.toInt)\n        val test_tup_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int.sum\n        val test_tup_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum.toString\n        val test_tup_list_int_sum_str_list_int_sum_str_list = test_tup_list_int_sum_str_list_int_sum_str.split(\"\").toList\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int = test_tup_list_int_sum_str_list_int_sum_str_list.map(_.toInt)\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int_sum_str_list_int.sum\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum_str_list_int_sum.toString\n        val test_tup_list_int_sum_str_list_int_sum_str\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbbab4y0b.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbbab4y0b.scala:19:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Either[Long, collection.mutable.Map[String, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbbab4y0b.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbbab4y0b.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpznkasizl.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7fag8r6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(x => x.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptugzm_uq.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptugzm_uq.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptugzm_uq.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgwu0vj1u.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgwu0vj1u.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgwu0vj1u.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2e_tcokc.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2e_tcokc.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2e_tcokc.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4exk06d.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup_dict = test_tup -> test_dict\n        Right(tup_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36xgwji6.scala:7:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        Right(tup_dict)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m       Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mtup\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mdict\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m       Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36xgwji6.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36xgwji6.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4_cmej91.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k91rkt.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup_dict = test_tup -> test_dict\n        Right(tup_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36xgwji6.scala:7:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        Right(tup_dict)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m       Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mtup\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mdict\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m       Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36xgwji6.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36xgwji6.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkyp2uf.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdf73n41.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lvvyabk.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(_.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9ejx12h.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9ejx12h.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9ejx12h.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg88h8q4_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk6dgndo.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}