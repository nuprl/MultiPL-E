{
  "name": "mbpp_424_extract_rear",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = ListBuffer[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) {\n                result += test_tuple(i).toString\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7z4_87m2.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7z4_87m2.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result_list = ListBuffer[String]()\n        for (i <- 0 until test_list.length) {\n            result_list += test_list(i).reverse.head.toString\n        }\n        result_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp_1zg3sl_.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp_1zg3sl_.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.takeRight(1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510447,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4fl9c10e.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4fl9c10e.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpubl0zdfr.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpubl0zdfr.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) result = test_tuple(i).toString :: result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmprxah5xyk.scala:13:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmprxah5xyk.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1, x.length))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpbrf2rg_j.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpbrf2rg_j.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val test_list_rear = test_list.map(x => x.reverse)\n        return test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuh8zi434.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuh8zi434.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = for (i <- 0 until test_list.length) yield test_list(i).reverse.head\n        rear_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvh68lhms.scala:8:18 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        rear_list.toList\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    List[\u001b[1m\u001b[31mChar\u001b[0m]\n\u001b[31m  |\u001b[0m        Required: List[\u001b[1m\u001b[32mString\u001b[0m]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvh68lhms.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvh68lhms.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i).charAt(test_list(i).length - 1).toString\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpavo8p7w3.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpavo8p7w3.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i)(test_list(i).length - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ddwbt6y.scala:8:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        result.toList\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    List[\u001b[1m\u001b[31mChar\u001b[0m]\n\u001b[31m  |\u001b[0m        Required: List[\u001b[1m\u001b[32mString\u001b[0m]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6ddwbt6y.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6ddwbt6y.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Aveng",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwnszdook.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwnszdook.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        test_tuple.split(\" \").toList.map(x => x.charAt(x.length - 1).toString)\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpri0bkpc5.scala:9:24 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpri0bkpc5.scala:10:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuil",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = ListBuffer[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i % 2 == 1) {\n                result += test_tuple(i).toString\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpk2vpq3zk.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpk2vpq3zk.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5a6732no.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5a6732no.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = ListBuffer[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i % 2 == 1) {\n                result.append(test_tuple(i).toString)\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpmytxab45.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpmytxab45.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length-1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp86p9bxnt.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp86p9bxnt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x(x.length - 1))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnbzxsipb.scala:8:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        rear_list\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (rear_list : List[Char])\n\u001b[31m  |\u001b[0m        Required: List[String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnbzxsipb.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnbzxsipb.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val test_list_rear = test_list.map(x => x.split(\" \").toList.last)\n        test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpd21z5qaq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpd21z5qaq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i % 2 == 1) {\n                result = result :+ test_tuple(i).toString\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp0id639jl.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp0id639jl.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8zcju12y.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8zcju12y.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.takeRight(1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510447,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4fl9c10e.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4fl9c10e.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        test_tuple.split(\" \").toList.map(x => x.substring(x.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzqjn3axn.scala:9:24 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzqjn3axn.scala:10:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuil",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = ListBuffer[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) {\n                result += test_tuple(i).toString\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7z4_87m2.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7z4_87m2.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 to test_tuple.length - 1) {\n            if (i % 2 == 1) {\n                result = result :+ test_tuple(i).toString\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpf4evp2hw.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpf4evp2hw.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8zcju12y.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8zcju12y.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = ListBuffer[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) {\n                result += test_tuple(i).toString\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7z4_87m2.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7z4_87m2.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val list = test_tuple.split(\",\").toList\n        val result = list.map(x => x.substring(x.length - 1))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5a67zyml.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5a67zyml.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.last.toString)\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpdtamela7.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpdtamela7.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.reverse)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvhafbapm.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvhafbapm.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.reverse.head.toString)\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpy8em7j4n.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpy8em7j4n.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.split(\" \").last)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpleuspcn9.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpleuspcn9.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = for (i <- 0 until test_list.length) yield test_list(i).charAt(test_list(i).length - 1).toString\n        rear_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpp94yvj8x.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpp94yvj8x.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val test_list_rear = test_list.map(x => x.substring(x.length - 1))\n        return test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpv5wh2xg7.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpv5wh2xg7.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result_list = for (i <- test_list) yield i.reverse.head.toString\n        result_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp98hg5s8t.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp98hg5s8t.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = for (i <- test_list) yield i.substring(i.length - 1)\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4aax7r07.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4aax7r07.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val test_list_length = test_list.length\n        val test_list_rear = test_list.takeRight(test_list_length - 1)\n        test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7statkd6.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7statkd6.scala:13:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuech4306.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuech4306.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i).reverse(0).toString\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp008chx3g.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp008chx3g.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val list = test_tuple.split(\",\").toList\n        val result = list.map(x => x.substring(x.length - 1))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5a67zyml.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5a67zyml.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = test_tuple.split(\" \").toList.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp031yyrrt.scala:10:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp031yyrrt.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.reverse.head.toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpjov2si1i.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpjov2si1i.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.reverse)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvhafbapm.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvhafbapm.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        test_list.map(x => x.charAt(x.length - 1).toString)\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpozvjz8pn.scala:10:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpozvjz8pn.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = for (i <- test_list) yield i.reverse.head.toString\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpegywsj9_.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpegywsj9_.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.split(\" \").last)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpleuspcn9.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpleuspcn9.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) result = test_tuple(i).toString :: result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmprxah5xyk.scala:13:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmprxah5xyk.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (test_tuple(i) == ',') {\n                result = result :+ test_tuple.substring(i + 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpfmb52fmh.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpfmb52fmh.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1, x.length))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxdhbsok5.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxdhbsok5.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = for (i <- test_list) yield i.reverse.head\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123661,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgz2n6aj.scala:8:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        rear_list\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (rear_list : List[Char])\n\u001b[31m  |\u001b[0m        Required: List[String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpdgz2n6aj.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpdgz2n6aj.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.takeRight(1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpbfbgiic7.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpbfbgiic7.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val test_list_rear = test_list.map(x => x.charAt(x.length-1).toString)\n        return test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnhjppfq3.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnhjppfq3.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val test_list_rear = test_list.map(x => x.substring(x.length - 1))\n        return test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpv5wh2xg7.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpv5wh2xg7.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuech4306.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuech4306.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i)(test_list(i).length - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123661,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwv_3jlu8.scala:8:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        result.toList\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    List[\u001b[1m\u001b[31mChar\u001b[0m]\n\u001b[31m  |\u001b[0m        Required: List[\u001b[1m\u001b[32mString\u001b[0m]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwv_3jlu8.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwv_3jlu8.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Aveng",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.takeRight(1))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnd52muv1.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnd52muv1.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1, x.length))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxdhbsok5.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxdhbsok5.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = for (i <- test_list) yield i.charAt(i.length - 1).toString\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp2_oydgae.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp2_oydgae.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i)(test_list(i).length - 1).toString\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp_lawhont.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp_lawhont.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = for (i <- 0 until test_list.length) yield test_list(i).split(\" \").last\n        rear_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxsroya6y.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxsroya6y.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i).split(\" \").last\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpaopevvwr.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpaopevvwr.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.last.toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpmtqqoimk.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpmtqqoimk.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8zcju12y.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8zcju12y.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = ListBuffer[String]()\n        for (i <- 0 until test_list.length) {\n            rear_list += test_list(i).reverse.head.toString\n        }\n        rear_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcl84fsdj.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcl84fsdj.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8zcju12y.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8zcju12y.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnx7x99ol.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnx7x99ol.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6xl63fh_.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6xl63fh_.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val test_list_rear = test_list.map(x => x.substring(x.length - 1))\n        test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpgx218lkh.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpgx218lkh.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i).last.toString\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzfn7apop.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzfn7apop.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val list = test_tuple.split(\" \").toList\n        list.map(x => x(x.length - 1).toString)\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpk4kq6k4v.scala:10:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpk4kq6k4v.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwnszdook.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwnszdook.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result_list = test_list.map(x => x.substring(x.length - 1, x.length))\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4d4qrsjc.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4d4qrsjc.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) result = test_tuple(i).toString :: result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmprxah5xyk.scala:13:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmprxah5xyk.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp9kgvsab4.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp9kgvsab4.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpy20r3a0t.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpy20r3a0t.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.takeRight(1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510447,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4fl9c10e.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4fl9c10e.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuech4306.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuech4306.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.split(\" \").last)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpleuspcn9.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpleuspcn9.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.reverse.head.toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpjov2si1i.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpjov2si1i.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = for (i <- test_list) yield i.reverse.head.toString\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplowzwq_0.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplowzwq_0.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.slice(x.length - 1, x.length))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5gnwpsoe.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5gnwpsoe.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val list = test_tuple.split(\" \").toList\n        list.map(x => x.substring(x.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpbbz54kkk.scala:10:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpbbz54kkk.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = for (i <- test_list) yield i.last.toString\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpf2q9pouk.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpf2q9pouk.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i).substring(test_list(i).length - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp71on_eoa.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp71on_eoa.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6xl63fh_.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6xl63fh_.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val test_list_rear = test_list.map(x => x.substring(x.length - 1))\n        return test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpv5wh2xg7.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpv5wh2xg7.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpx5kpky_p.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpx5kpky_p.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpy20r3a0t.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpy20r3a0t.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until test_tuple.length) {\n            if (i % 2 == 1) {\n                result += test_tuple(i).toString\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp0cl0a9ea.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp0cl0a9ea.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val test_list_rear = test_list.map(x => x.reverse)\n        test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpbqix7c3k.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpbqix7c3k.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = for (i <- 0 until test_list.length) yield test_list(i).reverse\n        return rear_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpugtt8tyg.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpugtt8tyg.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i).reverse.head\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5od8r_41.scala:8:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        result.toList\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    List[\u001b[1m\u001b[31mChar\u001b[0m]\n\u001b[31m  |\u001b[0m        Required: List[\u001b[1m\u001b[32mString\u001b[0m]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5od8r_41.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5od8r_41.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Aveng",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val test_list_rear = test_list.map(x => x.charAt(x.length - 1))\n        val test_list_rear_string = test_list_rear.map(x => x.toString)\n        test_list_rear_string\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpmtsogyg9.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpmtsogyg9.scala:13:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result_list = ListBuffer[String]()\n        for (i <- 0 until test_list.length) {\n            result_list += test_list(i).substring(test_list(i).length - 1)\n        }\n        result_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8i2gn4e2.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8i2gn4e2.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i)(test_list(i).length - 1).toString\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp_lawhont.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp_lawhont.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val test_list_rear = test_list.map(x => x.substring(x.length - 1))\n        return test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpsc38bw5v.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpsc38bw5v.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result_list = ListBuffer[String]()\n        for (i <- 0 until test_list.length) {\n            val temp_list = test_list(i).split(\" \").toList\n            result_list += temp_list(temp_list.length - 1)\n        }\n        result_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpbcgksueq.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpbcgksueq.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 to test_tuple.length - 1) {\n            if (i == test_tuple.length - 1) {\n                result = result :+ test_tuple(i).toString\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpfi82o727.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpfi82o727.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val test_list_rear = test_list.map(x => x.substring(x.length - 1))\n        test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6a03u1yx.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6a03u1yx.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until test_tuple.length) {\n            if (i % 2 == 1) {\n                result += test_tuple(i).toString\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp0cl0a9ea.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp0cl0a9ea.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwnszdook.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwnszdook.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        test_list.map(x => x.substring(x.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4y6r0pvz.scala:10:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4y6r0pvz.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = ListBuffer[String]()\n        for (i <- 0 until test_list.length) {\n            rear_list += test_list(i).reverse.head.toString\n        }\n        rear_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcl84fsdj.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcl84fsdj.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.reverse)\n        val rear_index = rear_list.map(x => x.indexOf(\" \"))\n        val rear_index_list = rear_index.map(x => x + 1)\n        val rear_index_element = rear_index_list.map(x => rear_list.map(y => y.charAt(x)))\n        rear_index_element.map(x => x.mkString)\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpj3ab65it.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpj3ab65it.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.split(\" \").last)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp74hr_yp_.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp74hr_yp_.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val test_list_length = test_list.length\n        val test_list_rear = test_list.map(x => x(x.length - 1))\n        test_list_rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo37zojj5.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_list_rear\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_list_rear : List[Char])\n\u001b[31m  |\u001b[0m        Required: List[String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpo37zojj5.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpo37zojj5.scala:13:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.reverse.head.toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp1avotb84.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp1avotb84.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7q7ojk5f.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = for (i <- 0 until test_list.length) yield test_list(i).charAt(test_list(i).length - 1).toString\n        rear_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpp94yvj8x.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpp94yvj8x.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until test_tuple.length) {\n            if (i % 2 == 1) result += test_tuple(i).toString\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp_gbu4p14.scala:13:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp_gbu4p14.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.reverse.head.toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplurqh7qy.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplurqh7qy.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.reverse.head.toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpjov2si1i.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpjov2si1i.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) {\n                result = result :+ test_tuple(i).toString\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm8dzkttd.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm8dzkttd.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8zcju12y.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8zcju12y.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = ListBuffer[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i % 2 == 0) {\n                result += test_tuple(i).toString\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp440toe2i.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp440toe2i.scala:16:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val list = test_tuple.split(\",\").toList\n        val rear_list = list.map(x => x.substring(x.length - 1))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplc5weuwk.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplc5weuwk.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1, x.length))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxdhbsok5.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxdhbsok5.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = for (i <- test_list) yield i.charAt(i.length - 1).toString\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp2_oydgae.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp2_oydgae.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.split(\" \").last)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp74hr_yp_.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp74hr_yp_.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.last.toString)\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpdtamela7.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpdtamela7.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1, x.length))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp0rnj55lq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp0rnj55lq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) result = test_tuple.charAt(i).toString :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpup6imh6o.scala:13:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpup6imh6o.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        test_tuple.split(\" \").toList.map(x => x.substring(x.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzqjn3axn.scala:9:24 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzqjn3axn.scala:10:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuil",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5a6732no.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5a6732no.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.reverse.head.toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp91hwrukh.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp91hwrukh.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = ListBuffer[String]()\n        for (i <- test_tuple.split(\" \")) {\n            result += i.substring(i.length - 1)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123645,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpk1nzdh0w.scala:13:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpk1nzdh0w.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val result = test_tuple.split(\" \").toList.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp031yyrrt.scala:10:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp031yyrrt.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuech4306.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuech4306.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4jsnxvyp.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4jsnxvyp.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.slice(x.length - 1, x.length))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5gnwpsoe.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5gnwpsoe.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.charAt(x.length-1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpn5uu0kre.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpn5uu0kre.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.slice(x.length - 1, x.length))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp2jmyhyo8.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp2jmyhyo8.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val list = test_tuple.split(\" \").toList\n        val result = list.map(x => x.reverse)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpispn9ftc.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpispn9ftc.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.reverse.head.toString)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmphc0_kjeu.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmphc0_kjeu.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6xl63fh_.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6xl63fh_.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.reverse.head.toString)\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8enh0qh9.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8enh0qh9.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i).charAt(test_list(i).length - 1).toString\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpmsye2z3g.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpmsye2z3g.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        var result : List[String] = List()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) result = test_tuple(i).toString :: result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpsd0fs9el.scala:13:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpsd0fs9el.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.reverse)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvhafbapm.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvhafbapm.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpapj_r1r3.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpi23kmf90.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.reverse)\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvhafbapm.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvhafbapm.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = for (i <- test_list) yield i.reverse.head.toString\n        rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123671,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpp_v815s_.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpp_v815s_.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_array = test_tuple.split(\",\")\n        val result = new ListBuffer[String]\n        for (i <- 0 until test_array.length) {\n            result += test_array(i).substring(test_array(i).length - 1)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123671,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpa0mcxg3f.scala:14:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpa0mcxg3f.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val list = test_tuple.split(\" \").toList\n        val rear = list.map(x => x(x.length - 1))\n        rear\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123671,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp65xxouva.scala:8:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        rear\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (rear : List[Char])\n\u001b[31m  |\u001b[0m        Required: List[String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp65xxouva.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp65xxouva.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Peopl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\",\").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i).substring(test_list(i).length - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1666123671,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzdlrixfv.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzdlrixfv.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpubl0zdfr.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpubl0zdfr.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkrm8kiiq.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Mers\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"Vers\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"s\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"s\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpkncij8ez.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractRear((String((\u001b[31m\"Avenge\"\u001b[0m, \u001b[31m\"for\"\u001b[0m, \u001b[31m\"People\"\u001b[0m)))).equals((List[\u001b[35mString\u001b[0m](\u001b[31m\"e\"\u001b[0m, \u001b[31m\"r\"\u001b[0m, \u001b[31m\"e\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}