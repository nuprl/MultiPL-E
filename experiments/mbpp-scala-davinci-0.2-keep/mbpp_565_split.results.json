{
  "name": "mbpp_565_split",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (c <- word) {\n            result = result :+ c.toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = Nil\n        for (i <- 0 until word.length) result = word(i).toString :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list : List[String] = List()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word.substring(i, i + 1)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val list = new ListBuffer[String]\n        for (c <- word) {\n            list += c.toString\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = List()\n        for (c <- word) {\n            result = result :+ c.toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) result = result :+ word.substring(i, i + 1)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = word(i).toString :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2m_4c2xr.scala:13)\n\tat Problem.main(tmp2m_4c2xr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = word(i).toString :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2m_4c2xr.scala:13)\n\tat Problem.main(tmp2m_4c2xr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var lst = List[String]()\n        for (i <- 0 until word.length) {\n            lst = lst :+ word(i).toString\n        }\n        return lst\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word(i).toString\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) result = result :+ word.substring(i, i + 1)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word(i).toString\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]()\n        for (i <- 0 until word.length) {\n            result += word.substring(i, i + 1)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]()\n        for (i <- 0 until word.length) {\n            result += word(i).toString\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val list = new ListBuffer[String]\n        for (i <- 0 until word.length) list += word.substring(i, i + 1)\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) result += word.substring(i, i + 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = Nil\n        for (i <- 0 to word.length() - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = word(i).toString :: list\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzdkyxskc.scala:13)\n\tat Problem.main(tmpzdkyxskc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = Nil\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word(i).toString\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list : List[String] = List()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list : List[String] = List()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word(i).toString\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = word(i).toString :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 to word.length - 1) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122766,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = Nil\n        for (c <- word) {\n            result = c.toString :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122766,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (c <- word) {\n            result = result :+ c.toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word.substring(i, i + 1)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list : List[String] = Nil\n        for (i <- 0 until word.length) {\n            list = list :+ word(i).toString\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122766,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (c <- word) result = c.toString :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122766,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word(i).toString\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word(i).toString\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.split(\"\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122766,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word.substring(i, i + 1)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        val list = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            list += word.substring(i, i + 1)\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122766,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (c <- word) {\n            result = c.toString :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122766,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0890nh7d.scala:13)\n\tat Problem.main(tmp0890nh7d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        word.toList.map(x => x.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to split a string into characters.\n    def split(word : String) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
      "timestamp": 1665510063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}