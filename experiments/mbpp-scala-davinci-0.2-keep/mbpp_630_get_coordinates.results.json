{
  "name": "mbpp_630_get_coordinates",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510721,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq3e2nt28.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq3e2nt28.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var x = test_tup / 100\n        var y = test_tup % 100\n        var result = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgydqyj_l.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgydqyj_l.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100000\n        val y = test_tup % 100000\n        List(List(x, y + 1), List(x, y - 1), List(x + 1, y), List(x - 1, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_lzlsqz.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_lzlsqz.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var x = 0L\n        var y = 0L\n        var list = List[List[Long]]()\n        while (tup > 0) {\n            x += tup % 10\n            tup /= 10\n            y += tup % 10\n            tup /= 10\n        }\n        for (i <- -1 to 1) {\n            for (j <- -1 to 1) {\n                if (i != 0 || j != 0) {\n                    list = List(List(x + i, y + j)) ::: list\n                }\n            }\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpif4u1lz8.scala:26:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpif4u1lz8.scala:27:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var coordinates = List[List[Long]]()\n        for (i <- -1 to 1) {\n            for (j <- -1 to 1) {\n                if (i != 0 || j != 0) {\n                    coordinates = List(List(test_tup._1 + i, test_tup._2 + j)) ::: coordinates\n                }\n            }\n        }\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvjkpf3z.scala:10:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    coordinates = List(List(test_tup._1 + i, test_tup._2 + j)) ::: coordinates\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvjkpf3z.scala:10:70 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    coordinates = List(List(test_tup._1 + i, test_tup._2 + j)) ::: coordinates\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuvjkpf3z.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuvjkpf3z.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val coords = List(List(x-1, y-1), List(x, y-1), List(x+1, y-1), List(x-1, y), List(x+1, y), List(x-1, y+1), List(x, y+1), List(x+1, y+1))\n        return coords\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeczsr7as.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeczsr7as.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = List(test_tup)\n        val test_tup_list_list = List(test_tup_list)\n        val test_tup_list_list_list = List(test_tup_list_list)\n        val test_tup_list_list_list_list = List(test_tup_list_list_list)\n        val test_tup_list_list_list_list_list = List(test_tup_list_list_list_list)\n        val test_tup_list_list_list_list_list_list = List(test_tup_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6e_fumqd.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e_fumqd.scala:19:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e_fumqd.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e_fumqd.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val up = (x - 1) * 100 + y\n        val down = (x + 1) * 100 + y\n        val left = x * 100 + (y - 1)\n        val right = x * 100 + (y + 1)\n        val up_left = (x - 1) * 100 + (y - 1)\n        val up_right = (x - 1) * 100 + (y + 1)\n        val down_left = (x + 1) * 100 + (y - 1)\n        val down_right = (x + 1) * 100 + (y + 1)\n        List(List(up, down, left, right, up_left, up_right, down_left, down_right))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15oly3r6.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15oly3r6.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5bxm08wv.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5bxm08wv.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val adj = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        return adj\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpos7njhr5.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpos7njhr5.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwnnfryf.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwnnfryf.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_len = test_tup_list.length\n        val test_tup_list_len_minus_1 = test_tup_list_len - 1\n        val test_tup_list_len_minus_2 = test_tup_list_len - 2\n        val test_tup_list_len_minus_3 = test_tup_list_len - 3\n        val test_tup_list_len_minus_4 = test_tup_list_len - 4\n        val test_tup_list_len_minus_5 = test_tup_list_len - 5\n        val test_tup_list_len_minus_6 = test_tup_list_len - 6\n        val test_tup_list_len_minus_7 = test_tup_list_len - 7\n        val test_tup_list_len_minus_8 = test_tup_list_len - 8\n        val test_tup_list_len_minus_9 = test_tup_list_len - 9\n        val test_tup_list_len_minus_10 = test_tup_list_len - 10\n        val test_tup_list_len_minus_11 = test_tup_list_len - 11\n        val test_tup_list_len_minus_12 = test_tup_list_len - 12\n        val test_tup_list_len_minus_13 = test_tup_list_len - 13\n        val test_tup_list_len_minus_14 = test_tup_list_len - 14\n        val test_tup_list_len_minus_15 = test_tup_list_len - 15\n        val test_tup_list_len_minus_16 = test_tup_list_len - 16\n        val test_tup_list_len_minus_17 = test_tup_list_len - 17\n        val test_tup_list_len_minus_18 = test_t\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510721,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp06teppvq.scala:25:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_tup_list_len_minus_18\u001b[0m = test_t\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: test_t\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp06teppvq.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp06teppvq.scala:28:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp06teppvq.scala:29:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coordinates = List(List(x - 1, y), List(x + 1, y), List(x, y - 1), List(x, y + 1))\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510718,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvlnern0k.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvlnern0k.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup._1\n        val y = test_tup._2\n        List(List(x-1, y-1), List(x, y-1), List(x+1, y-1), List(x-1, y), List(x+1, y), List(x-1, y+1), List(x, y+1), List(x+1, y+1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp4c4yvba.scala:6:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = test_tup._1\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp4c4yvba.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = test_tup._2\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp4c4yvba.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp4c4yvba.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dp1wgd9.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dp1wgd9.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwnnfryf.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwnnfryf.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_h1gbb0v.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_h1gbb0v.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup._1\n        val y = test_tup._2\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = List(x_list, y_list)\n        val x_y_list_perm = x_y_list.permutations.toList\n        val x_y_list_perm_comb = x_y_list_perm.map(x => x.head.zip(x.last))\n        val x_y_list_perm_comb_filter = x_y_list_perm_comb.filter(x => x.head != x.last)\n        val x_y_list_perm_comb_filter_filter = x_y_list_perm_comb_filter.filter(x => x.head != x.last)\n        x_y_list_perm_comb_filter_filter\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp89z9kxg0.scala:6:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = test_tup._1\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp89z9kxg0.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = test_tup._2\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89z9kxg0.scala:15:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        x_y_list_perm_comb_filter_filter\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    (x_y_list_perm_comb_filter_filter : List[List[(Nothing, Nothing)]])\n\u001b[31m   |\u001b[0mRequired: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89z9kxg0.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89z9kxg",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x.head >= 0 && x.last >= 0).filter(x => x.head < 100 && x.last < 100).filter(x => x.head != x.last).filter(x => x.head != x.last)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0zj9bmce.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0zj9bmce.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coords = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        return coords\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqv_mq03c.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqv_mq03c.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coordinates = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ywq92im.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ywq92im.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val coords = List(List(x-1, y-1), List(x, y-1), List(x+1, y-1), List(x-1, y), List(x+1, y), List(x-1, y+1), List(x, y+1), List(x+1, y+1))\n        return coords\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeczsr7as.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeczsr7as.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coordinates = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_wq3ewwg.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_wq3ewwg.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6du8uzco.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6du8uzco.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58f840ik.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58f840ik.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coords = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        coords\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprx1c16qx.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprx1c16qx.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58f840ik.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58f840ik.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14isq1k1.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14isq1k1.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var test_list : List[List[Long]] = List()\n        var test_tup_list : List[Long] = List()\n        test_tup_list = test_tup_list :+ test_tup\n        test_list = test_list :+ test_tup_list\n        var test_tup_list1 : List[Long] = List()\n        test_tup_list1 = test_tup_list1 :+ (test_tup - 1)\n        test_list = test_list :+ test_tup_list1\n        var test_tup_list2 : List[Long] = List()\n        test_tup_list2 = test_tup_list2 :+ (test_tup + 1)\n        test_list = test_list :+ test_tup_list2\n        var test_tup_list3 : List[Long] = List()\n        test_tup_list3 = test_tup_list3 :+ (test_tup - sqrt(test_tup).toLong)\n        test_list = test_list :+ test_tup_list3\n        var test_tup_list4 : List[Long] = List()\n        test_tup_list4 = test_tup_list4 :+ (test_tup + sqrt(test_tup).toLong)\n        test_list = test_list :+ test_tup_list4\n        return test_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqyeokkln.scala:25:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqyeokkln.scala:26:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_coord = List(x - 1, x, x + 1)\n        val y_coord = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_coord; j <- y_coord) yield List(i, j)\n        coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujm0flfw.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujm0flfw.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_adj = List(List(test_tup))\n        val test_list_adj_2 = List(List(test_tup))\n        val test_list_adj_3 = List(List(test_tup))\n        val test_list_adj_4 = List(List(test_tup))\n        val test_list_adj_5 = List(List(test_tup))\n        val test_list_adj_6 = List(List(test_tup))\n        val test_list_adj_7 = List(List(test_tup))\n        val test_list_adj_8 = List(List(test_tup))\n        val test_list_adj_9 = List(List(test_tup))\n        val test_list_adj_10 = List(List(test_tup))\n        val test_list_adj_11 = List(List(test_tup))\n        val test_list_adj_12 = List(List(test_tup))\n        val test_list_adj_13 = List(List(test_tup))\n        val test_list_adj_14 = List(List(test_tup))\n        val test_list_adj_15 = List(List(test_tup))\n        val test_list_adj_16 = List(List(test_tup))\n        val test_list_adj_17 = List(List(test_tup))\n        val test_list_adj_18 = List(List(test_tup))\n        val test_list_adj_19 = List(List(test_tup))\n        val test_list_adj_20 = List(List(test_tup))\n        val test_list_adj_21 = List(List(test_tup))\n        val test_list_adj_22 = List(List(test_tup))\n        val test_list_adj_23 = List(List(test_tup))\n        val test_list_adj_24 = List(List(test_tup))\n        val test_list_adj_25 = List(List(test_tup))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124209,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6yvxjow.scala:32:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6yvxjow.scala:34:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6yvxjow.scala:35:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_len = test_tup_list.length\n        val test_tup_list_len_half = test_tup_list_len / 2\n        val test_tup_list_len_half_floor = floor(test_tup_list_len_half).toInt\n        val test_tup_list_len_half_ceil = ceil(test_tup_list_len_half).toInt\n        val test_tup_list_len_half_floor_list = test_tup_list.slice(0, test_tup_list_len_half_floor)\n        val test_tup_list_len_half_ceil_list = test_tup_list.slice(test_tup_list_len_half_floor, test_tup_list_len)\n        val test_tup_list_len_half_floor_list_len = test_tup_list_len_half_floor_list.length\n        val test_tup_list_len_half_ceil_list_len = test_tup_list_len_half_ceil_list.length\n        val test_tup_list_len_half_floor_list_len_half = test_tup_list_len_half_floor_list_len / 2\n        val test_tup_list_len_half_ceil_list_len_half = test_tup_list_len_half_ceil_list_len / 2\n        val test_tup_list_len_half_floor_list_len_half_floor = floor(test_tup_list_len_half_floor_list_len_half).toInt\n        val test_tup_list_len_half_floor_list_len_half_ceil = ceil(test_tup_list_len_half_floor_list_len_half).toInt\n        val test_tup_list_len_half_ceil_list_len_half_floor = floor(test_\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124209,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm_7eusk_.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm_7eusk_.scala:19:68 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_tup_list_len_half_ceil_list_len_half_floor\u001b[0m = floor(test_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: test_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_7eusk_.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_7eusk_.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var test_list = List[List[Long]]()\n        var test_list_temp = List[Long]()\n        var test_tup_temp = test_tup\n        var test_tup_temp_2 = test_tup\n        for (i <- 0 until test_tup.toString.length) {\n            test_tup_temp = test_tup_temp / 10\n            test_tup_temp_2 = test_tup_temp_2 % 10\n            test_list_temp = List(test_tup_temp_2)\n            test_list = test_list ::: List(test_list_temp)\n        }\n        return test_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1gzxmj6h.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1gzxmj6h.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_1rh2exk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_1rh2exk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124207,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn1ppa7i9.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn1ppa7i9.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val coordinates = for (i <- x_list; j <- y_list) yield List(i, j)\n        coordinates.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdhm7evk1.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdhm7evk1.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coords = List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n        return coords\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124095,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pfs9kgw.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pfs9kgw.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_coord = List(x - 1, x, x + 1)\n        val y_coord = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_coord; j <- y_coord) yield List(i, j)\n        return coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124207,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkhyb4fn0.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkhyb4fn0.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var coordinates = List[List[Long]]()\n        var x = 0L\n        var y = 0L\n        while (tup != 0) {\n            if (tup % 2 == 1) {\n                coordinates = List(List(x, y)) ::: coordinates\n            }\n            tup = tup / 2\n            x = x + 1\n            if (x == 5) {\n                x = 0\n                y = y + 1\n            }\n        }\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpan349cbe.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpan349cbe.scala:25:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 10\n        val y = test_tup / 10\n        val coordinates = List(List(x-1, y-1), List(x, y-1), List(x+1, y-1), List(x-1, y), List(x+1, y), List(x-1, y+1), List(x, y+1), List(x+1, y+1))\n        coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0_nmvdj.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0_nmvdj.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_len = test_tup_list.length\n        val test_tup_list_len_half = test_tup_list_len / 2\n        val test_tup_list_len_half_floor = floor(test_tup_list_len_half).toInt\n        val test_tup_list_len_half_ceil = ceil(test_tup_list_len_half).toInt\n        val test_tup_list_len_half_floor_list = test_tup_list.slice(0, test_tup_list_len_half_floor)\n        val test_tup_list_len_half_ceil_list = test_tup_list.slice(test_tup_list_len_half_floor, test_tup_list_len)\n        val test_tup_list_len_half_floor_list_len = test_tup_list_len_half_floor_list.length\n        val test_tup_list_len_half_ceil_list_len = test_tup_list_len_half_ceil_list.length\n        val test_tup_list_len_half_floor_list_len_half = test_tup_list_len_half_floor_list_len / 2\n        val test_tup_list_len_half_ceil_list_len_half = test_tup_list_len_half_ceil_list_len / 2\n        val test_tup_list_len_half_floor_list_len_half_floor = floor(test_tup_list_len_half_floor_list_len_half).toInt\n        val test_tup_list_len_half_ceil_list_len_half_floor = floor(test_tup_list_len_half_ceil_list_len_half).toInt\n        val test_tup_list_len_half_floor_list_len_half_ceil = ceil(test\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124209,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk9fe1u5o.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk9fe1u5o.scala:19:67 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_tup_list_len_half_floor_list_len_half_ceil\u001b[0m = ceil(test\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: test\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9fe1u5o.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9fe1u5o.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x(0) >= 0 && x(1) >= 0 && x(0) <= 9 && x(1) <= 9)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfgd2n55a.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfgd2n55a.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val res = List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35oek310.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35oek310.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val lst = List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n        return lst\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01qvcskm.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01qvcskm.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfhlmn1g0.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfhlmn1g0.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfu1ztfuw.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfu1ztfuw.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup._1\n        val y = test_tup._2\n        List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb037jueh.scala:6:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = test_tup._1\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb037jueh.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = test_tup._2\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb037jueh.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb037jueh.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var coordinates = List[List[Long]]()\n        var x = test_tup / 100\n        var y = test_tup % 100\n        coordinates = coordinates :+ List(x + 1, y)\n        coordinates = coordinates :+ List(x - 1, y)\n        coordinates = coordinates :+ List(x, y + 1)\n        coordinates = coordinates :+ List(x, y - 1)\n        coordinates = coordinates :+ List(x + 1, y + 1)\n        coordinates = coordinates :+ List(x - 1, y - 1)\n        coordinates = coordinates :+ List(x - 1, y + 1)\n        coordinates = coordinates :+ List(x + 1, y - 1)\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfy33oe9y.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfy33oe9y.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9vanqph.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9vanqph.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = List(test_tup)\n        val test_tup_list_list = List(test_tup_list)\n        val test_tup_list_list_list = List(test_tup_list_list)\n        val test_tup_list_list_list_list = List(test_tup_list_list_list)\n        val test_tup_list_list_list_list_list = List(test_tup_list_list_list_list)\n        val test_tup_list_list_list_list_list_list = List(test_tup_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6e_fumqd.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e_fumqd.scala:19:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e_fumqd.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e_fumqd.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup._1\n        val y = test_tup._2\n        List(List(x, y + 1), List(x + 1, y + 1), List(x + 1, y), List(x + 1, y - 1), List(x, y - 1), List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpiv1exu9c.scala:6:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = test_tup._1\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpiv1exu9c.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = test_tup._2\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiv1exu9c.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiv1exu9c.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_x = test_list.map(x => x._1)\n        val test_list_y = test_list.map(x => x._2)\n        val test_list_x_plus = test_list_x.map(x => x + 1)\n        val test_list_x_minus = test_list_x.map(x => x - 1)\n        val test_list_y_plus = test_list_y.map(x => x + 1)\n        val test_list_y_minus = test_list_y.map(x => x - 1)\n        val test_list_x_plus_y_plus = test_list_x_plus.zip(test_list_y_plus)\n        val test_list_x_plus_y_minus = test_list_x_plus.zip(test_list_y_minus)\n        val test_list_x_minus_y_plus = test_list_x_minus.zip(test_list_y_plus)\n        val test_list_x_minus_y_minus = test_list_x_minus.zip(test_list_y_minus)\n        val test_list_x_plus_y = test_list_x_plus.zip(test_list_y)\n        val test_list_x_minus_y = test_list_x_minus.zip(test_list_y)\n        val test_list_x_y_plus = test_list_x.zip(test_list_y_plus)\n        val test_list_x_y_minus = test_list_x.zip(test_list_y_minus)\n        val test_list_x_plus_y_plus_y_minus = test_list_x_plus_y_plus ++ test_list_x_plus_y_minus\n        val test_list_x_minus_y_plus_y_minus = test_list_x_minus_y_plus ++ test_list_x_minus_y_minus\n        val test_list_x_plus_x_minus_y_plus = test_list_x\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnex7f__r.scala:7:47 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_x\u001b[0m = test_list.map(\u001b[36mx\u001b[0m => x._1)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                          value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnex7f__r.scala:8:47 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_y\u001b[0m = test_list.map(\u001b[36mx\u001b[0m => x._2)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                          value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnex7f__r.scala:9:54 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_x_plus\u001b[0m = test_list_x.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue + is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversionsToScala.map AsScalaConcurrentMap\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversionsToScala.properties AsScalaMap\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversionsToScala.set asScala\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversionsToScala.map AsScala\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnex7f__r.scala:10:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_x_minus\u001b[0m = test_list_x.map(\u001b[36mx\u001b[0m => x - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue - is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzh6ez5hv.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzh6ez5hv.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_coords = List(x - 1, x, x + 1)\n        val y_coords = List(y - 1, y, y + 1)\n        val coords = for (i <- x_coords; j <- y_coords) yield List(i, j)\n        coords.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd84w6fz5.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd84w6fz5.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_list_comb = x_list.combinations(2).toList\n        val y_list_comb = y_list.combinations(2).toList\n        val x_list_comb_flat = x_list_comb.map(x => x.productIterator.toList.map(x => x.asInstanceOf[Long]))\n        val y_list_comb_flat = y_list_comb.map(x => x.productIterator.toList.map(x => x.asInstanceOf[Long]))\n        val x_list_comb_flat_map = x_list_comb_flat.map(x => x.map(x => x * 1000000))\n        val y_list_comb_flat_map = y_list_comb_flat.map(x => x.map(x => x))\n        val x_list_comb_flat_map_zip = x_list_comb_flat_map.map(x => x.zip(y_list_comb_flat_map(x_list_comb_flat_map.indexOf(x))))\n        val x_list_comb_flat_map_zip_map = x_list_comb_flat_map_zip.map(x => x.map(x => x._1 + x._2))\n        x_list_comb_flat_map_zip_map.flatten\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92_m2qs_.scala:12:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx_list_comb_flat\u001b[0m = x_list_comb.map(\u001b[36mx\u001b[0m => x.productIterator.toList.map(\u001b[36mx\u001b[0m => x.asInstanceOf[\u001b[35mLong\u001b[0m]))\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value productIterator is not a member of List[Long]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92_m2qs_.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my_list_comb_flat\u001b[0m = y_list_comb.map(\u001b[36mx\u001b[0m => x.productIterator.toList.map(\u001b[36mx\u001b[0m => x.asInstanceOf[\u001b[35mLong\u001b[0m]))\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value productIterator is not a member of List[Long]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92_m2qs_.scala:14:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx_list_comb_flat_map\u001b[0m = x_list_comb_flat.map(\u001b[36mx\u001b[0m => x.map(\u001b[36mx\u001b[0m => x * \u001b[31m1000000\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue map is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.IterableOnce.iterableOnceExtensionMethods\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92_m2qs_.scala:15:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my_list_comb_flat_map\u001b[0m = y_list_comb_flat.map(\u001b[36mx\u001b[0m => x.map(\u001b[36mx\u001b[0m => x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue map is not a member of Nothi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezxdcg_3.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezxdcg_3.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var x = 0L\n        var y = 0L\n        var z = 0L\n        var count = 0\n        while (tup > 0) {\n            if (tup % 3 == 1) {\n                x += pow(3, count).toLong\n            } else if (tup % 3 == 2) {\n                y += pow(3, count).toLong\n            } else {\n                z += pow(3, count).toLong\n            }\n            tup /= 3\n            count += 1\n        }\n        var result = List(List(x - 1, y, z), List(x + 1, y, z), List(x, y - 1, z), List(x, y + 1, z), List(x, y, z - 1), List(x, y, z + 1))\n        result = result.filter(x => x(0) >= 0 && x(1) >= 0 && x(2) >= 0)\n        result = result.map(x => List(x(0), x(1), x(2)))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124209,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppof0c1tu.scala:28:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppof0c1tu.scala:29:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_range = List(x - 1, x, x + 1)\n        val y_range = List(y - 1, y, y + 1)\n        val result = for (i <- x_range; j <- y_range) yield List(i, j)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvv54okjt.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvv54okjt.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var x = 0L\n        var y = 0L\n        var x_list = List[Long]()\n        var y_list = List[Long]()\n        var coord_list = List[List[Long]]()\n        while (tup > 0) {\n            x = tup % 10\n            tup = tup / 10\n            x_list = x :: x_list\n        }\n        while (tup > 0) {\n            y = tup % 10\n            tup = tup / 10\n            y_list = y :: y_list\n        }\n        for (i <- 0 to x_list.length - 1) {\n            for (j <- 0 to y_list.length - 1) {\n                coord_list = List(x_list(i), y_list(j)) :: coord_list\n            }\n        }\n        return coord_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp06atrqep.scala:30:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp06atrqep.scala:31:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var coordinates = List[List[Long]]()\n        var x = 0L\n        var y = 0L\n        for (i <- 1 to 8) {\n            if (i % 2 == 1) {\n                x = tup % 3\n                tup = tup / 3\n            } else {\n                y = tup % 3\n                tup = tup / 3\n                coordinates = List(List(x, y)) ++ coordinates\n            }\n        }\n        coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjy3ex2gd.scala:23:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjy3ex2gd.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_adj = List(List(test_tup + 1, test_tup - 1), List(test_tup + 10, test_tup - 10))\n        val test_list_diag = List(List(test_tup + 11, test_tup - 11), List(test_tup + 9, test_tup - 9))\n        val test_list_all = List(test_list, test_list_adj, test_list_diag)\n        val test_list_all_flat = test_list_all.flatten\n        val test_list_all_flat_filter = test_list_all_flat.filter(x => x > 0 && x < 100)\n        val test_list_all_flat_filter_group = test_list_all_flat_filter.grouped(2).toList\n        test_list_all_flat_filter_group\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv6a5iyex.scala:11:73 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_all_flat_filter\u001b[0m = test_list_all_flat.filter(\u001b[36mx\u001b[0m => x > \u001b[31m0\u001b[0m && x < \u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue > is not a member of Matchable, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv6a5iyex.scala:13:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        test_list_all_flat_filter_group\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    (test_list_all_flat_filter_group : List[List[Matchable]])\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv6a5iyex.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          R",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_coordinates = List(x - 1, x, x + 1)\n        val y_coordinates = List(y - 1, y, y + 1)\n        val coordinates = for (i <- x_coordinates; j <- y_coordinates) yield List(i, j)\n        coordinates.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yv13rzt.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yv13rzt.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x, y + 1), List(x, y - 1), List(x + 1, y), List(x - 1, y), List(x + 1, y + 1), List(x - 1, y - 1), List(x + 1, y - 1), List(x - 1, y + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6zzpduv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6zzpduv.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val x_list_comb = x_list.combinations(2).toList\n        val y_list_comb = y_list.combinations(2).toList\n        val x_list_comb_flat = x_list_comb.map(x => x.productIterator.toList.map(x => x.asInstanceOf[Long]))\n        val y_list_comb_flat = y_list_comb.map(x => x.productIterator.toList.map(x => x.asInstanceOf[Long]))\n        val x_list_comb_flat_tup = x_list_comb_flat.map(x => (x(0), x(1)))\n        val y_list_comb_flat_tup = y_list_comb_flat.map(x => (x(0), x(1)))\n        val x_list_comb_flat_tup_prod = x_list_comb_flat_tup.map(x => x._1 * 1000000 + x._2)\n        val y_list_comb_flat_tup_prod = y_list_comb_flat_tup.map(x => x._1 * 1000000 + x._2)\n        val x_list_comb_flat_tup_prod_list = x_list_comb_flat_tup_prod.map(x => List(x))\n        val y_list_comb_flat_tup_prod_list = y_list_comb_flat_tup_prod.map(x => List(x))\n        val x_list_comb_flat_tup_prod_list_comb = x_list_comb_flat_tup_prod_list.combinations(2).toList\n        val y_list_comb_flat_tup_prod_list_comb = y_list_comb_flat_tup_prod_list.combinations(2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5m6kir86.scala:12:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx_list_comb_flat\u001b[0m = x_list_comb.map(\u001b[36mx\u001b[0m => x.productIterator.toList.map(\u001b[36mx\u001b[0m => x.asInstanceOf[\u001b[35mLong\u001b[0m]))\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value productIterator is not a member of List[Long]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5m6kir86.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my_list_comb_flat\u001b[0m = y_list_comb.map(\u001b[36mx\u001b[0m => x.productIterator.toList.map(\u001b[36mx\u001b[0m => x.asInstanceOf[\u001b[35mLong\u001b[0m]))\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value productIterator is not a member of List[Long]\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp5m6kir86.scala:14:62 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx_list_comb_flat_tup\u001b[0m = x_list_comb_flat.map(\u001b[36mx\u001b[0m => (x(\u001b[31m0\u001b[0m), x(\u001b[31m1\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    \u001b[33mparameter\u001b[0m \u001b[35mx\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp5m6kir86.scala:14:68 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx_list_comb_flat_tup\u001b[0m = x_list_comb_flat.map(\u001b[36mx\u001b[0m => (x(\u001b[31m0\u001b[0m), x(\u001b[31m1\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    \u001b[33mparameter\u001b[0m \u001b[35mx\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp5m6kir86.scala:15:62 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_len = test_tup_list.length\n        val test_tup_list_len_half = test_tup_list_len / 2\n        val test_tup_list_len_half_plus_one = test_tup_list_len_half + 1\n        val test_tup_list_len_half_minus_one = test_tup_list_len_half - 1\n        val test_tup_list_len_minus_one = test_tup_list_len - 1\n        val test_tup_list_len_minus_two = test_tup_list_len - 2\n        val test_tup_list_len_minus_three = test_tup_list_len - 3\n        val test_tup_list_len_minus_four = test_tup_list_len - 4\n        val test_tup_list_len_minus_five = test_tup_list_len - 5\n        val test_tup_list_len_minus_six = test_tup_list_len - 6\n        val test_tup_list_len_minus_seven = test_tup_list_len - 7\n        val test_tup_list_len_minus_eight = test_tup_list_len - 8\n        val test_tup_list_len_minus_nine = test_tup_list_len - 9\n        val test_tup_list_len_minus_ten = test_tup_list_len - 10\n        val test_tup_list_len_minus_eleven = test_tup_list_len - 11\n        val test_tup_list_len_minus_twelve = test_tup_list_len - 12\n        val test_tup_list_len_minus_thirteen = test_tup_list_len - 13\n        val test_tup_list_len_minus_fourteen = test_tup_list_len - 14\n        val test_tup_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcabpkt6k.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcabpkt6k.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcabpkt6k.scala:28:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcabpkt6k.scala:29:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val l = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1k5p5s4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1k5p5s4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val tup_list = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        tup_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k5n29ew.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k5n29ew.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var coordinates = List[List[Long]]()\n        var x = test_tup / 100\n        var y = test_tup % 100\n        coordinates = coordinates :+ List(x, y + 1)\n        coordinates = coordinates :+ List(x, y - 1)\n        coordinates = coordinates :+ List(x + 1, y)\n        coordinates = coordinates :+ List(x - 1, y)\n        coordinates = coordinates :+ List(x + 1, y + 1)\n        coordinates = coordinates :+ List(x - 1, y - 1)\n        coordinates = coordinates :+ List(x + 1, y - 1)\n        coordinates = coordinates :+ List(x - 1, y + 1)\n        coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6fqf_7e_.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6fqf_7e_.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_adj = List(List(test_tup - 1, test_tup + 1), List(test_tup - 10, test_tup + 10))\n        val test_list_adj_diag = List(List(test_tup - 11, test_tup - 9, test_tup + 9, test_tup + 11))\n        val test_list_adj_all = List(test_list_adj, test_list_adj_diag)\n        val test_list_adj_all_flattened = test_list_adj_all.flatten\n        val test_list_adj_all_flattened_filtered = test_list_adj_all_flattened.filter(x => x > 0 && x < 100)\n        val test_list_adj_all_flattened_filtered_grouped = test_list_adj_all_flattened_filtered.grouped(2).toList\n        val test_list_adj_all_flattened_filtered_grouped_filtered = test_list_adj_all_flattened_filtered_grouped.filter(x => x.head % 10 != 0 && x.last % 10 != 9)\n        val test_list_adj_all_flattened_filtered_grouped_filtered_flattened = test_list_adj_all_flattened_filtered_grouped_filtered.flatten\n        val test_list_adj_all_flattened_filtered_grouped_filtered_flattened_grouped = test_list_adj_all_flattened_filtered_grouped_filtered_flattened.grouped(4).toList\n        val test_list_adj_all_flattened_filtered_grouped_filtered_flattened_grouped_filtered = test_list_adj_all_flattened_filtered_grouped_filtered_flattened_grouped.filter(x => x.head % 10 != 0 && x.last % 10 != 9)\n        val test_list_adj_all_flattened_\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124237,
      "stdout": "Cancelling test of (math.Ordering.Implicits.infixOrderingOps : \n  [T](x: T)(\u001b[33mimplicit \u001b[0mord: Ordering[T]): Ordering[T]#OrderingOps\n) when making suggestions for error in /tmp/tmpsrp7bwt9.scala\n",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsrp7bwt9.scala:18:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsrp7bwt9.scala:11:93 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_adj_all_flattened_filtered\u001b[0m = test_list_adj_all_flattened.filter(\u001b[36mx\u001b[0m => x > \u001b[31m0\u001b[0m && x < \u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue > is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsrp7bwt9.scala:13:132 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_adj_all_flattened_filtered_grouped_filtered\u001b[0m = test_list_adj_all_flattened_filtered_grouped.filter(\u001b[36mx\u001b[0m => x.head % \u001b[31m10\u001b[0m != \u001b[31m0\u001b[0m && x.last % \u001b[31m10\u001b[0m != \u001b[31m9\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue % is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsrp7bwt9.scala:16:186 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_adj_all_flattened_filtered_grouped_filtered_flattened_grouped_filtered\u001b[0m = test_list_adj_all_flattened_filtered_grouped_filtered_flattened_grouped.filter(\u001b[36mx\u001b[0m => x.head % \u001b[31m10\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => (x(0) >= 0 && x(1) >= 0))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpacc29l15.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpacc29l15.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_1rh2exk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_1rh2exk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coordinates = for (i <- x_list; j <- y_list) yield List(i, j)\n        coordinates.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124153,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd_ie5z3c.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd_ie5z3c.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val lst = List(List(x-1,y-1),List(x-1,y),List(x-1,y+1),List(x,y-1),List(x,y+1),List(x+1,y-1),List(x+1,y),List(x+1,y+1))\n        return lst\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncinc8jb.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncinc8jb.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_adj = List(List(test_tup + 1, test_tup + 2), List(test_tup - 1, test_tup - 2), List(test_tup + 2, test_tup + 4), List(test_tup - 2, test_tup - 4), List(test_tup + 4, test_tup + 8), List(test_tup - 4, test_tup - 8), List(test_tup + 8, test_tup + 16), List(test_tup - 8, test_tup - 16))\n        test_list_adj\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_6rpojle.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_6rpojle.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5p8dhyl.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5p8dhyl.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coordinates = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphnfr8bx1.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphnfr8bx1.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 10\n        val y = test_tup % 10\n        List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw4s_jmcb.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw4s_jmcb.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnt1a96db.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnt1a96db.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 10\n        val y = test_tup / 10\n        val coordinates = List(List(x-1, y-1), List(x, y-1), List(x+1, y-1), List(x-1, y), List(x+1, y), List(x-1, y+1), List(x, y+1), List(x+1, y+1))\n        coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0_nmvdj.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0_nmvdj.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124207,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn1ppa7i9.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn1ppa7i9.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list2 = List(test_tup)\n        val test_list3 = List(test_tup)\n        val test_list4 = List(test_tup)\n        val test_list5 = List(test_tup)\n        val test_list6 = List(test_tup)\n        val test_list7 = List(test_tup)\n        val test_list8 = List(test_tup)\n        val test_list9 = List(test_tup)\n        val test_list10 = List(test_tup)\n        val test_list11 = List(test_tup)\n        val test_list12 = List(test_tup)\n        val test_list13 = List(test_tup)\n        val test_list14 = List(test_tup)\n        val test_list15 = List(test_tup)\n        val test_list16 = List(test_tup)\n        val test_list17 = List(test_tup)\n        val test_list18 = List(test_tup)\n        val test_list19 = List(test_tup)\n        val test_list20 = List(test_tup)\n        val test_list21 = List(test_tup)\n        val test_list22 = List(test_tup)\n        val test_list23 = List(test_tup)\n        val test_list24 = List(test_tup)\n        val test_list25 = List(test_tup)\n        val test_list26 = List(test_tup)\n        val test_list27 = List(test_tup)\n        val test_list28 = List(test_tup)\n        val test_list29 = List(test_tup)\n        val test_list30 = List(test_tup)\n        val test_list31 = List(test_tup)\n        val test_list32 = List(test_tup)\n        val test_list33 = List(test_tup)\n        val test_list34 = List(test_tup)\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpmql0syjt.scala:40:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmql0syjt.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmql0syjt.scala:43:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmql0syjt.scala:44:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coordinates = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_wq3ewwg.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_wq3ewwg.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => !(x(0) == x(1) && x(0) == x(2)))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprpcs11er.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprpcs11er.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = List(test_tup)\n        val test_tup_list_adjacent = List(test_tup_list.map(x => x + 1), test_tup_list.map(x => x - 1), test_tup_list.map(x => x + 10), test_tup_list.map(x => x - 10))\n        test_tup_list_adjacent.map(x => x.filter(y => y > 0 && y < 100))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw7vi57km.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw7vi57km.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_adj = List(List(test_tup - 1), List(test_tup + 1), List(test_tup - 10), List(test_tup + 10))\n        val test_list_diag = List(List(test_tup - 11), List(test_tup - 9), List(test_tup + 9), List(test_tup + 11))\n        val test_list_all = test_list_adj ++ test_list_diag\n        val test_list_all_adj = test_list_all.filter(x => x(0) % 10 != 0 && x(0) % 10 != 9 && x(0) >= 0 && x(0) <= 99)\n        test_list_all_adj\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6h6_wpzq.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6h6_wpzq.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_coords = List(x, x + 1, x - 1)\n        val y_coords = List(y, y + 1, y - 1)\n        val coords = for {\n            x_coord <- x_coords\n            y_coord <- y_coords\n        } yield List(x_coord, y_coord)\n        return coords.filter(coord => coord(0) >= 0 && coord(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8n8170tx.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8n8170tx.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val coords = List(List(x-1, y-1), List(x, y-1), List(x+1, y-1), List(x-1, y), List(x+1, y), List(x-1, y+1), List(x, y+1), List(x+1, y+1))\n        coords.filter(x => x(0) >= 0 && x(0) <= 7 && x(1) >= 0 && x(1) <= 7)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphz4kxsam.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphz4kxsam.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val lst = List(List(x, y + 1), List(x, y - 1), List(x + 1, y), List(x - 1, y))\n        return lst\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4pnh3a7g.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4pnh3a7g.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val coord_list = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        return coord_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcwb4_2yu.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcwb4_2yu.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwnnfryf.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwnnfryf.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup._1\n        val y = test_tup._2\n        val x_range = List(x-1, x, x+1)\n        val y_range = List(y-1, y, y+1)\n        val coordinates = for (i <- x_range; j <- y_range) yield List(i, j)\n        coordinates.toList\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb4xxvxtv.scala:6:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = test_tup._1\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb4xxvxtv.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = test_tup._2\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb4xxvxtv.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb4xxvxtv.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => (x(0) >= 0 && x(1) >= 0))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgwzi37tq.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgwzi37tq.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup._1\n        val y = test_tup._2\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpilmo_mx6.scala:6:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = test_tup._1\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpilmo_mx6.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = test_tup._2\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpilmo_mx6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpilmo_mx6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14isq1k1.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14isq1k1.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_coords = List(x - 1, x, x + 1)\n        val y_coords = List(y - 1, y, y + 1)\n        val coords = for (i <- x_coords; j <- y_coords) yield List(i, j)\n        coords.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd84w6fz5.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd84w6fz5.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val x = tup(0)\n        val y = tup(1)\n        val z = tup(2)\n        val w = tup(3)\n        val x_list = List(x + 1, x - 1, x)\n        val y_list = List(y + 1, y - 1, y)\n        val z_list = List(z + 1, z - 1, z)\n        val w_list = List(w + 1, w - 1, w)\n        val x_list_filtered = x_list.filter(x => x >= 0 && x <= 9)\n        val y_list_filtered = y_list.filter(y => y >= 0 && y <= 9)\n        val z_list_filtered = z_list.filter(z => z >= 0 && z <= 9)\n        val w_list_filtered = w_list.filter(w => w >= 0 && w <= 9)\n        val x_list_filtered_map = x_list_filtered.map(x => List(x))\n        val y_list_filtered_map = y_list_filtered.map(y => List(y))\n        val z_list_filtered_map = z_list_filtered.map(z => List(z))\n        val w_list_filtered_map = w_list_filtered.map(w => List(w))\n        val x_list_filtered_map_flat = x_list_filtered_map.flatten\n        val y_list_filtered_map_flat = y_list_filtered_map.flatten\n        val z_list_filtered_map_flat = z_list_filtered_map.flatten\n        val w_list_filtered_map_flat = w_list_filtered_map.flatten\n        val x_list_filtered_map_flat_zip = x_list_filtered_map_flat.zip(y_list_filtered_map_flat)\n        val z_list_filtered_map_flat_zip = z_\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpti18mjpx.scala:28:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mz_list_filtered_map_flat_zip\u001b[0m = z_\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: z_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpti18mjpx.scala:29:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpti18mjpx.scala:31:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpti18mjpx.scala:32:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg745apmg.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg745apmg.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_x = test_list.map(x => x._1)\n        val test_list_y = test_list.map(x => x._2)\n        val test_list_x_adj = test_list_x.map(x => List(x - 1, x, x + 1))\n        val test_list_y_adj = test_list_y.map(x => List(x - 1, x, x + 1))\n        val test_list_x_adj_flat = test_list_x_adj.flatten\n        val test_list_y_adj_flat = test_list_y_adj.flatten\n        val test_list_x_adj_flat_zip = test_list_x_adj_flat.zip(test_list_y_adj_flat)\n        test_list_x_adj_flat_zip\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpips8s4bz.scala:7:47 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_x\u001b[0m = test_list.map(\u001b[36mx\u001b[0m => x._1)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                          value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpips8s4bz.scala:8:47 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_y\u001b[0m = test_list.map(\u001b[36mx\u001b[0m => x._2)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                          value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpips8s4bz.scala:9:58 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_x_adj\u001b[0m = test_list_x.map(\u001b[36mx\u001b[0m => List(x - \u001b[31m1\u001b[0m, x, x + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                        ^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue - is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversionsToScala.map AsScalaConcurrentMap\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversionsToScala.properties AsScalaMap\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversionsToScala.map AsScala\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversionsToScala.set asScala\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversions.map AsScala\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversionsToScala.dictionary AsScalaMap\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpips8s4bz.scala:9:68 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_x_adj\u001b[0m = test_list_x.map(\u001b[36mx\u001b[0m => List(x - \u001b[31m1\u001b[0m, x, x + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                  ^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue +",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val list = List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdllnakdn.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdllnakdn.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val coordinates = List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdhiswrjr.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdhiswrjr.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsebxv6mq.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsebxv6mq.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58f840ik.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58f840ik.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coordinates = for (i <- x_list; j <- y_list) yield List(i, j)\n        coordinates.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprorsk6fw.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprorsk6fw.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val x_list_list = x_list.map(i => List(i))\n        val y_list_list = y_list.map(i => List(i))\n        val x_list_list_list = x_list_list.map(i => y_list_list.map(j => i ++ j))\n        x_list_list_list.flatten\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt3vyz5f.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt3vyz5f.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdrg6xb37.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdrg6xb37.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9vanqph.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9vanqph.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val lst = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        return lst\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz6st_svo.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz6st_svo.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = List(test_tup)\n        val test_tup_list_list = List(test_tup_list)\n        val test_tup_list_list_list = List(test_tup_list_list)\n        val test_tup_list_list_list_list = List(test_tup_list_list_list)\n        val test_tup_list_list_list_list_list = List(test_tup_list_list_list_list)\n        val test_tup_list_list_list_list_list_list = List(test_tup_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6e_fumqd.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e_fumqd.scala:19:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e_fumqd.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e_fumqd.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val result = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpseft6uif.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpseft6uif.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var coordinates = List[List[Long]]()\n        for (i <- -1 to 1) {\n            for (j <- -1 to 1) {\n                if (i != 0 || j != 0) {\n                    coordinates = List(test_tup._1 + i, test_tup._2 + j) :: coordinates\n                }\n            }\n        }\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp38d98q0f.scala:10:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    coordinates = List(test_tup._1 + i, test_tup._2 + j) :: coordinates\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp38d98q0f.scala:10:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    coordinates = List(test_tup._1 + i, test_tup._2 + j) :: coordinates\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp38d98q0f.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp38d98q0f.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000\n        val y = test_tup % 1000\n        List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmqvx4o0o.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmqvx4o0o.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val coordinates = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8t_y_u53.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8t_y_u53.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val xs = List(x - 1, x, x + 1)\n        val ys = List(y - 1, y, y + 1)\n        val xys = for (x <- xs; y <- ys) yield List(x, y)\n        return xys.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_hjxjk_6.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_hjxjk_6.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val l = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124236,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1k5p5s4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1k5p5s4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        var result = List[List[Long]]()\n        for (i <- x_list) {\n            for (j <- y_list) {\n                if (i != x || j != y) {\n                    result = List(i, j) :: result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwdjssoo.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwdjssoo.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val tup_list = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        tup_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124235,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k5n29ew.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k5n29ew.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_list = List(test_list)\n        val test_list_list_list = List(test_list_list)\n        val test_list_list_list_list = List(test_list_list_list)\n        val test_list_list_list_list_list = List(test_list_list_list_list)\n        val test_list_list_list_list_list_list = List(test_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7rcy6gmh.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7rcy6gmh.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7rcy6gmh.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7rcy6gmh.scala:23:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyeyzmor4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyeyzmor4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x, y + 1), List(x, y - 1), List(x + 1, y), List(x - 1, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxr9bigv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxr9bigv.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_tup_list_len = test_tup_list.length\n        val test_tup_list_len_minus_one = test_tup_list_len - 1\n        val test_tup_list_len_minus_two = test_tup_list_len - 2\n        val test_tup_list_len_minus_three = test_tup_list_len - 3\n        val test_tup_list_len_minus_four = test_tup_list_len - 4\n        val test_tup_list_len_minus_five = test_tup_list_len - 5\n        val test_tup_list_len_minus_six = test_tup_list_len - 6\n        val test_tup_list_len_minus_seven = test_tup_list_len - 7\n        val test_tup_list_len_minus_eight = test_tup_list_len - 8\n        val test_tup_list_len_minus_nine = test_tup_list_len - 9\n        val test_tup_list_len_minus_ten = test_tup_list_len - 10\n        val test_tup_list_len_minus_eleven = test_tup_list_len - 11\n        val test_tup_list_len_minus_twelve = test_tup_list_len - 12\n        val test_tup_list_len_minus_thirteen = test_tup_list_len - 13\n        val test_tup_list_len_minus_fourteen = test_tup_list_len - 14\n        val test_tup_list_len_minus_fifteen = test_tup_list_len - 15\n        val test_tup_list_len_minus_sixteen = test_tup_list_len - 16\n        val test_tup_list_len_minus_seventeen = test_tup_list_len - 17\n        val test_tup_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeb4s4u91.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeb4s4u91.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeb4s4u91.scala:28:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeb4s4u91.scala:29:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coordinates = List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz6i_6csy.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz6i_6csy.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (x <- x_list; y <- y_list) yield List(x, y)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgysmp3vc.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgysmp3vc.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_list = List(test_list)\n        val test_list_list_list = List(test_list_list)\n        val test_list_list_list_list = List(test_list_list_list)\n        val test_list_list_list_list_list = List(test_list_list_list_list)\n        val test_list_list_list_list_list_list = List(test_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7rcy6gmh.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7rcy6gmh.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7rcy6gmh.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7rcy6gmh.scala:23:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_adj = List(List(test_tup + 1, test_tup - 1, test_tup + 2, test_tup - 2, test_tup + 3, test_tup - 3, test_tup + 4, test_tup - 4, test_tup + 5, test_tup - 5, test_tup + 6, test_tup - 6, test_tup + 7, test_tup - 7, test_tup + 8, test_tup - 8, test_tup + 9, test_tup - 9, test_tup + 10, test_tup - 10, test_tup + 11, test_tup - 11, test_tup + 12, test_tup - 12, test_tup + 13, test_tup - 13, test_tup + 14, test_tup - 14, test_tup + 15, test_tup - 15, test_tup + 16, test_tup - 16, test_tup + 17, test_tup - 17, test_tup + 18, test_tup - 18, test_tup + 19, test_tup - 19, test_tup + 20, test_tup - 20, test_tup + 21, test_tup - 21, test_tup + 22, test_tup - 22, test_tup + 23, test_tup - 23, test_tup + 24, test_tup - 24, test_tup + 25, test_tup - 25, test_tup + 26, test_tup - 26, test_tup + 27, test_tup - 27, test_tup + 28, test_tup - 28, test_tup + 29, test_tup - 29, test_tup + 30, test_tup - 30, test_tup + 31, test_tup - 31, test_tup + 32, test_tup - 32, test_tup + 33, test_tup - 33, test_tup + 34, test_tup - 34, test_tup + 35, test_\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj49_6usl.scala:8:4 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m    }\n\u001b[31m\u001b[31m  |\u001b[0m    ^\u001b[0m\n\u001b[31m  |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj49_6usl.scala:7:1055 -----------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_adj\u001b[0m = List(List(test_tup + \u001b[31m1\u001b[0m, test_tup - \u001b[31m1\u001b[0m, test_tup + \u001b[31m2\u001b[0m, test_tup - \u001b[31m2\u001b[0m, test_tup + \u001b[31m3\u001b[0m, test_tup - \u001b[31m3\u001b[0m, test_tup + \u001b[31m4\u001b[0m, test_tup - \u001b[31m4\u001b[0m, test_tup + \u001b[31m5\u001b[0m, test_tup - \u001b[31m5\u001b[0m, test_tup + \u001b[31m6\u001b[0m, test_tup - \u001b[31m6\u001b[0m, test_tup + \u001b[31m7\u001b[0m, test_tup - \u001b[31m7\u001b[0m, test_tup + \u001b[31m8\u001b[0m, test_tup - \u001b[31m8\u001b[0m, test_tup + \u001b[31m9\u001b[0m, test_tup - \u001b[31m9\u001b[0m, test_tup + \u001b[31m10\u001b[0m, test_tup - \u001b[31m10\u001b[0m, test_tup + \u001b[31m11\u001b[0m, test_tup - \u001b[31m11\u001b[0m, test_tup + \u001b[31m12\u001b[0m, test_tup - \u001b[31m12\u001b[0m, test_tup + \u001b[31m13\u001b[0m, test_tup - \u001b[31m13\u001b[0m, test_tup + \u001b[31m14\u001b[0m, test_tup - \u001b[31m14\u001b[0m, test_tup + \u001b[31m15\u001b[0m, test_tup - \u001b[31m15\u001b[0m, test_tup + \u001b[31m16\u001b[0m, test_tup - \u001b[31m16\u001b[0m, test_tup + \u001b[31m17\u001b[0m, test_tup - \u001b[31m17\u001b[0m, test_tup + \u001b[31m18\u001b[0m, test_tup - \u001b[31m18\u001b[0m, test_tup + \u001b[31m19\u001b[0m, test_tup - \u001b[31m19\u001b[0m, test_tup + \u001b[31m20\u001b[0m, test_tup - \u001b[31m20\u001b[0m, test_tup + \u001b[31m21\u001b[0m, test_tup - \u001b[31m21\u001b[0m, test_tup + \u001b[31m22\u001b[0m, test_tup - \u001b[31m22\u001b[0m, test_tup + \u001b[31m23\u001b[0m, test_tup - \u001b[31m23\u001b[0m, test_tup + \u001b[31m24\u001b[0m, test_tup - \u001b[31m24\u001b[0m, test_tup + \u001b[31m25\u001b[0m, test_tup - \u001b[31m25\u001b[0m, test_tup + \u001b[31m26\u001b[0m, test_tup - \u001b[31m26\u001b[0m, test_tup + \u001b[31m27\u001b[0m, test_tup - \u001b[31m27\u001b[0m, test_tup + \u001b[31m28\u001b[0m, test_tup - \u001b[31m28\u001b[0m, test_tup + \u001b[31m29\u001b[0m, test_tup - \u001b[31m29\u001b[0m, test_tup + \u001b[31m30\u001b[0m, test_tup - \u001b[31m30\u001b[0m, test_tup + \u001b[31m31\u001b[0m, test_tup - \u001b[31m31\u001b[0m, test_tup + \u001b[31m32\u001b[0m, test_tup - \u001b[31m32\u001b[0m, test_tup + \u001b[31m33\u001b[0m, test_tup - \u001b[31m33\u001b[0m, test_tup + \u001b[31m34\u001b[0m, test_tup - \u001b[31m34\u001b[0m, test_tup + \u001b[31m35\u001b[0m, test_\n\u001b[31m\u001b[31m  |\u001b[0m                                ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        val x = tup(0)\n        val y = tup(1)\n        val z = tup(2)\n        val w = tup(3)\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val z_list = List(z - 1, z, z + 1)\n        val w_list = List(w - 1, w, w + 1)\n        val list = List(x_list, y_list, z_list, w_list)\n        val permutations = list.permutations.toList\n        val coordinates = permutations.map(x => x.mkString(\"\").toLong)\n        coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp34idrinu.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        coordinates\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (coordinates : List[Long])\n\u001b[31m   |\u001b[0m        Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp34idrinu.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp34idrinu.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x - 1, y), List(x + 1, y), List(x, y - 1), List(x, y + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssliq52n.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssliq52n.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val tup_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        tup_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xsshlbn.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xsshlbn.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup._1\n        val y = test_tup._2\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        val x_y_list_filtered = x_y_list.filter(x => !(x(0) == x(1) && x(0) == x))\n        x_y_list_filtered\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2hhbwyrr.scala:6:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = test_tup._1\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2hhbwyrr.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = test_tup._2\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2hhbwyrr.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2hhbwyrr.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x-1, y), List(x+1, y), List(x, y-1), List(x, y+1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpktbolddb.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpktbolddb.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 10\n        val y = test_tup / 10\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val all_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        all_list.filter(x => (x(0) >= 0 && x(0) <= 9 && x(1) >= 0 && x(1) <= 9))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpskgosyvp.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpskgosyvp.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_list = List(test_list)\n        val test_list_list_list = List(test_list_list)\n        val test_list_list_list_list = List(test_list_list_list)\n        val test_list_list_list_list_list = List(test_list_list_list_list)\n        val test_list_list_list_list_list_list = List(test_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list_list_list_list)\n        val test_list_list_list_list_list_list_list_list_list_list_list_list_list_list = List(test_list_list_list_list_list_list_list_list_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7rcy6gmh.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7rcy6gmh.scala:20:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7rcy6gmh.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7rcy6gmh.scala:23:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coords = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        return coords.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx5gv2a8d.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx5gv2a8d.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var coordinates = List[List[Long]]()\n        val x = test_tup / 100\n        val y = test_tup % 100\n        coordinates = coordinates :+ List(x - 1, y - 1)\n        coordinates = coordinates :+ List(x - 1, y)\n        coordinates = coordinates :+ List(x - 1, y + 1)\n        coordinates = coordinates :+ List(x, y - 1)\n        coordinates = coordinates :+ List(x, y + 1)\n        coordinates = coordinates :+ List(x + 1, y - 1)\n        coordinates = coordinates :+ List(x + 1, y)\n        coordinates = coordinates :+ List(x + 1, y + 1)\n        coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqrai_vq.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqrai_vq.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => !(x(0) == x(1) && x(0) == x))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124291,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpl6x_6zbs.scala:11:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        x_y_list.filter(\u001b[36mx\u001b[0m => !(x(\u001b[31m0\u001b[0m) == x(\u001b[31m1\u001b[0m) && x(\u001b[31m0\u001b[0m) == x))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Values of types Long and List[Long] cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl6x_6zbs.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl6x_6zbs.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coordinates = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ywq92im.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ywq92im.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_1rh2exk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_1rh2exk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val coordinates = List(List(x, y), List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124291,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvo75kx5a.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvo75kx5a.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_2 = List(test_tup)\n        val test_list_3 = List(test_tup)\n        val test_list_4 = List(test_tup)\n        val test_list_5 = List(test_tup)\n        val test_list_6 = List(test_tup)\n        val test_list_7 = List(test_tup)\n        val test_list_8 = List(test_tup)\n        val test_list_9 = List(test_tup)\n        val test_list_10 = List(test_tup)\n        val test_list_11 = List(test_tup)\n        val test_list_12 = List(test_tup)\n        val test_list_13 = List(test_tup)\n        val test_list_14 = List(test_tup)\n        val test_list_15 = List(test_tup)\n        val test_list_16 = List(test_tup)\n        val test_list_17 = List(test_tup)\n        val test_list_18 = List(test_tup)\n        val test_list_19 = List(test_tup)\n        val test_list_20 = List(test_tup)\n        val test_list_21 = List(test_tup)\n        val test_list_22 = List(test_tup)\n        val test_list_23 = List(test_tup)\n        val test_list_24 = List(test_tup)\n        val test_list_25 = List(test_tup)\n        val test_list_26 = List(test_tup)\n        val test_list_27 = List(test_tup)\n        val test_list_28 = List(test_tup)\n        val test_list_29 = List(test_tup)\n        val test_list_30 = List(test_tup)\n        val test_list_31 = List(test_tup)\n        val test_list_32 = List(test_tup)\n       \n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510696,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1e2gytgs.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1e2gytgs.scala:41:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1e2gytgs.scala:42:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        var result = List[List[Long]]()\n        for (i <- x_list) {\n            for (j <- y_list) {\n                if (i != x || j != y) {\n                    result = List(i, j) :: result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwdjssoo.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwdjssoo.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var list = List[List[Long]]()\n        var x = 0L\n        var y = 0L\n        for (i <- 0 until 8) {\n            if (i < 4) {\n                x += (tup & 1)\n                tup >>= 1\n            } else {\n                y += (tup & 1)\n                tup >>= 1\n            }\n        }\n        for (i <- -1 to 1) {\n            for (j <- -1 to 1) {\n                if (i != 0 || j != 0) {\n                    list = List(x + i, y + j) :: list\n                }\n            }\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124291,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_dw7z2k.scala:29:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_dw7z2k.scala:30:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        val len = tup.length\n        val res = ListBuffer[List[Long]]()\n        for (i <- 0 until len) {\n            for (j <- 0 until len) {\n                if (i != j) {\n                    val temp = tup.clone\n                    val temp2 = temp(i)\n                    temp(i) = temp(j)\n                    temp(j) = temp2\n                    res += temp\n                }\n            }\n        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124291,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeohh3k40.scala:12:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mtemp\u001b[0m = tup.clone\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mmethod\u001b[0m \u001b[35mclone\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mObject\u001b[0m cannot be accessed as a member of (tup : List[Long]) from module class Problem$.\n\u001b[31m   |\u001b[0m Access to protected \u001b[33mmethod\u001b[0m \u001b[35mclone\u001b[0m not permitted because prefix type List[Long]\n\u001b[31m   |\u001b[0m does not conform to \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m where the access takes place\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeohh3k40.scala:23:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeohh3k40.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup._1\n        val y = test_tup._2\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124292,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp57gt5dz8.scala:6:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = test_tup._1\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp57gt5dz8.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = test_tup._2\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57gt5dz8.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57gt5dz8.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124153,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptspo_obr.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptspo_obr.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 10000\n        val y = test_tup / 10000\n        val x_min = max(x - 1, 0)\n        val x_max = min(x + 1, 9999)\n        val y_min = max(y - 1, 0)\n        val y_max = min(y + 1, 9999)\n        var result = List[List[Long]]()\n        for (i <- x_min to x_max) {\n            for (j <- y_min to y_max) {\n                if (i != x || j != y) {\n                    result = List(List(i, j)) ::: result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124292,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuv53to28.scala:23:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuv53to28.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_coords = List(x - 1, x, x + 1)\n        val y_coords = List(y - 1, y, y + 1)\n        val coords = for (i <- x_coords; j <- y_coords) yield List(i, j)\n        coords.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ftxfjy2.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ftxfjy2.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = List(test_tup)\n        val test_tup_list_adj = List(test_tup_list.map(x => x + 1), test_tup_list.map(x => x - 1), test_tup_list.map(x => x + 10), test_tup_list.map(x => x - 10))\n        test_tup_list_adj.flatten\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124293,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpxmjlg8gd.scala:8:33 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        test_tup_list_adj.flatten\n\u001b[31m\u001b[31m  |\u001b[0m                                 ^\u001b[0m\n\u001b[31m  |\u001b[0mno given instance of type List[Long] => IterableOnce[B] was found for parameter toIterableOnce of \u001b[33mmethod\u001b[0m \u001b[35mflatten\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mStrictOptimizedIterableOps\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mwhere:    B is a type variable with constraint <: List[Long]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxmjlg8gd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxmjlg8gd.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val list = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        list.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124291,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcleti4w1.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcleti4w1.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfu1ztfuw.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfu1ztfuw.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coordinates = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphnfr8bx1.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphnfr8bx1.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val coord_list = for {\n            i <- x_list\n            j <- y_list\n        } yield List(i, j)\n        coord_list.filter(x => x(0) > 0 && x(1) > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124292,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjbkonfrh.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjbkonfrh.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        return List(List(x - 1, y), List(x + 1, y), List(x, y - 1), List(x, y + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsc6gp5u2.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsc6gp5u2.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdrg6xb37.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdrg6xb37.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val lst = List(List(x-1, y-1), List(x, y-1), List(x+1, y-1), List(x-1, y), List(x+1, y), List(x-1, y+1), List(x, y+1), List(x+1, y+1))\n        lst.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124292,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi_go5sc2.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi_go5sc2.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val coordinates = List(List(x - 1, y - 1), List(x, y - 1), List(x + 1, y - 1), List(x - 1, y), List(x + 1, y), List(x - 1, y + 1), List(x, y + 1), List(x + 1, y + 1))\n        return coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124293,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jnb_j1.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jnb_j1.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyeyzmor4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyeyzmor4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9vanqph.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9vanqph.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var result = List[List[Long]]()\n        var x = 0L\n        var y = 0L\n        while (tup > 0) {\n            x = tup % 10\n            tup = tup / 10\n            y = tup % 10\n            tup = tup / 10\n            result = List(List(x, y)) ::: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124295,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwnfm1ro.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwnfm1ro.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_x = test_list.map(x => x._1)\n        val test_list_y = test_list.map(x => x._2)\n        val test_list_x_adj = test_list_x.map(x => List(x - 1, x, x + 1))\n        val test_list_y_adj = test_list_y.map(x => List(x - 1, x, x + 1))\n        val test_list_x_adj_flat = test_list_x_adj.flatten\n        val test_list_y_adj_flat = test_list_y_adj.flatten\n        val test_list_x_adj_flat_filter = test_list_x_adj_flat.filter(x => x >= 0)\n        val test_list_y_adj_flat_filter = test_list_y_adj_flat.filter(x => x >= 0)\n        val test_list_x_adj_flat_filter_zip = test_list_x_adj_flat_filter.zip(test_list_y_adj_flat_filter)\n        test_list_x_adj_flat_filter_zip\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj9oyx4qk.scala:7:47 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_x\u001b[0m = test_list.map(\u001b[36mx\u001b[0m => x._1)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                          value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj9oyx4qk.scala:8:47 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_y\u001b[0m = test_list.map(\u001b[36mx\u001b[0m => x._2)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                          value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj9oyx4qk.scala:9:58 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_x_adj\u001b[0m = test_list_x.map(\u001b[36mx\u001b[0m => List(x - \u001b[31m1\u001b[0m, x, x + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                        ^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue - is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import Byte.byte2double\n\u001b[31m  |\u001b[0m  import Byte.byte2float\n\u001b[31m  |\u001b[0m  import Byte.byte2int\n\u001b[31m  |\u001b[0m  import Byte.byte2long\n\u001b[31m  |\u001b[0m  import Byte.byte2short\n\u001b[31m  |\u001b[0m  import Char.char2double\n\u001b[31m  |\u001b[0m  import Char.char2float\n\u001b[31m  |\u001b[0m  import Char.char2int\n\u001b[31m  |\u001b[0m  import Char.char2long\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj9oyx4qk.scala:9:68 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_x_adj\u001b[0m = test_list_x.map(\u001b[36mx\u001b[0m => List(x - \u001b[31m1\u001b[0m, x, x + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                  ^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue + is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m  |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x.head >= 0 && x.last >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124294,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuupphcu_.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuupphcu_.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val list = List(List(x, y + 1), List(x, y - 1), List(x + 1, y), List(x - 1, y), List(x + 1, y + 1), List(x + 1, y - 1), List(x - 1, y + 1), List(x - 1, y - 1))\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124294,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp97hg2k.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp97hg2k.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14isq1k1.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14isq1k1.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val tup = test_tup.toString.split(\"\").toList.map(x => x.toLong)\n        val tup_len = tup.length\n        val result = ListBuffer[List[Long]]()\n        for (i <- 0 to tup_len - 1) {\n            val temp = tup.clone\n            temp(i) = (temp(i) + 1) % 10\n            result += temp\n            val temp2 = tup.clone\n            temp2(i) = (temp2(i) - 1) % 10\n            result += temp2\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124295,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpa_fg5mzt.scala:10:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtemp\u001b[0m = tup.clone\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mmethod\u001b[0m \u001b[35mclone\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mObject\u001b[0m cannot be accessed as a member of (tup : List[Long]) from module class Problem$.\n\u001b[31m   |\u001b[0m Access to protected \u001b[33mmethod\u001b[0m \u001b[35mclone\u001b[0m not permitted because prefix type List[Long]\n\u001b[31m   |\u001b[0m does not conform to \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m where the access takes place\n\u001b[31m\u001b[31m-- Error: /tmp/tmpa_fg5mzt.scala:13:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtemp2\u001b[0m = tup.clone\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mmethod\u001b[0m \u001b[35mclone\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mObject\u001b[0m cannot be accessed as a member of (tup : List[Long]) from module class Problem$.\n\u001b[31m   |\u001b[0m Access to protected \u001b[33mmethod\u001b[0m \u001b[35mclone\u001b[0m not permitted because prefix type List[Long]\n\u001b[31m   |\u001b[0m does not conform to \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m where the access takes place\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa_fg5mzt.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_adj = List(List(test_tup - 1, test_tup + 1), List(test_tup - 10, test_tup + 10))\n        val test_list_diag = List(List(test_tup - 11, test_tup - 9), List(test_tup + 9, test_tup + 11))\n        val test_list_all = List(test_list, test_list_adj, test_list_diag)\n        test_list_all.flatten\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124295,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpu46d3vwe.scala:10:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        test_list_all.flatten\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0mno given instance of type List[Long | List[Long]] => IterableOnce[B] was found for parameter toIterableOnce of \u001b[33mmethod\u001b[0m \u001b[35mflatten\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mStrictOptimizedIterableOps\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mwhere:    B is a type variable with constraint <: List[Long]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu46d3vwe.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu46d3vwe.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124295,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe4wjing2.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe4wjing2.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_adj = List(test_list)\n        val test_list_adj_2 = List(test_list_adj)\n        val test_list_adj_3 = List(test_list_adj_2)\n        val test_list_adj_4 = List(test_list_adj_3)\n        val test_list_adj_5 = List(test_list_adj_4)\n        val test_list_adj_6 = List(test_list_adj_5)\n        val test_list_adj_7 = List(test_list_adj_6)\n        val test_list_adj_8 = List(test_list_adj_7)\n        val test_list_adj_9 = List(test_list_adj_8)\n        val test_list_adj_10 = List(test_list_adj_9)\n        val test_list_adj_11 = List(test_list_adj_10)\n        val test_list_adj_12 = List(test_list_adj_11)\n        val test_list_adj_13 = List(test_list_adj_12)\n        val test_list_adj_14 = List(test_list_adj_13)\n        val test_list_adj_15 = List(test_list_adj_14)\n        val test_list_adj_16 = List(test_list_adj_15)\n        val test_list_adj_17 = List(test_list_adj_16)\n        val test_list_adj_18 = List(test_list_adj_17)\n        val test_list_adj_19 = List(test_list_adj_18)\n        val test_list_adj_20 = List(test_list_adj_19)\n        val test_list_adj_21 = List(test_list_adj_20)\n        val test_list_adj_22 = List(test_list_adj_21)\n        val test_list_adj_23 = List(test_list_adj_22)\n        val test_list_adj_24 = List(test_list_adj_23)\n       \n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44y3g2n.scala:32:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44y3g2n.scala:34:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44y3g2n.scala:35:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        var result = List[List[Long]]()\n        for (i <- x_list) {\n            for (j <- y_list) {\n                if (i != x || j != y) {\n                    result = List(i, j) :: result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwdjssoo.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwdjssoo.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100000\n        val y = test_tup % 100000\n        val tup_list = List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n        return tup_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqs9kyfe9.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqs9kyfe9.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var res = List[List[Long]]()\n        var x = 0L\n        var y = 0L\n        while (tup > 0) {\n            var digit = tup % 10\n            if (digit == 0) {\n                x += 1\n                y += 1\n            } else {\n                x += 1\n                y += digit\n            }\n            res = List(List(x, y)) ::: res\n            tup /= 10\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124316,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8dgy4h_d.scala:25:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8dgy4h_d.scala:26:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124318,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0z0ht921.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0z0ht921.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coordinates = for (i <- x_list; j <- y_list) yield List(i, j)\n        coordinates.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnksjy_5o.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnksjy_5o.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_list_comb = x_list.combinations(2).toList\n        val y_list_comb = y_list.combinations(2).toList\n        val x_list_comb_flat = x_list_comb.map(x => x.flatMap(List(_)))\n        val y_list_comb_flat = y_list_comb.map(x => x.flatMap(List(_)))\n        val x_list_comb_flat_tup = x_list_comb_flat.map(x => (x(0), x(1)))\n        val y_list_comb_flat_tup = y_list_comb_flat.map(x => (x(0), x(1)))\n        val x_list_comb_flat_tup_map = x_list_comb_flat_tup.map(x => x._1 * 100 + x._2)\n        val y_list_comb_flat_tup_map = y_list_comb_flat_tup.map(x => x._1 * 100 + x._2)\n        val x_list_comb_flat_tup_map_filter = x_list_comb_flat_tup_map.filter(x => x >= 0 && x < 10000)\n        val y_list_comb_flat_tup_map_filter = y_list_comb_flat_tup_map.filter(x => x >= 0 && x < 10000)\n        val x_list_comb_flat_tup_map_filter_list = x_list_comb_flat_tup_map_filter.map(x => List(x))\n        val y_list_comb_flat_tup_map_filter_list = y_list_comb_flat_tup_map_filter.map(x => List(x))\n        val x_list_comb_flat_tup_map_filter_list_y = x_list_comb_flat_\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124318,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmposmkmt5i.scala:22:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx_list_comb_flat_tup_map_filter_list_y\u001b[0m = x_list_comb_flat_\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: x_list_comb_flat_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposmkmt5i.scala:23:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposmkmt5i.scala:25:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposmkmt5i.scala:26:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toL",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val coordinates = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124316,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwitm8kku.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwitm8kku.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (x_val <- x_list; y_val <- y_list) yield List(x_val, y_val)\n        return coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124316,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2j565qbh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2j565qbh.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var result = List[List[Long]]()\n        val x = test_tup / 100\n        val y = test_tup % 100\n        for (i <- -1 to 1) {\n            for (j <- -1 to 1) {\n                if (i != 0 || j != 0) {\n                    result = List(x + i, y + j) :: result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124318,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfd2wcga9.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfd2wcga9.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var x = 0L\n        var y = 0L\n        var x_list = List[Long]()\n        var y_list = List[Long]()\n        var result = List[List[Long]]()\n        while (tup > 0) {\n            x = tup % 10\n            tup = tup / 10\n            x_list = x :: x_list\n        }\n        while (tup > 0) {\n            y = tup % 10\n            tup = tup / 10\n            y_list = y :: y_list\n        }\n        result = x_list :: result\n        result = y_list :: result\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124318,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ikriccv.scala:27:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ikriccv.scala:28:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val l = List(List(x+1, y), List(x-1, y), List(x, y+1), List(x, y-1))\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124318,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfzy7hc5w.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfzy7hc5w.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124318,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu31g1o9.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu31g1o9.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val lst = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        lst.filter(e => e(0) >= 0 && e(1) >= 0 && e(0) < 8 && e(1) < 8)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124318,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvm7coipb.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvm7coipb.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var test_list = List[List[Long]]()\n        for (i <- -1 to 1) {\n            for (j <- -1 to 1) {\n                if (i != 0 || j != 0) {\n                    test_list = List(List(test_tup._1 + i, test_tup._2 + j)) ::: test_list\n                }\n            }\n        }\n        test_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfuuq08ej.scala:10:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    test_list = List(List(test_tup._1 + i, test_tup._2 + j)) ::: test_list\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        value _1 is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfuuq08ej.scala:10:68 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    test_list = List(List(test_tup._1 + i, test_tup._2 + j)) ::: test_list\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        value _2 is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfuuq08ej.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfuuq08ej.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqf_ksnif.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqf_ksnif.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwnnfryf.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwnnfryf.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510721,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq3e2nt28.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq3e2nt28.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_tup_list = List(test_tup)\n        val test_tup_list_list = List(test_tup_list)\n        test_tup_list_list\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124318,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbeb6_4bn.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbeb6_4bn.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124295,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe4wjing2.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe4wjing2.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for (i <- x_list; j <- y_list) yield List(i, j)\n        result.filter(x => (x(0) >= 0 && x(1) >= 0))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphaea54le.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphaea54le.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_coordinates = List(x - 1, x, x + 1)\n        val y_coordinates = List(y - 1, y, y + 1)\n        val coordinates = x_coordinates.flatMap(x => y_coordinates.map(y => List(x, y)))\n        coordinates.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnxvbls84.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnxvbls84.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_coords = List(x - 1, x, x + 1)\n        val y_coords = List(y - 1, y, y + 1)\n        val coords = for (i <- x_coords; j <- y_coords) yield List(i, j)\n        coords.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd84w6fz5.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd84w6fz5.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coordinates = for (i <- x_list; j <- y_list) yield List(i, j)\n        coordinates.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7qqiiddk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7qqiiddk.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val adj_coords = List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n        return adj_coords\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj3ifsaes.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj3ifsaes.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var list = List[Long]()\n        while (tup > 0) {\n            list = (tup % 10) :: list\n            tup /= 10\n        }\n        var result = List[List[Long]]()\n        for (i <- 0 to list.length - 1) {\n            var temp = List[Long]()\n            for (j <- 0 to list.length - 1) {\n                if (i != j) {\n                    temp = list(j) :: temp\n                }\n            }\n            result = temp.reverse :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptakwfw3o.scala:25:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptakwfw3o.scala:26:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val test_list = List(test_tup)\n        val test_list_2 = List(test_tup + 1, test_tup - 1)\n        val test_list_3 = List(test_tup + 2, test_tup - 2)\n        val test_list_4 = List(test_tup + 3, test_tup - 3)\n        val test_list_5 = List(test_tup + 4, test_tup - 4)\n        val test_list_6 = List(test_tup + 5, test_tup - 5)\n        val test_list_7 = List(test_tup + 6, test_tup - 6)\n        val test_list_8 = List(test_tup + 7, test_tup - 7)\n        val test_list_9 = List(test_tup + 8, test_tup - 8)\n        val test_list_10 = List(test_tup + 9, test_tup - 9)\n        val test_list_11 = List(test_tup + 10, test_tup - 10)\n        val test_list_12 = List(test_tup + 11, test_tup - 11)\n        val test_list_13 = List(test_tup + 12, test_tup - 12)\n        val test_list_14 = List(test_tup + 13, test_tup - 13)\n        val test_list_15 = List(test_tup + 14, test_tup - 14)\n        val test_list_16 = List(test_tup + 15, test_tup - 15)\n        val test_list_17 = List(test_tup + 16, test_tup - 16)\n        val test_list_18 = List(test_tup + 17, test_tup - 17)\n        val test_list_19 = List(test_tup + 18, test_tup - 18)\n        val test_list_20 = List(test_tup + 19, test_tup - 19)\n        val test_list_21 = List(test_tup + 20, test_tup -\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124321,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbh_abg81.scala:26:57 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_21\u001b[0m = List(test_tup + \u001b[31m20\u001b[0m, test_tup -\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbh_abg81.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbh_abg81.scala:29:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbh_abg81.scala:30:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var list_of_coordinates = List[List[Long]]()\n        val x = test_tup / 100\n        val y = test_tup % 100\n        list_of_coordinates = List(List(x, y - 1), List(x, y + 1), List(x - 1, y), List(x + 1, y))\n        return list_of_coordinates\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7tjnn8wm.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7tjnn8wm.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1665510698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwnnfryf.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbwnnfryf.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        List(List(x + 1, y), List(x - 1, y), List(x, y + 1), List(x, y - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9vanqph.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb9vanqph.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val test_list = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        test_list.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpthdyl8ve.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpthdyl8ve.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var tup = test_tup\n        var x = 0L\n        var y = 0L\n        while (tup > 0) {\n            x += 1\n            if (tup % 2 == 1) y += 1\n            tup /= 2\n        }\n        var result = List[List[Long]]()\n        for (i <- -1 to 1) {\n            for (j <- -1 to 1) {\n                if (i != 0 || j != 0) {\n                    var new_x = x + i\n                    var new_y = y + j\n                    if (new_x >= 0 && new_y >= 0) {\n                        var new_tup = 0L\n                        for (k <- 0 to new_x) {\n                            new_tup *= 2\n                            if (k == new_y) new_tup += 1\n                        }\n                        result = List(List(new_tup, 1L)) ::: result\n                    }\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124321,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mqkd04g.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                        \u001b[33mfor\u001b[0m (k <- \u001b[31m0\u001b[0m to new_x) {\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (new_x : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mqkd04g.scala:34:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mqkd04g.scala:35:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toL",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        var result = List[List[Long]]()\n        var x = test_tup / 1000000\n        var y = test_tup % 1000000\n        result = List(List(x, y + 1), List(x, y - 1), List(x + 1, y), List(x - 1, y))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9_rriszd.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9_rriszd.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val result = for {\n            i <- x_list\n            j <- y_list\n            if (i != x || j != y)\n        } yield List(i, j)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124321,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppbqfw0ce.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppbqfw0ce.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup / 100\n        val y = test_tup % 100\n        val lst = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        lst.filter(x => x(0) >= 0 && x(1) >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc2r9of5k.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc2r9of5k.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_coords = List(x - 1, x, x + 1)\n        val y_coords = List(y - 1, y, y + 1)\n        val coords = for (i <- x_coords; j <- y_coords) yield List(i, j)\n        coords.filter(x => x != List(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
      "timestamp": 1666124208,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd84w6fz5.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(getCoordinates((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd84w6fz5.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(getCoordinates((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((List[\u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]](List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}