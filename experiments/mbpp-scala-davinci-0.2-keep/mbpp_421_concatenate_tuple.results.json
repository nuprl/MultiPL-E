{
  "name": "mbpp_421_concatenate_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(i) => i.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510287,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlf_blhp.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlf_blhp.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlf_blhp.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(lng) => lng.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510288,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvwui1la_.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvwui1la_.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvwui1la_.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(i) => i.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510287,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlf_blhp.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlf_blhp.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlf_blhp.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        var result = \"\"\n        test_tup match {\n            case Left(s) => result = s\n            case Right(l) => result = l.toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqd7yn4z.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqd7yn4z.scala:15:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqd7yn4z.scala:16:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx5lwmq5.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0l85vhw.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gf8keks.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
      "timestamp": 1665510284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ID\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"UTS\"\u001b[0m)).equals((\u001b[31m\"ID-is-4-UTS\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"QWE\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"RTY\"\u001b[0m)).equals((\u001b[31m\"QWE-is-4-RTY\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgf5nw5l.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(concatenateTuple((\u001b[31m\"ZEN\"\u001b[0m, \u001b[31m\"is\"\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m\"OP\"\u001b[0m)).equals((\u001b[31m\"ZEN-is-4-OP\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (String, String, Long, String)\n\u001b[31m   |\u001b[0m                            Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}