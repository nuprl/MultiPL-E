{
  "name": "mbpp_399_bitwise_xor",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return test_tup1 ^ test_tup2",
    "        return test_tup1 ^ test_tup2",
    "        var result : Long = 0\n        for (i <- 0 to 63) {\n            if (test_tup1 % 2 != test_tup2 % 2) {\n                result += pow(2, i).toLong\n            }\n            test_tup1 /= 2\n            test_tup2 /= 2\n        }\n        return result",
    "        return test_tup1 ^ test_tup2",
    "        return test_tup1 ^ test_tup2",
    "        var result : Long = 0\n        var i : Int = 0\n        while (i < 64) {\n            if (((test_tup1 >> i) & 1) != ((test_tup2 >> i) & 1)) {\n                result |= (1 << i)\n            }\n            i += 1\n        }\n        return result",
    "        return test_tup1 ^ test_tup2",
    "        var result = 0L\n        for (i <- 0 to 63) {\n            if (test_tup1 % 2 != test_tup2 % 2) result += pow(2, i).toLong\n            test_tup1 /= 2\n            test_tup2 /= 2\n        }\n        return result",
    "        return test_tup1 ^ test_tup2",
    "        test_tup1 ^ test_tup2",
    "        var result : Long = 0\n        var i : Int = 0\n        while (i < 64) {\n            var bit1 : Long = (test_tup1 >> i) & 1\n            var bit2 : Long = (test_tup2 >> i) & 1\n            if (bit1 != bit2) {\n                result = result | (1 << i)\n            }\n            i += 1\n        }\n        return result",
    "        return test_tup1 ^ test_tup2",
    "        return test_tup1 ^ test_tup2",
    "        var result : Long = 0\n        for (i <- 0 to 63) {\n            var bit1 : Long = (test_tup1 >> i) & 1\n            var bit2 : Long = (test_tup2 >> i) & 1\n            if (bit1 != bit2) result |= (1 << i)\n        }\n        return result",
    "        return test_tup1 ^ test_tup2",
    "        return test_tup1 ^ test_tup2",
    "        return test_tup1 ^ test_tup2",
    "        return test_tup1 ^ test_tup2",
    "        var result : Long = 0\n        for (i <- 0 to 63) {\n            val bit1 = (test_tup1 >> i) & 1\n            val bit2 = (test_tup2 >> i) & 1\n            if (bit1 != bit2) result = result | (1 << i)\n        }\n        return result",
    "        return test_tup1 ^ test_tup2"
  ]
}