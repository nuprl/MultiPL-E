{
  "name": "mbpp_417_group_tuples",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find common first element in given list of tuple.\n    def groupTuples(Input : List[String]) : List[String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(groupTuples((List[String]((\"x\", \"y\"), (\"x\", \"z\"), (\"w\", \"t\")))).equals((List[String]((\"x\", \"y\", \"z\"), (\"w\", \"t\")))));\n    assert(groupTuples((List[String]((\"a\", \"b\"), (\"a\", \"c\"), (\"d\", \"e\")))).equals((List[String]((\"a\", \"b\", \"c\"), (\"d\", \"e\")))));\n    assert(groupTuples((List[String]((\"f\", \"g\"), (\"f\", \"g\"), (\"h\", \"i\")))).equals((List[String]((\"f\", \"g\", \"g\"), (\"h\", \"i\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val tuples = Input.map(x => x.split(\",\").toList)\n        val firstElements = tuples.map(x => x.head)\n        val grouped = firstElements.groupBy(x => x)\n        val result = grouped.map(x => x._1 + \":\" + x._2.length).toList\n        result",
    "        val map = new HashMap[String, List[String]]\n        for (tuple <- Input) {\n            val key = tuple.split(\" \")(0)\n            if (map.contains(key)) {\n                map(key) = map(key) :+ tuple\n            } else {\n                map(key) = List(tuple)\n            }\n        }\n        map.values.toList.flatten",
    "        var result = List[String]()\n        var map = Map[String, Int]()\n        for (i <- 0 until Input.length) {\n            if (map.contains(Input(i))) {\n                map(Input(i)) += 1\n            } else {\n                map += (Input(i) -> 1)\n            }\n        }\n        for ((k, v) <- map) {\n            if (v > 1) {\n                result = result :+ k\n            }\n        }\n        return result",
    "        val list = Input.map(x => (x.split(\" \")(0), x.split(\" \")(1)))\n        val map = new HashMap[String, List[String]]\n        for (tuple <- list) {\n            if (map.contains(tuple._1)) {\n                map(tuple._1) = map(tuple._1) :+ tuple._2\n            } else {\n                map(tuple._1) = List(tuple._2)\n            }\n        }\n        val result = new ListBuffer[String]\n        for ((k, v) <- map) {\n            result += (k + \" \" + v.mkString(\" \"))\n        }\n        result.toList",
    "        var map = Map[String, Int]()\n        for (i <- Input) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var result = List[String]()\n        for ((k, v) <- map) {\n            if (v > 1) {\n                result = k :: result\n            }\n        }\n        return result",
    "        val map = new HashMap[String, Int]\n        for (i <- Input) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        val result = new ListBuffer[String]\n        for ((k, v) <- map) {\n            if (v > 1) {\n                result += k\n            }\n        }\n        result.toList",
    "        Input.groupBy(x => x.split(\" \")(0)).map(x => x._1 + \" \" + x._2.size).toList",
    "        val result = new ListBuffer[String]\n        val map = new HashMap[String, Int]\n        for (i <- Input) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        for ((k, v) <- map) {\n            if (v > 1) {\n                result += k\n            }\n        }\n        result.toList",
    "        val tuples = Input.map(x => x.split(\",\").toList)\n        val firstElements = tuples.map(x => x.head)\n        val firstElementsGrouped = firstElements.groupBy(x => x)\n        val firstElementsGroupedFiltered = firstElementsGrouped.filter(x => x._2.length > 1)\n        val firstElementsGroupedFilteredSorted = firstElementsGroupedFiltered.toList.sortBy(x => x._1)\n        firstElementsGroupedFilteredSorted.map(x => x._1)",
    "        val tuples = Input.map(x => x.split(\",\"))\n        val firstElements = tuples.map(x => x(0))\n        val firstElementsGrouped = firstElements.groupBy(x => x)\n        val firstElementsGroupedFiltered = firstElementsGrouped.filter(x => x._2.length > 1)\n        val firstElementsGroupedFilteredSorted = firstElementsGroupedFiltered.toList.sortBy(x => x._1)\n        val result = firstElementsGroupedFilteredSorted.map(x => x._1)\n        return result",
    "        val tuples = Input.map(x => x.split(\",\").toList)\n        val groupedTuples = tuples.groupBy(x => x.head)\n        val result = groupedTuples.map(x => x._1 + \":\" + x._2.map(y => y.tail.mkString(\",\")).mkString(\"|\")).toList\n        result",
    "        val tuples = Input.map(x => x.split(\" \")).map(x => (x(0), x(1)))\n        val grouped = tuples.groupBy(x => x._1)\n        val result = grouped.map(x => (x._1, x._2.map(y => y._2))).map(x => x._1 + \" \" + x._2.mkString(\" \")).toList\n        result",
    "        val tuples = Input.map(x => x.split(\",\").toList)\n        val firstElements = tuples.map(x => x.head)\n        firstElements.distinct",
    "        val groups = Input.groupBy(_.split(\" \")(0))\n        groups.map(x => x._1 + \" \" + x._2.size).toList",
    "        val map = new HashMap[String, Int]()\n        for (i <- Input) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        val result = new ListBuffer[String]()\n        for (i <- map) {\n            if (i._2 > 1) {\n                result += i._1\n            }\n        }\n        result.toList",
    "        val groups = Input.groupBy(_.split(\" \")(0))\n        groups.map(x => x._1 + \" \" + x._2.length).toList",
    "        val tuples = Input.map(x => x.split(\",\").toList)\n        val firstElements = tuples.map(x => x.head)\n        val grouped = firstElements.groupBy(x => x)\n        val result = grouped.map(x => x._1 + \":\" + x._2.size).toList\n        result",
    "        val result = new ListBuffer[String]()\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until Input.size) {\n            if (map.contains(Input(i))) {\n                map(Input(i)) += 1\n            } else {\n                map(Input(i)) = 1\n            }\n        }\n        for (i <- 0 until Input.size) {\n            if (map(Input(i)) > 1) {\n                result += Input(i)\n            }\n        }\n        result.toList",
    "        var result = List[String]()\n        var map = Map[String, Int]()\n        for (i <- Input) {\n            if (map.contains(i.split(\" \")(0))) {\n                map(i.split(\" \")(0)) += 1\n            } else {\n                map(i.split(\" \")(0)) = 1\n            }\n        }\n        for ((k, v) <- map) {\n            if (v > 1) {\n                result = k :: result\n            }\n        }\n        result",
    "        val map = new HashMap[String, Int]\n        for (i <- Input) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        val list = new ListBuffer[String]\n        for ((k, v) <- map) {\n            if (v > 1) {\n                list += k\n            }\n        }\n        list.toList"
  ]
}