{
  "name": "mbpp_125_find_length",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    def findLength(string : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLength((\"11000010001\")) == (6l));\n    assert(findLength((\"10111\")) == (1l));\n    assert(findLength((\"11011101100101\")) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var max = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                max = max max abs(count)\n                count = 0\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            } else {\n                max = max max count\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = i + 1\n        }\n        var map = Map[Int, Int]()\n        map += (0 -> -1)\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (map.contains(count)) maxLength = max(maxLength, i - map(count))\n            else map += (count -> i)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val count = Array.fill[Long](n)(0)\n        var sum = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') sum -= 1\n            else sum += 1\n            count(i) = sum\n        }\n        val map = Map[Long, Long]()\n        var max = 0L\n        for (i <- 0 until n) {\n            if (count(i) == 0) max = max max (i + 1)\n            else if (map.contains(count(i))) max = max max (i - map(count(i)))\n            else map += (count(i) -> i)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n            else {\n                var j = i + 1\n                while (j < string.length && count != 0) {\n                    if (string(j) == '0') count += 1\n                    else count -= 1\n                    if (count == 0) maxLength = max(maxLength, j - i)\n                    j += 1\n                }\n            }\n        }\n        maxLength",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        val zeroCount = new Array[Long](n + 1)\n        val oneCount = new Array[Long](n + 1)\n        for (i <- 0 until n) {\n            zeroCount(i + 1) = zeroCount(i) + (if (string(i) == '0') 1 else 0)\n            oneCount(i + 1) = oneCount(i) + (if (string(i) == '1') 1 else 0)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val diff = abs(zeroCount(j) - zeroCount(i) - (oneCount(j) - oneCount(i)))\n                max = max max diff\n            }\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '1') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val count = Array.fill(n + 1)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '0') count(i + 1) = count(i) + 1\n            else count(i + 1) = count(i) - 1\n        }\n        val map = HashMap[Int, Int]()\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(count(i))) max = max max (i - map(count(i)))\n            else map(count(i)) = i\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max"
  ]
}