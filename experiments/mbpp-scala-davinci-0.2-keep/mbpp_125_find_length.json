{
  "name": "mbpp_125_find_length",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    def findLength(string : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLength((\"11000010001\")) == (6l));\n    assert(findLength((\"10111\")) == (1l));\n    assert(findLength((\"11011101100101\")) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var max = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                max = max max abs(count)\n                count = 0\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            } else {\n                max = max max count\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = i + 1\n        }\n        var map = Map[Int, Int]()\n        map += (0 -> -1)\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (map.contains(count)) maxLength = max(maxLength, i - map(count))\n            else map += (count -> i)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val count = Array.fill[Long](n)(0)\n        var sum = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') sum -= 1\n            else sum += 1\n            count(i) = sum\n        }\n        val map = Map[Long, Long]()\n        var max = 0L\n        for (i <- 0 until n) {\n            if (count(i) == 0) max = max max (i + 1)\n            else if (map.contains(count(i))) max = max max (i - map(count(i)))\n            else map += (count(i) -> i)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n            else {\n                var j = i + 1\n                while (j < string.length && count != 0) {\n                    if (string(j) == '0') count += 1\n                    else count -= 1\n                    if (count == 0) maxLength = max(maxLength, j - i)\n                    j += 1\n                }\n            }\n        }\n        maxLength",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        val zeroCount = new Array[Long](n + 1)\n        val oneCount = new Array[Long](n + 1)\n        for (i <- 0 until n) {\n            zeroCount(i + 1) = zeroCount(i) + (if (string(i) == '0') 1 else 0)\n            oneCount(i + 1) = oneCount(i) + (if (string(i) == '1') 1 else 0)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val diff = abs(zeroCount(j) - zeroCount(i) - (oneCount(j) - oneCount(i)))\n                max = max max diff\n            }\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '1') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val count = Array.fill(n + 1)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '0') count(i + 1) = count(i) + 1\n            else count(i + 1) = count(i) - 1\n        }\n        val map = HashMap[Int, Int]()\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(count(i))) max = max max (i - map(count(i)))\n            else map(count(i)) = i\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var maxLength : Long = 0\n        var count : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            maxLength = max(maxLength, count)\n        }\n        maxLength",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val ones = new Array[Long](n)\n        val zeros = new Array[Long](n)\n        if (string(0) == '1') ones(0) = 1\n        else zeros(0) = 1\n        for (i <- 1 until n) {\n            if (string(i) == '1') {\n                ones(i) = ones(i - 1) + 1\n                zeros(i) = zeros(i - 1)\n            } else {\n                ones(i) = ones(i - 1)\n                zeros(i) = zeros(i - 1) + 1\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            val diff = abs(ones(i) - zeros(i))\n            if (diff > max) max = diff\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                count += 1\n            } else {\n                count -= 1\n            }\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var maxLength : Long = 0\n        var count0 : Long = 0\n        var count1 : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count0 += 1\n            else count1 += 1\n            maxLength = max(maxLength, abs(count0 - count1))\n        }\n        maxLength",
    "        var max : Long = 0\n        var count : Long = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        var i = 0\n        while (i < string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n                i += 1\n            }\n            else {\n                max = max max (i - count + 1)\n                i += 1\n            }\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            arr(i)(i) = if (string(i) == '0') -1 else 1\n        }\n        for (i <- 0 until n; j <- i + 1 until n) {\n            arr(i)(j) = arr(i)(j - 1) + (if (string(j) == '0') -1 else 1)\n        }\n        val map = HashMap[Long, Int]()\n        var max = 0\n        for (i <- 0 until n; j <- i until n) {\n            val sum = arr(i)(j)\n            if (sum == 0) {\n                max = max max (j - i + 1)\n            } else {\n                if (map.contains(sum)) {\n                    max = max max (j - map(sum))\n                } else {\n                    map(sum) = j\n                }\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0L\n        var count = 0L\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0L\n        var count = 0L\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            currentLength += 1\n            if (zeroCount == oneCount) {\n                maxLength = max(maxLength, currentLength)\n            }\n            else if (zeroCount > oneCount) {\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '1') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = new Array[Long](n)\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            arr(i) = count\n        }\n        val map = new HashMap[Long, Long]()\n        var max = 0L\n        for (i <- 0 until n) {\n            if (arr(i) == 0) max = max max (i + 1)\n            else if (map.contains(arr(i))) max = max max (i - map(arr(i)))\n            else map += (arr(i) -> i)\n        }\n        max",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            max = max max abs(count)\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            maxLength = max(maxLength, count)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                count += 1\n            } else {\n                count -= 1\n            }\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val zeros = Array.fill(n)(0L)\n        val ones = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            if (string(i) == '0') {\n                zeros(i) = 1 + (if (i > 0) zeros(i - 1) else 0)\n                ones(i) = if (i > 0) ones(i - 1) else 0\n            } else {\n                zeros(i) = if (i > 0) zeros(i - 1) else 0\n                ones(i) = 1 + (if (i > 0) ones(i - 1) else 0)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val z = if (i == 0) zeros(j) else zeros(j) - zeros(i - 1)\n                val o = if (i == 0) ones(j) else ones(j) - ones(i - 1)\n                val diff = abs(z - o)\n                if (diff > max) max = diff\n            }\n        }\n        max",
    "        val n = string.length\n        val arr = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        var sum = 0\n        val map = new HashMap[Int, Int]\n        var max = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n            if (sum == 0) max = i + 1\n            else if (map.contains(sum)) max = max max (i - map(sum))\n            else map(sum) = i\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        var max = 0\n        var sum = 0\n        val map = new HashMap[Int, Int]\n        for (i <- 0 until n) {\n            sum += arr(i)\n            if (sum == 0) max = i + 1\n            if (map.contains(sum)) max = max.max(i - map(sum))\n            else map(sum) = i\n        }\n        max",
    "        val n = string.length\n        val zeros = Array.fill(n)(0)\n        val ones = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '0') {\n                zeros(i) = if (i == 0) 1 else zeros(i - 1) + 1\n                ones(i) = if (i == 0) 0 else ones(i - 1)\n            } else {\n                zeros(i) = if (i == 0) 0 else zeros(i - 1)\n                ones(i) = if (i == 0) 1 else ones(i - 1) + 1\n            }\n        }\n        var max = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val z = zeros(j) - (if (i == 0) 0 else zeros(i - 1))\n                val o = ones(j) - (if (i == 0) 0 else ones(i - 1))\n                max = max max abs(z - o)\n            }\n        }\n        max",
    "        var maxLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount < oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = new Array[Int](n + 1)\n        for (i <- 0 until n) {\n            arr(i + 1) = arr(i) + (if (string(i) == '0') 1 else -1)\n        }\n        val map = new HashMap[Int, Int]\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(arr(i))) {\n                max = max max (i - map(arr(i)))\n            } else {\n                map(arr(i)) = i\n            }\n        }\n        max",
    "        var max = 0\n        var current = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') current += 1\n            else current -= 1\n            if (current < 0) current = 0\n            max = max max current\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = new Array[Int](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        val map = new HashMap[Int, Int]\n        var max = 0\n        var sum = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n            if (sum == 0) max = i + 1\n            else if (map.contains(sum)) max = max max (i - map(sum))\n            else map += (sum -> i)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        var max = 0L\n        var sum = 0L\n        val map = new HashMap[Long, Int]\n        for (i <- 0 until n) {\n            sum += arr(i)\n            if (sum == 0) max = max max (i + 1)\n            else if (map.contains(sum)) max = max max (i - map(sum))\n            else map(sum) = i\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = i + 1\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val zeroCount = new Array[Int](n)\n        val oneCount = new Array[Int](n)\n        if (string(0) == '0') zeroCount(0) = 1 else oneCount(0) = 1\n        for (i <- 1 until n) {\n            if (string(i) == '0') {\n                zeroCount(i) = zeroCount(i - 1) + 1\n                oneCount(i) = oneCount(i - 1)\n            } else {\n                zeroCount(i) = zeroCount(i - 1)\n                oneCount(i) = oneCount(i - 1) + 1\n            }\n        }\n        var max = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val zeros = zeroCount(j) - zeroCount(i) + (if (string(i) == '0') 1 else 0)\n                val ones = oneCount(j) - oneCount(i) + (if (string(i) == '1') 1 else 0)\n                max = max max abs(zeros - ones)\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n        }\n        var map = Map[Int, Int]()\n        map += (0 -> -1)\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (map.contains(count)) maxLength = max(maxLength, i - map(count))\n            else map += (count -> i)\n        }\n        maxLength",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n        }\n        val map = new HashMap[Int, Int]\n        map(0) = -1\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (map.contains(count)) maxLength = max(maxLength, i - map(count))\n            else map(count) = i\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = i + 1\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        val diff = Array.fill[Long](n)(0)\n        var max = 0L\n        for (i <- 0 until n) {\n            if (string(i) == '0') diff(i) = -1\n            else diff(i) = 1\n            if (i > 0) diff(i) += diff(i - 1)\n            max = max max abs(diff(i))\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') {\n                zeroCount += 1\n            } else {\n                oneCount += 1\n            }\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) {\n                    maxLength = currentLength\n                }\n            }\n        }\n        for (i <- 1 to string.length - 1) {\n            if (string(i - 1) == '0') {\n                zeroCount -= 1\n            } else {\n                oneCount -= 1\n            }\n            if (string(string.length - i) == '0') {\n                zeroCount += 1\n            } else {\n                oneCount += 1\n            }\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) {\n                    maxLength = currentLength\n                }\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count == 0) maxLength = i + 1\n        }\n        var map = Map[Int, Int]()\n        map += (0 -> -1)\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (map.contains(count)) {\n                maxLength = max(maxLength, i - map(count))\n            } else map += (count -> i)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                count += 1\n            } else {\n                count -= 1\n            }\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n        }\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count != 0) {\n                var j = i + 1\n                while (j < string.length) {\n                    if (string(j) == '0') count += 1\n                    else count -= 1\n                    if (count == 0) maxLength = max(maxLength, j - i + 1)\n                    j += 1\n                }\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var maxLength : Long = 0\n        var zeroCount : Long = 0\n        var oneCount : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n                if (string(i) == '0') zeroCount += 1\n                else oneCount += 1\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount < oneCount) {\n                zeroCount = 0\n                oneCount = 0\n                if (string(i) == '0') zeroCount += 1\n                else oneCount += 1\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n        }\n        count = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, string.length - i)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                count += 1\n            } else {\n                count -= 1\n            }\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            } else {\n                max = max.max(count)\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            } else {\n                max = max.max(count)\n            }\n        }\n        max",
    "        var maxLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount > oneCount) {\n                oneCount = 0\n                zeroCount = 1\n            }\n            else {\n                zeroCount = 0\n                oneCount = 1\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount > oneCount) {\n                oneCount = 0\n                zeroCount = 1\n            }\n            else {\n                zeroCount = 0\n                oneCount = 1\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') zeroCount += 1 else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength += 1\n                maxLength = max(maxLength, currentLength)\n            } else {\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        var max : Long = 0\n        var count : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val arr = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '1') arr(i) = 1\n            else arr(i) = -1\n        }\n        val prefix = Array.fill(n)(0)\n        prefix(0) = arr(0)\n        for (i <- 1 until n) prefix(i) = prefix(i - 1) + arr(i)\n        val map = new HashMap[Int, Int]\n        var max = 0\n        for (i <- 0 until n) {\n            if (prefix(i) == 0) max = i + 1\n            else if (map.contains(prefix(i))) max = max max (i - map(prefix(i)))\n            else map(prefix(i)) = i\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) max = i + 1\n        }\n        var map = Map[Int, Int]()\n        map += (0 -> -1)\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (map.contains(count)) max = max.max(i - map(count))\n            else map += (count -> i)\n        }\n        max",
    "        val n = string.length\n        val a = Array.fill(n + 1)(0)\n        for (i <- 1 to n) {\n            a(i) = a(i - 1) + (if (string(i - 1) == '0') 1 else -1)\n        }\n        val map = Map[Int, Int]()\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(a(i))) {\n                max = max.max(i - map(a(i)))\n            } else {\n                map += (a(i) -> i)\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                count -= 1\n            } else {\n                count += 1\n            }\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max : Long = 0\n        var count : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val arr = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        val map = new HashMap[Long, Long]\n        var sum = 0\n        var max = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n            if (sum == 0) max = i + 1\n            if (map.contains(sum)) max = max max (i - map(sum))\n            else map += (sum -> i)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount < oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n        }\n        var map = Map[Int, Int]()\n        map += (0 -> -1)\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (map.contains(count)) maxLength = max(maxLength, i - map(count))\n            else map += (count -> i)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                max = max max (-count)\n                count = 0\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                zeroCount += 1\n                currentLength += 1\n            } else {\n                oneCount += 1\n                currentLength -= 1\n            }\n            if (currentLength < 0) {\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n            if (currentLength > maxLength) {\n                maxLength = currentLength\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = i + 1\n        }\n        var hash = new HashMap[Int, Int]\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (hash.contains(count)) maxLength = max(maxLength, i - hash(count))\n            else hash += (count -> i)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '1') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val diff = new Array[Long](n)\n        diff(0) = if (string(0) == '0') 1 else -1\n        for (i <- 1 until n) {\n            diff(i) = diff(i - 1) + (if (string(i) == '0') 1 else -1)\n        }\n        val map = new HashMap[Long, Long]\n        var max = 0L\n        for (i <- 0 until n) {\n            if (diff(i) == 0) max = i + 1\n            else if (map.contains(diff(i))) max = max max (i - map(diff(i)))\n            else map(diff(i)) = i\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val count = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '1') count(i) = 1\n            if (i > 0) count(i) += count(i - 1)\n        }\n        var max = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val zeros = (i - 1) - (if (i > 0) count(i - 1) else 0)\n                val ones = count(j) - count(i - 1)\n                val diff = abs(zeros - ones)\n                if (diff > max) max = diff\n            }\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        var map = Map[Int, Int]()\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (map.contains(count)) maxLength = max(maxLength, i - map(count))\n            else map += (count -> i)\n        }\n        maxLength",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n        }\n        count = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, string.length - i)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '1') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            } else {\n                max = max.max(count)\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = i + 1\n        }\n        maxLength",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count == 0) maxLength = i + 1\n        }\n        var map = Map[Int, Int]()\n        map(0) = -1\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (map.contains(count)) maxLength = max(maxLength, i - map(count))\n            else map(count) = i\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                max = max max (-count)\n                count = 0\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var maxLength : Long = 0\n        var currentLength : Long = 0\n        var zeroCount : Long = 0\n        var oneCount : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) maxLength = currentLength\n            }\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) maxLength = currentLength\n            }\n            else if (zeroCount < oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                max = max max (-count)\n                count = 0\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '1') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = i + 1\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        val count = Array.fill(n + 1)(0)\n        for (i <- 1 to n) {\n            count(i) = count(i - 1) + (if (string(i - 1) == '1') 1 else -1)\n        }\n        val map = new HashMap[Int, Int]\n        var result = 0\n        for (i <- 0 to n) {\n            if (map.contains(count(i))) {\n                result = max(result, i - map(count(i)))\n            } else {\n                map += (count(i) -> i)\n            }\n        }\n        result",
    "        val n = string.length\n        val arr = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        val prefixSum = new Array[Long](n)\n        prefixSum(0) = arr(0)\n        for (i <- 1 until n) prefixSum(i) = prefixSum(i - 1) + arr(i)\n        val map = new HashMap[Long, Int]\n        var max = 0\n        for (i <- 0 until n) {\n            if (prefixSum(i) == 0) max = i + 1\n            else {\n                if (map.contains(prefixSum(i))) max = max max (i - map(prefixSum(i)))\n                else map(prefixSum(i)) = i\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val arr = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        var max = 0L\n        var sum = 0L\n        val map = new HashMap[Long, Int]\n        for (i <- 0 until n) {\n            sum += arr(i)\n            if (sum == 0) max = i + 1\n            if (map.contains(sum)) max = max max (i - map(sum))\n            else map(sum) = i\n        }\n        max",
    "        var max = 0L\n        var count = 0L\n        for (i <- 0 until string.length) {\n            if (string(i) == '1') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength += 1\n                maxLength = max(maxLength, currentLength)\n            } else if (zeroCount > oneCount) {\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        currentLength = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount + 1) {\n                currentLength += 1\n                maxLength = max(maxLength, currentLength)\n            } else if (zeroCount > oneCount + 1) {\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val zeros = Array.fill(n)(0)\n        val ones = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '0') {\n                if (i == 0) zeros(i) = 1\n                else zeros(i) = zeros(i - 1) + 1\n                ones(i) = ones(i - 1)\n            }\n            else {\n                if (i == 0) ones(i) = 1\n                else ones(i) = ones(i - 1) + 1\n                zeros(i) = zeros(i - 1)\n            }\n        }\n        var max = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val z = if (i == 0) zeros(j) else zeros(j) - zeros(i - 1)\n                val o = if (i == 0) ones(j) else ones(j) - ones(i - 1)\n                val diff = abs(z - o)\n                if (diff > max) max = diff\n            }\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n            else if (count < 0) count = 0\n        }\n        maxLength",
    "        var max = 0\n        var zeros = 0\n        var ones = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeros += 1\n            else ones += 1\n            if (zeros == ones) max = max max (zeros + ones)\n        }\n        max",
    "        val n = string.length\n        val zeroCount = new Array[Long](n)\n        val oneCount = new Array[Long](n)\n        if (string(0) == '0') zeroCount(0) = 1\n        else oneCount(0) = 1\n        for (i <- 1 until n) {\n            if (string(i) == '0') {\n                zeroCount(i) = zeroCount(i - 1) + 1\n                oneCount(i) = oneCount(i - 1)\n            }\n            else {\n                zeroCount(i) = zeroCount(i - 1)\n                oneCount(i) = oneCount(i - 1) + 1\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val zeros = zeroCount(j) - (if (i == 0) 0 else zeroCount(i - 1))\n                val ones = oneCount(j) - (if (i == 0) 0 else oneCount(i - 1))\n                max = max max abs(zeros - ones)\n            }\n        }\n        max",
    "        val n = string.length\n        val array = Array.fill(n + 1)(0)\n        for (i <- 1 to n) {\n            array(i) = array(i - 1) + (if (string(i - 1) == '0') -1 else 1)\n        }\n        val map = HashMap[Int, Int]()\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(array(i))) {\n                max = max max (i - map(array(i)))\n            } else {\n                map(array(i)) = i\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        val sum = Array.ofDim[Long](n)\n        sum(0) = arr(0)\n        for (i <- 1 until n) sum(i) = sum(i - 1) + arr(i)\n        val map = new HashMap[Long, Int]\n        var max = 0\n        for (i <- 0 until n) {\n            if (sum(i) == 0) max = i + 1\n            else {\n                if (map.contains(sum(i))) max = max max (i - map(sum(i)))\n                else map.put(sum(i), i)\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max"
  ]
}