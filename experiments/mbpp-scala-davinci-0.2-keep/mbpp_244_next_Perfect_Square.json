{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var n = N\n        while (true) {\n            n += 1\n            if (sqrt(n) == floor(sqrt(n))) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1L\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var n = N\n        while(true) {\n            n += 1\n            if(sqrt(n) == floor(sqrt(n))) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var n = N\n        while(n % 2 == 0) n /= 2\n        if(n % 2 == 1) return -1\n        var i = 1\n        while(i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) {\n            n += 1\n        }\n        return n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (sqrt(n) % 1 == 0) return n\n        }\n        return -1",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % 2 == 0) n /= 2\n        if (n % 2 == 1) return -1\n        var i = 3\n        while (i <= sqrt(n)) {\n            if (n % i == 0) return -1\n            i += 2\n        }\n        return n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N)\n        if (sqrtN % 1 == 0) {\n            return (sqrtN + 1) * (sqrtN + 1)\n        }\n        else {\n            return (ceil(sqrtN) * ceil(sqrtN)).toLong\n        }",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        return n",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        if (N < 0) return -1\n        var n = N\n        while (n % 2 == 0) n /= 2\n        if (n % 2 == 1) return -1\n        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var i = 1L\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % 2 == 0) n /= 2\n        if (n % 2 == 1) return -1\n        var i = 3\n        while (i * i <= n) {\n            if (n % i == 0) return -1\n            i += 2\n        }\n        return n",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(true) {\n            if(isPerfectSquare(n)) return n\n            n += 1\n        }\n        return -1",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var n = N\n        while (sqrt(n) % 1 != 0) {\n            n += 1\n        }\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % 2 == 0) n /= 2\n        if (n % 2 == 1) return -1\n        var i = 3\n        while (i * i <= n) {\n            if (n % i == 0) return -1\n            i += 2\n        }\n        return n",
    "        var n = N\n        while (true) {\n            var sqrt = sqrt(n)\n            if (sqrt == sqrt.toInt) return n\n            n += 1\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var x = N\n        while (x % sqrt(x) != 0) {\n            x += 1\n        }\n        return x",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(n % 2 == 0) n /= 2\n        while(n % 3 == 0) n /= 3\n        while(n % 5 == 0) n /= 5\n        if(n == 1) return N\n        else return N + 1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        return n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (sqrt(n) % 1 != 0) {\n            n += 1\n        }\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var n = N\n        while (n % 2 == 0) n /= 2\n        while (n % 3 == 0) n /= 3\n        while (n % 5 == 0) n /= 5\n        if (n == 1) return N\n        var i = 1\n        while (i * i < N) i += 1\n        return i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = N + 1\n        while (i * i < N) {\n            i += 1\n        }\n        return i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var n = N\n        var i = 1\n        while (n > 0) {\n            n -= i\n            i += 2\n        }\n        i",
    "        var n = N\n        while(true) {\n            n += 1\n            if(isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var n = N\n        while (sqrt(n) % 1 != 0) {\n            n += 1\n        }\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (sqrt(n) == floor(sqrt(n))) return n\n        }\n        return 0",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == floor(sqrtN)) {\n            return (sqrtN + 1) * (sqrtN + 1)\n        }\n        return (floor(sqrtN) + 1) * (floor(sqrtN) + 1)",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var x = 1\n        while (x * x < N) x += 1\n        x * x",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var n = N\n        while (n % 2 == 0) n /= 2\n        if (n % 2 == 1) return -1\n        else {\n            var i = 1\n            while (i * i < N) i += 1\n            return i * i\n        }",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N).toLong\n        if (sqrtN * sqrtN == N) sqrtN + 1 else sqrtN + 2",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1L\n        while (i * i < N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        return n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(n % 2 == 0) n /= 2\n        if(n % 2 == 1) {\n            var i = 3\n            while(i * i <= n) {\n                if(n % i == 0) return -1\n                i += 2\n            }\n            return n\n        }\n        return -1",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % 2 == 0) n /= 2\n        while (n % 3 == 0) n /= 3\n        while (n % 5 == 0) n /= 5\n        if (n == 1) return N\n        var i = 1\n        while (true) {\n            val x = i * i\n            if (x > N) return x\n            i += 1\n        }\n        return -1",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == floor(sqrtN)) {\n            return (sqrtN + 1) * (sqrtN + 1)\n        }\n        return (floor(sqrtN) + 1) * (floor(sqrtN) + 1)",
    "        var n = N\n        while (true) {\n            n += 1\n            val sqrt = sqrt(n)\n            if (sqrt == floor(sqrt)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = ceil(sqrt(N)).toLong\n        while (n * n <= N) n += 1\n        n * n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while(i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == floor(sqrtN)) {\n            return (sqrtN + 1) * (sqrtN + 1)\n        }\n        return (floor(sqrtN) + 1) * (floor(sqrtN) + 1)",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        var result = 0L\n        while (result < N) {\n            result = i * i\n            i += 1\n        }\n        result",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var n = N\n        while (n % 2 == 0) n /= 2\n        if (n % 2 == 1) return -1\n        var i = 1\n        while (i * i <= N) {\n            if (i * i == N) return (i + 1) * (i + 1)\n            i += 1\n        }\n        return -1",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var n = N\n        while(n % 2 == 0) n /= 2\n        if(n % 2 == 1) return -1\n        var m = n / 2\n        while(m % 2 == 0) m /= 2\n        if(m % 2 == 1) return -1\n        return n",
    "        var n = N\n        while(!isPerfectSquare(n)) {\n            n += 1\n        }\n        return n",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == floor(sqrtN)) {\n            return (sqrtN + 1) * (sqrtN + 1)\n        }\n        return (floor(sqrtN) + 1) * (floor(sqrtN) + 1)",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i : Long = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            val sqrt = sqrt(n).toLong\n            if (sqrt * sqrt == n) return n\n            n += 1\n        }\n        return 0",
    "        var n = N\n        while (sqrt(n) % 1 != 0) {\n            n += 1\n        }\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1L\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        n",
    "        var i = 1\n        while(i * i < N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        var i = 1\n        while (i * i <= n) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while (true) {\n            if (isPerfectSquare(n)) return n\n            n += 1\n        }\n        return -1",
    "        var i = 1\n        while(i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % 2 == 0) n /= 2\n        if (n % 2 == 1) return -1\n        var i = 3\n        while (i * i <= n) {\n            if (n % i == 0) return -1\n            i += 2\n        }\n        n",
    "        var n = 1\n        while (n * n <= N) n += 1\n        n * n",
    "        var n = N\n        while(true) {\n            val sqrt = sqrt(n)\n            if(sqrt == floor(sqrt)) return n\n            n += 1\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N).toLong\n        if (sqrtN * sqrtN == N) sqrtN + 1 else sqrtN + 2",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var n = N\n        while (true) {\n            n += 1\n            val sqrt = sqrt(n)\n            if (sqrt == sqrt.toInt) return n\n        }\n        return -1",
    "        var i = 1\n        while(i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i < N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % 2 == 0) n /= 2\n        if (n % 2 == 1) {\n            var m = (n - 1) / 2\n            while (m % 2 == 0) m /= 2\n            if (m == 1) return N\n        }\n        return N + 1",
    "        var n = N\n        while (true) {\n            n += 1\n            if (sqrt(n) % 1 == 0) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N).toLong\n        if (sqrtN * sqrtN == N) (sqrtN + 1) * (sqrtN + 1) else -1",
    "        val sqrt = sqrt(N)\n        if (sqrt == sqrt.toInt) {\n            return (sqrt + 1) * (sqrt + 1)\n        }\n        return -1",
    "        var n = N\n        while(true) {\n            n += 1\n            if(sqrt(n) % 1 == 0) return n\n        }\n        return -1"
  ]
}