{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var n = N\n        while (true) {\n            n += 1\n            if (sqrt(n) == floor(sqrt(n))) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1L\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var n = N\n        while(true) {\n            n += 1\n            if(sqrt(n) == floor(sqrt(n))) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var n = N\n        while(n % 2 == 0) n /= 2\n        if(n % 2 == 1) return -1\n        var i = 1\n        while(i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) {\n            n += 1\n        }\n        return n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (sqrt(n) % 1 == 0) return n\n        }\n        return -1",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i"
  ]
}