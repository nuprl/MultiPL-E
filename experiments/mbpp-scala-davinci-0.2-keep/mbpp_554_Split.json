{
  "name": "mbpp_554_Split",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and only returns the odd ones.\n    def Split(list : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Split((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong))));\n    assert(Split((List[Long](10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong))).equals((List[Long](11l.toLong, 13l.toLong))));\n    assert(Split((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](7l.toLong, 9l.toLong, 1l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 1) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 1) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 1) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 1) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 1) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 1) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList = List[Long]()\n        for (i <- list) {\n            if (i % 2 != 0) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList = List[Long]()\n        for (i <- list) {\n            if (i % 2 != 0) {\n                oddList = i :: oddList\n            }\n        }\n        oddList.reverse",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 1) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList = List[Long]()\n        for (i <- list) {\n            if (i % 2 != 0) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 != 0) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        list.filter(_ % 2 == 1)",
    "        var oddList : List[Long] = List()\n        for(i <- 0 to list.length - 1) {\n            if(list(i) % 2 != 0) {\n                oddList = oddList :+ list(i)\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 1) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList = List[Long]()\n        for (i <- list) {\n            if (i % 2 != 0) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- 0 until list.length) {\n            if (list(i) % 2 == 1) {\n                oddList = oddList :+ list(i)\n            }\n        }\n        return oddList",
    "        var oddList = List[Long]()\n        for (i <- list) {\n            if (i % 2 != 0) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 1) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 != 0) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList",
    "        var oddList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 1) {\n                oddList = oddList :+ i\n            }\n        }\n        return oddList"
  ]
}