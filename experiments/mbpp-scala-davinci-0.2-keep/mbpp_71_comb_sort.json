{
  "name": "mbpp_71_comb_sort",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var gap = nums.length\n        var swapped = true\n        while (swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap * 10 / 13).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums.toList",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.25).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        return nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.247330950103979).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap != 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        val gap = nums.length\n        var swapped = true\n        var temp = 0L\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap * 10 / 13).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums.toList",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums"
  ]
}