{
  "name": "mbpp_579_find_dissimilar",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the dissimilar elements in the given two tuples.\n    def findDissimilar(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findDissimilar((3l, 4l, 5l, 6l), (5l, 7l, 4l, 10l)) == (3l, 6l, 7l, 10l));\n    assert(findDissimilar((1l, 2l, 3l, 4l), (7l, 2l, 3l, 9l)) == (1l, 4l, 7l, 9l));\n    assert(findDissimilar((21l, 11l, 25l, 26l), (26l, 34l, 21l, 36l)) == (34l, 36l, 11l, 25l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(x => x.asDigit)\n        val tup2 = test_tup2.toString.toList.map(x => x.asDigit)\n        var count = 0\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) count += 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 || tup2 > 0) {\n            if((tup1 % 10) != (tup2 % 10)) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(_.toString.toInt)\n        val tup2 = test_tup2.toString.toList.map(_.toString.toInt)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toString.toList.map(_.asDigit)\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_dissimilar = tup1_set.diff(tup2_set)\n        val tup2_dissimilar = tup2_set.diff(tup1_set)\n        val tup1_dissimilar_num = tup1_dissimilar.map(x => tup1.count(_ == x)).sum\n        val tup2_dissimilar_num = tup2_dissimilar.map(x => tup2.count(_ == x)).sum\n        tup1_dissimilar_num + tup2_dissimilar_num",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) result += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(_.toString.toInt)\n        val tup2 = test_tup2.toString.toList.map(_.toString.toInt)\n        val tup3 = tup1.diff(tup2)\n        val tup4 = tup2.diff(tup1)\n        val tup5 = tup3.union(tup4)\n        val tup6 = tup5.map(_.toString).mkString(\"\")\n        tup6.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        if (tup1 > 0) count += tup1.toString.length\n        if (tup2 > 0) count += tup2.toString.length\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var test_tup1_str = test_tup1.toString\n        var test_tup2_str = test_tup2.toString\n        var test_tup1_arr = test_tup1_str.toCharArray\n        var test_tup2_arr = test_tup2_str.toCharArray\n        var test_tup1_arr_set = test_tup1_arr.toSet\n        var test_tup2_arr_set = test_tup2_arr.toSet\n        var test_tup1_arr_set_diff = test_tup1_arr_set.diff(test_tup2_arr_set)\n        var test_tup2_arr_set_diff = test_tup2_arr_set.diff(test_tup1_arr_set)\n        var test_tup1_arr_set_diff_str = test_tup1_arr_set_diff.mkString\n        var test_tup2_arr_set_diff_str = test_tup2_arr_set_diff.mkString\n        var test_tup1_arr_set_diff_str_arr = test_tup1_arr_set_diff_str.toCharArray\n        var test_tup2_arr_set_diff_str_arr = test_tup2_arr_set_diff_str.toCharArray\n        var test_tup1_arr_set_diff_str_arr_set = test_tup1_arr_set_diff_str_arr.toSet\n        var test_tup2_arr_set_diff_str_arr_set = test_tup2_arr_set_diff_str_arr.toSet\n        var test_tup1_arr_set_diff_str_arr_set_diff = test_tup1_arr_set_diff_str_arr_set.diff(test_tup2_arr_set_diff_str_arr_set)\n        var test_tup2_arr_set_diff_str_arr_set_diff = test_tup2_arr_set_diff_str_",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10) != (tup2 % 10)) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) != (tup2 & 1)) result += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10) != (tup2 % 10)) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 && tup2 != 0) {\n            if (tup1 % 10 != tup2 % 10) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        if (tup1 != 0) {\n            while (tup1 != 0) {\n                count += 1\n                tup1 /= 10\n            }\n        }\n        if (tup2 != 0) {\n            while (tup2 != 0) {\n                count += 1\n                tup2 /= 10\n            }\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var test_tup1_str = test_tup1.toString\n        var test_tup2_str = test_tup2.toString\n        var test_tup1_str_arr = test_tup1_str.toCharArray\n        var test_tup2_str_arr = test_tup2_str.toCharArray\n        var test_tup1_str_arr_set = test_tup1_str_arr.toSet\n        var test_tup2_str_arr_set = test_tup2_str_arr.toSet\n        var test_tup1_str_arr_set_diff = test_tup1_str_arr_set.diff(test_tup2_str_arr_set)\n        var test_tup2_str_arr_set_diff = test_tup2_str_arr_set.diff(test_tup1_str_arr_set)\n        var test_tup1_str_arr_set_diff_str = test_tup1_str_arr_set_diff.mkString\n        var test_tup2_str_arr_set_diff_str = test_tup2_str_arr_set_diff.mkString\n        var test_tup1_str_arr_set_diff_str_arr = test_tup1_str_arr_set_diff_str.toCharArray\n        var test_tup2_str_arr_set_diff_str_arr = test_tup2_str_arr_set_diff_str.toCharArray\n        var test_tup1_str_arr_set_diff_str_arr_set = test_tup1_str_arr_set_diff_str_arr.toSet\n        var test_tup2_str_arr_set_diff_str_arr_set = test_tup2_str_arr_set_diff_str_arr.toSet\n        var test_tup1_str_arr_set_diff_str_arr_set_diff = test_tup1_str_arr_set_diff_str_arr_set.diff(test_t",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        count",
    "        val tup1 = test_tup1.toString.toList.map(_.toString.toLong)\n        val tup2 = test_tup2.toString.toList.map(_.toString.toLong)\n        val tup3 = tup1.toSet.intersect(tup2.toSet)\n        val tup4 = tup1.toSet.diff(tup3)\n        val tup5 = tup2.toSet.diff(tup3)\n        val tup6 = tup4.union(tup5)\n        val tup7 = tup6.toList.map(_.toString).mkString.toLong\n        return tup7",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1.toString.toList\n        var tup2 = test_tup2.toString.toList\n        var count = 0\n        for (i <- 0 to tup1.length - 1) {\n            if (tup1(i) != tup2(i)) count += 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(x => x.toString.toInt)\n        val tup2 = test_tup2.toString.toList.map(x => x.toString.toInt)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, tup1.length - 1 - i).toLong\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if (tup1 % 10 != tup2 % 10) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 : List[Int] = List()\n        var tup2 : List[Int] = List()\n        var tup1_num : Long = test_tup1\n        var tup2_num : Long = test_tup2\n        var tup1_len : Int = 0\n        var tup2_len : Int = 0\n        var tup1_sum : Int = 0\n        var tup2_sum : Int = 0\n        var tup1_prod : Int = 1\n        var tup2_prod : Int = 1\n        var tup1_min : Int = Int.MaxValue\n        var tup2_min : Int = Int.MaxValue\n        var tup1_max : Int = Int.MinValue\n        var tup2_max : Int = Int.MinValue\n        while (tup1_num > 0) {\n            tup1 = (tup1_num % 10).toInt :: tup1\n            tup1_num /= 10\n            tup1_len += 1\n        }\n        while (tup2_num > 0) {\n            tup2 = (tup2_num % 10).toInt :: tup2\n            tup2_num /= 10\n            tup2_len += 1\n        }\n        for (i <- 0 until tup1_len) {\n            tup1_sum += tup1(i)\n            tup1_prod *= tup1(i)\n            if (tup1(i) < tup1_min) tup1_min = tup1(i)\n            if (tup1(i) > tup1_max) tup1_max = tup1(i)\n        }\n        for (i <- 0 until tup2_len) {\n            tup2_sum += tup2(i)\n            tup2_prod *= tup2(i)\n            if (tup2(i) < tup2_min) tup2_min = tup2(i)\n            if (tup2(i) > tup2_max) tup2_max = tup2",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) result += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_list = tup1_diff.toList\n        val tup2_diff_list = tup2_diff.toList\n        val tup1_diff_list_str = tup1_diff_list.map(_.toString).mkString(\"\")\n        val tup2_diff_list_str = tup2_diff_list.map(_.toString).mkString(\"\")\n        val tup1_diff_list_str_int = tup1_diff_list_str.toInt\n        val tup2_diff_list_str_int = tup2_diff_list_str.toInt\n        val tup1_diff_list_str_int_str = tup1_diff_list_str_int.toString\n        val tup2_diff_list_str_int_str = tup2_diff_list_str_int.toString\n        val tup1_diff_list_str_int_str_len = tup1_diff_list_str_int_str.length\n        val tup2_diff_list_str_int_str_len = tup2_diff_list_str_int_str.length\n        val tup1_diff_list_str_int_str_len_str = tup1_diff_list_str_int_str_len.toString\n        val tup2_diff_list_str_int_str_len_str = tup2_diff_list_str_int_str_len.toString\n        val tup1_diff_list_str_int_str_len_str",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var count = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            if ((tup1 % 10) != (tup2 % 10)) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        if (tup1 > 0) {\n            while (tup1 > 0) {\n                count += 1\n                tup1 /= 10\n            }\n        }\n        if (tup2 > 0) {\n            while (tup2 > 0) {\n                count += 1\n                tup2 /= 10\n            }\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toString.toList.map(_.asDigit)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit).sorted\n        val tup2 = test_tup2.toString.toList.map(_.asDigit).sorted\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_list = tup1_diff.toList.sorted\n        val tup2_diff_list = tup2_diff.toList.sorted\n        val tup1_diff_list_str = tup1_diff_list.map(_.toString).mkString\n        val tup2_diff_list_str = tup2_diff_list.map(_.toString).mkString\n        val tup1_diff_list_str_num = tup1_diff_list_str.toLong\n        val tup2_diff_list_str_num = tup2_diff_list_str.toLong\n        if (tup1_diff_list_str_num > tup2_diff_list_str_num) tup1_diff_list_str_num else tup2_diff_list_str_num",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(_.toInt)\n        val tup2 = test_tup2.toString.toList.map(_.toInt)\n        var count = 0\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) count += 1\n        }\n        count",
    "        var tup1 : List[Int] = List()\n        var tup2 : List[Int] = List()\n        var tup1_temp : Long = test_tup1\n        var tup2_temp : Long = test_tup2\n        while (tup1_temp > 0) {\n            tup1 = (tup1_temp % 10).toInt :: tup1\n            tup1_temp /= 10\n        }\n        while (tup2_temp > 0) {\n            tup2 = (tup2_temp % 10).toInt :: tup2\n            tup2_temp /= 10\n        }\n        var result : Long = 0\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        return result",
    "        val tup1 = test_tup1.toString.toList.map(x => x.toString.toInt)\n        val tup2 = test_tup2.toString.toList.map(x => x.toString.toInt)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += 1\n        }\n        result",
    "        val tup1 = test_tup1.toString.split(\"\").map(x => x.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(x => x.toInt)\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_list = tup1_diff.toList.sorted\n        val tup2_diff_list = tup2_diff.toList.sorted\n        val tup1_diff_str = tup1_diff_list.mkString(\"\")\n        val tup2_diff_str = tup2_diff_list.mkString(\"\")\n        val tup1_diff_num = tup1_diff_str.toLong\n        val tup2_diff_num = tup2_diff_str.toLong\n        val result = tup1_diff_num - tup2_diff_num\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 != bit2) {\n                result += 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 10 != tup2 % 10) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10) != (tup2 % 10)) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        count",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toLong)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toLong)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        result",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toString.toList.map(_.asDigit)\n        var dissimilar = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) dissimilar += 1\n        }\n        dissimilar",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        val tup1 = test_tup1.toString.toList.map(_.toString.toInt)\n        val tup2 = test_tup2.toString.toList.map(_.toString.toInt)\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_dissimilar = tup1_set.diff(tup2_set)\n        val tup2_dissimilar = tup2_set.diff(tup1_set)\n        val tup1_dissimilar_sum = tup1_dissimilar.map(_.toLong).sum\n        val tup2_dissimilar_sum = tup2_dissimilar.map(_.toLong).sum\n        tup1_dissimilar_sum + tup2_dissimilar_sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) result += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result",
    "        var test_tup1_arr = test_tup1.toString.toCharArray\n        var test_tup2_arr = test_tup2.toString.toCharArray\n        var test_tup1_arr_len = test_tup1_arr.length\n        var test_tup2_arr_len = test_tup2_arr.length\n        var test_tup1_arr_len_min = min(test_tup1_arr_len, test_tup2_arr_len)\n        var test_tup1_arr_len_max = max(test_tup1_arr_len, test_tup2_arr_len)\n        var test_tup1_arr_len_diff = abs(test_tup1_arr_len - test_tup2_arr_len)\n        var test_tup1_arr_len_diff_count = 0\n        var test_tup1_arr_len_diff_count_arr = new Array[Int](test_tup1_arr_len_diff)\n        var test_tup1_arr_len_diff_count_arr_index = 0\n        var test_tup1_arr_len_diff_count_arr_index_max = 0\n        var test_tup1_arr_len_diff_count_arr_index_max_value = 0\n        var test_tup1_arr_len_diff_count_arr_index_max_value_index = 0\n        var test_tup1_arr_len_diff_count_arr_index_max_value_index_arr = new Array[Int](test_tup1_arr_len_diff)\n        var test_tup1_arr_len_diff_count_arr_index_max_value_index_arr_index = 0\n        var test_tup1_arr_len_diff_count_arr_index_max_value_index_arr_index_max = 0\n        var test_tup1_arr_len_diff_count_arr_index_max_value_index_arr_index_max_value = 0\n        var test_tup1_",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(i < 32) {\n            var bit1 = (tup1 & 1)\n            var bit2 = (tup2 & 1)\n            if(bit1 != bit2) result += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (i < 64) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                result += 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        if(tup1 > 0) count += tup1.toString.length\n        if(tup2 > 0) count += tup2.toString.length\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toString.toList.map(_.asDigit)\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_sum = tup1_diff.map(x => pow(10, tup1.indexOf(x)).toLong).sum\n        val tup2_diff_sum = tup2_diff.map(x => pow(10, tup2.indexOf(x)).toLong).sum\n        tup1_diff_sum + tup2_diff_sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        if(tup1 > 0) count += tup1.toString.length\n        if(tup2 > 0) count += tup2.toString.length\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        val tup1 = test_tup1.toString.toList\n        val tup2 = test_tup2.toString.toList\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_list = tup1_diff.toList\n        val tup2_diff_list = tup2_diff.toList\n        val tup1_diff_list_int = tup1_diff_list.map(x => x.toString.toInt)\n        val tup2_diff_list_int = tup2_diff_list.map(x => x.toString.toInt)\n        val tup1_diff_list_int_sum = tup1_diff_list_int.sum\n        val tup2_diff_list_int_sum = tup2_diff_list_int.sum\n        val tup1_diff_list_int_sum_str = tup1_diff_list_int_sum.toString\n        val tup2_diff_list_int_sum_str = tup2_diff_list_int_sum.toString\n        val tup1_diff_list_int_sum_str_list = tup1_diff_list_int_sum_str.toList\n        val tup2_diff_list_int_sum_str_list = tup2_diff_list_int_sum_str.toList\n        val tup1_diff_list_int_sum_str_list_set = tup1_diff_list_int_sum_str_list.toSet\n        val tup2_diff_list_int_sum_str_list_set = tup2_diff_list_int_sum_str_list.toSet\n        val tup1_diff_list_int_sum_str_list_set_diff = tup1_diff_list_int_sum",
    "        val tup1 = test_tup1.toString.toList\n        val tup2 = test_tup2.toString.toList\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_list = tup1_diff.toList\n        val tup2_diff_list = tup2_diff.toList\n        var result = 0L\n        for (i <- 0 until tup1_diff_list.length) result += tup1_diff_list(i).toString.toLong * pow(10, i).toLong\n        for (i <- 0 until tup2_diff_list.length) result += tup2_diff_list(i).toString.toLong * pow(10, i + tup1_diff_list.length).toLong\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        val tup1 = test_tup1.toString.toList.map(x => x.toString.toInt)\n        val tup2 = test_tup2.toString.toList.map(x => x.toString.toInt)\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_sum = tup1_diff.map(x => pow(10, tup1.indexOf(x)).toLong).sum\n        val tup2_diff_sum = tup2_diff.map(x => pow(10, tup2.indexOf(x)).toLong).sum\n        tup1_diff_sum + tup2_diff_sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toString.toList.map(_.asDigit)\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_sum = tup1_diff.sum\n        val tup2_diff_sum = tup2_diff.sum\n        val tup1_diff_prod = tup1_diff.product\n        val tup2_diff_prod = tup2_diff.product\n        val tup1_diff_sum_prod = tup1_diff_sum * tup1_diff_prod\n        val tup2_diff_sum_prod = tup2_diff_sum * tup2_diff_prod\n        val tup1_diff_sum_prod_str = tup1_diff_sum_prod.toString\n        val tup2_diff_sum_prod_str = tup2_diff_sum_prod.toString\n        val tup1_diff_sum_prod_str_len = tup1_diff_sum_prod_str.length\n        val tup2_diff_sum_prod_str_len = tup2_diff_sum_prod_str.length\n        val tup1_diff_sum_prod_str_len_diff = abs(tup1_diff_sum_prod_str_len - tup2_diff_sum_prod_str_len)\n        val tup1_diff_sum_prod_str_len_diff_str = tup1_diff_sum_prod_str_len_diff.toString\n        val tup1_diff_sum_prod_str_len_diff_str_len = tup1_diff_sum_prod_",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit).sorted\n        val tup2 = test_tup2.toString.toList.map(_.asDigit).sorted\n        var result = 0L\n        var i = 0\n        while (i < tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n            i += 1\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toString.toList.map(_.asDigit)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var test_tup1_str = test_tup1.toString\n        var test_tup2_str = test_tup2.toString\n        var test_tup1_arr = test_tup1_str.toCharArray\n        var test_tup2_arr = test_tup2_str.toCharArray\n        var test_tup1_arr_len = test_tup1_arr.length\n        var test_tup2_arr_len = test_tup2_arr.length\n        var test_tup1_arr_len_max = max(test_tup1_arr_len, test_tup2_arr_len)\n        var test_tup2_arr_len_max = max(test_tup1_arr_len, test_tup2_arr_len)\n        var test_tup1_arr_len_min = min(test_tup1_arr_len, test_tup2_arr_len)\n        var test_tup2_arr_len_min = min(test_tup1_arr_len, test_tup2_arr_len)\n        var test_tup1_arr_len_diff = abs(test_tup1_arr_len - test_tup2_arr_len)\n        var test_tup2_arr_len_diff = abs(test_tup1_arr_len - test_tup2_arr_len)\n        var test_tup1_arr_len_diff_str = test_tup1_arr_len_diff.toString\n        var test_tup2_arr_len_diff_str = test_tup2_arr_len_diff.toString\n        var test_tup1_arr_len_diff_str_arr = test_tup1_arr_len_diff_str.toCharArray\n        var test_tup2_arr_len_diff_str_arr = test_tup2_arr_len_diff_str.toCharArray\n        var test_tup1_arr_len_diff_str_arr_len = test_tup1_arr_len",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toString.toList.map(_.asDigit)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toLong).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toLong).toList\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += 1\n        }\n        result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_dissimilar = tup1_set.diff(tup2_set)\n        val tup2_dissimilar = tup2_set.diff(tup1_set)\n        val tup1_dissimilar_str = tup1_dissimilar.mkString(\"\")\n        val tup2_dissimilar_str = tup2_dissimilar.mkString(\"\")\n        val tup1_dissimilar_num = tup1_dissimilar_str.toLong\n        val tup2_dissimilar_num = tup2_dissimilar_str.toLong\n        val result = tup1_dissimilar_num + tup2_dissimilar_num\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        count",
    "        val tup1 = test_tup1.toString.toList.map(x => x.toString.toInt)\n        val tup2 = test_tup2.toString.toList.map(x => x.toString.toInt)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        while(tup1 > 0) {\n            count += 1\n            tup1 /= 10\n        }\n        while(tup2 > 0) {\n            count += 1\n            tup2 /= 10\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList\n        val tup2 = test_tup2.toString.toList\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += 1\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 % 10) != (tup2 % 10)) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList\n        val tup2 = test_tup2.toString.toList\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_str = tup1_diff.mkString\n        val tup2_diff_str = tup2_diff.mkString\n        val tup1_diff_num = tup1_diff_str.toLong\n        val tup2_diff_num = tup2_diff_str.toLong\n        val result = tup1_diff_num + tup2_diff_num\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var count = 0\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) count += 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 != bit2) result += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if (tup1 % 10 != tup2 % 10) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) result += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        while (tup1 > 0) {\n            result += 1\n            tup1 /= 10\n        }\n        while (tup2 > 0) {\n            result += 1\n            tup2 /= 10\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.map(_.asDigit).toSet\n        val tup2 = test_tup2.toString.map(_.asDigit).toSet\n        val result = tup1.diff(tup2).union(tup2.diff(tup1))\n        result.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList\n        val tup2 = test_tup2.toString.toList\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_list = tup1_diff.toList\n        val tup2_diff_list = tup2_diff.toList\n        val tup1_diff_list_int = tup1_diff_list.map(x => x.toString.toInt)\n        val tup2_diff_list_int = tup2_diff_list.map(x => x.toString.toInt)\n        val tup1_diff_list_int_sum = tup1_diff_list_int.sum\n        val tup2_diff_list_int_sum = tup2_diff_list_int.sum\n        val tup1_diff_list_int_sum_str = tup1_diff_list_int_sum.toString\n        val tup2_diff_list_int_sum_str = tup2_diff_list_int_sum.toString\n        val tup1_diff_list_int_sum_str_list = tup1_diff_list_int_sum_str.toList\n        val tup2_diff_list_int_sum_str_list = tup2_diff_list_int_sum_str.toList\n        val tup1_diff_list_int_sum_str_list_set = tup1_diff_list_int_sum_str_list.toSet\n        val tup2_diff_list_int_sum_str_list_set = tup2_diff_list_int_sum_str_list.toSet\n        val tup1_diff_list_int_sum_str_list_set_diff = tup1_diff_list_int_sum",
    "        var tup1 = test_tup1.toString.toList\n        var tup2 = test_tup2.toString.toList\n        var count = 0\n        for (i <- 0 to tup1.length - 1) {\n            if (tup1(i) != tup2(i)) count += 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 % 10) != (tup2 % 10)) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        val tup1 = test_tup1.toString.split(\"\").map(x => x.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(x => x.toInt).toList\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) {\n                result += 1\n            }\n        }\n        return result",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toString.toList.map(_.asDigit)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        result",
    "        val tup1 = test_tup1.toString.toList\n        val tup2 = test_tup2.toString.toList\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val diff = tup1_diff.union(tup2_diff)\n        val diff_str = diff.mkString\n        diff_str.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) != (tup2 & 1)) result += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.toList.map(x => x.toString.toInt)\n        val tup2 = test_tup2.toString.toList.map(x => x.toString.toInt)\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += 1\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) result += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        val tup1 = test_tup1.toString.toList\n        val tup2 = test_tup2.toString.toList\n        val result = tup1.diff(tup2)\n        result.map(_.toString.toLong).sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10) != (tup2 % 10)) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        val tup1 = test_tup1.toString.split(\"\").map(x => x.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(x => x.toInt)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(x => x.toString.toLong)\n        val tup2 = test_tup2.toString.toList.map(x => x.toString.toLong)\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val diff_set = tup1_diff.union(tup2_diff)\n        val diff_list = diff_set.toList\n        val diff_list_str = diff_list.map(x => x.toString)\n        val diff_list_str_joined = diff_list_str.mkString\n        val diff_list_str_joined_long = diff_list_str_joined.toLong\n        return diff_list_str_joined_long",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 % 10) != (tup2 % 10)) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList\n        val tup2 = test_tup2.toString.toList\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_list = tup1_diff.toList\n        val tup2_diff_list = tup2_diff.toList\n        var tup1_diff_num = 0\n        var tup2_diff_num = 0\n        for (i <- 0 until tup1_diff_list.length) {\n            tup1_diff_num += tup1_diff_list(i).toString.toInt * pow(10, tup1_diff_list.length - i - 1).toInt\n        }\n        for (i <- 0 until tup2_diff_list.length) {\n            tup2_diff_num += tup2_diff_list(i).toString.toInt * pow(10, tup2_diff_list.length - i - 1).toInt\n        }\n        tup1_diff_num + tup2_diff_num",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toString.toList.map(_.asDigit)\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_sum = tup1_diff.sum\n        val tup2_diff_sum = tup2_diff.sum\n        val tup1_diff_prod = tup1_diff.product\n        val tup2_diff_prod = tup2_diff.product\n        val tup1_diff_sum_prod = tup1_diff_sum * tup1_diff_prod\n        val tup2_diff_sum_prod = tup2_diff_sum * tup2_diff_prod\n        val tup1_diff_sum_prod_sum = tup1_diff_sum_prod.toString.toList.map(_.asDigit).sum\n        val tup2_diff_sum_prod_sum = tup2_diff_sum_prod.toString.toList.map(_.asDigit).sum\n        val tup1_diff_sum_prod_sum_prod = tup1_diff_sum_prod_sum * tup1_diff_prod\n        val tup2_diff_sum_prod_sum_prod = tup2_diff_sum_prod_sum * tup2_diff_prod\n        val tup1_diff_sum_prod_sum_prod_sum = tup1_diff_sum_prod_sum_prod.toString.toList.map(_.asDigit).sum\n        val tup2_diff_sum_prod_sum_prod_sum = tup2_diff_sum_prod_sum_prod.",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(_.toString.toLong)\n        val tup2 = test_tup2.toString.toList.map(_.toString.toLong)\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_diff = tup1_set.diff(tup2_set)\n        val tup2_diff = tup2_set.diff(tup1_set)\n        val tup1_diff_sum = tup1_diff.sum\n        val tup2_diff_sum = tup2_diff.sum\n        val tup1_diff_prod = tup1_diff.product\n        val tup2_diff_prod = tup2_diff.product\n        val tup1_diff_sum_prod = tup1_diff_sum * tup1_diff_prod\n        val tup2_diff_sum_prod = tup2_diff_sum * tup2_diff_prod\n        val tup_diff_sum_prod = tup1_diff_sum_prod + tup2_diff_sum_prod\n        tup_diff_sum_prod",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10) != (tup2 % 10)) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup1_list = new ListBuffer[Long]()\n        var tup2_list = new ListBuffer[Long]()\n        while (tup1 != 0) {\n            tup1_list += tup1 % 10\n            tup1 /= 10\n        }\n        while (tup2 != 0) {\n            tup2_list += tup2 % 10\n            tup2 /= 10\n        }\n        var result = 0L\n        for (i <- 0 until tup1_list.length) {\n            if (!tup2_list.contains(tup1_list(i))) {\n                result = result * 10 + tup1_list(i)\n            }\n        }\n        for (i <- 0 until tup2_list.length) {\n            if (!tup1_list.contains(tup2_list(i))) {\n                result = result * 10 + tup2_list(i)\n            }\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count"
  ]
}