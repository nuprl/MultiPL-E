{
  "name": "mbpp_579_find_dissimilar",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the dissimilar elements in the given two tuples.\n    def findDissimilar(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findDissimilar((3l, 4l, 5l, 6l), (5l, 7l, 4l, 10l)) == (3l, 6l, 7l, 10l));\n    assert(findDissimilar((1l, 2l, 3l, 4l), (7l, 2l, 3l, 9l)) == (1l, 4l, 7l, 9l));\n    assert(findDissimilar((21l, 11l, 25l, 26l), (26l, 34l, 21l, 36l)) == (34l, 36l, 11l, 25l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(x => x.asDigit)\n        val tup2 = test_tup2.toString.toList.map(x => x.asDigit)\n        var count = 0\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) count += 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 || tup2 > 0) {\n            if((tup1 % 10) != (tup2 % 10)) {\n                count += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return count",
    "        val tup1 = test_tup1.toString.toList.map(_.toString.toInt)\n        val tup2 = test_tup2.toString.toList.map(_.toString.toInt)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) != tup2(i)) result += pow(10, i).toLong\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                count += 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        val tup1 = test_tup1.toString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toString.toList.map(_.asDigit)\n        val tup1_set = tup1.toSet\n        val tup2_set = tup2.toSet\n        val tup1_dissimilar = tup1_set.diff(tup2_set)\n        val tup2_dissimilar = tup2_set.diff(tup1_set)\n        val tup1_dissimilar_num = tup1_dissimilar.map(x => tup1.count(_ == x)).sum\n        val tup2_dissimilar_num = tup2_dissimilar.map(x => tup2.count(_ == x)).sum\n        tup1_dissimilar_num + tup2_dissimilar_num",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 || tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            if (tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 != 0 || tup2 != 0) {\n            if((tup1 & 1) != (tup2 & 1)) count += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 10 != tup2 % 10) count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        count",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            if ((tup1 & 1) != (tup2 & 1)) result += 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return result"
  ]
}