{
  "name": "mbpp_291_count_no_of_ways",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    def countNoOfWays(n : Long, k : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countNoOfWays((2l), (4l)) == (16l));\n    assert(countNoOfWays((3l), (2l)) == (6l));\n    assert(countNoOfWays((4l), (4l)) == (228l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val sameDiff = same + diff\n        val sameDiffSame = same\n        val sameDiffDiff = diff * (k - 1)\n        val sameDiffSameDiff = sameDiff\n        val sameDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same_previous = same\n        val diff_previous = diff\n        for (i <- 3 to n.toInt) {\n            same = diff_previous\n            diff = (total - same_previous) * (k - 1)\n            total = same + diff\n            same_previous = same\n            diff_previous = diff\n        }\n        total",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 0\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        // dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1)\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (dp(i - 1) + dp(i - 2)) * (k - 1)\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            (same * (total - diff) + diff * (total - same)) % 1000000007\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val result = total * pow(k - 1, n - 2).toLong\n        result",
    "        val dp = Array.ofDim[Long](n.toInt + 1, k.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to k.toInt) {\n                if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 0\n                else if (i == 1) dp(i)(j) = j\n                else if (i == 2) dp(i)(j) = j * j\n                else dp(i)(j) = (dp(i - 1)(j) + dp(i - 2)(j)) * (j - 1)\n            }\n        }\n        dp(n.toInt)(k.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(Array.fill(2)(0L))\n        dp(1)(0) = k\n        dp(1)(1) = k\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = (dp(i - 1)(0) + dp(i - 1)(1)) * (k - 1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) 0\n        else if (n == 1) k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                var temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 1, k)\n        }",
    "        val dp = Array.ofDim[Long](n.toInt + 1, k.toInt + 1)\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to k.toInt) {\n                if (i == 1) dp(i)(j) = j\n                else if (j == 1) dp(i)(j) = dp(i - 1)(k.toInt)\n                else dp(i)(j) = (dp(i - 1)(j) + dp(i - 1)(j - 1)) % 1000000007\n            }\n        }\n        dp(n.toInt)(k.toInt)",
    "        if (n == 0) 0\n        else if (n == 1) k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            (total * total) % 1000000007\n        }",
    "        // The idea is to find the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // Let the number of ways of painting the fence such that at most 2 adjacent posts have the same color be f(n, k).\n        // Let the number of ways of painting the fence such that at most 2 adjacent posts have the same color and the last two posts have the same color be g(n, k).\n        // Let the number of ways of painting the fence such that at most 2 adjacent posts have the same color and the last two posts have different colors be h(n, k).\n        // Then, f(n, k) = g(n, k) + h(n, k).\n        // g(n, k) = (k - 1) * f(n - 1, k)\n        // h(n, k) = (k - 1) * f(n - 2, k)\n        // f(n, k) = (k - 1) * (f(n - 1, k) + f(n - 2, k))\n        // f(1, k) = k\n        // f(2, k) = k * k\n        // f(n, k) = (k - 1) * (f(n - 1, k) + f(n - 2, k))\n        // f(n, k) = (k - 1) * (f(n - 1, k) + f(n - 2, k))\n        // f(n, k) = (k - 1) * (f(n - 1, k) + f(n - 2, k))\n        // f(n, k) = (k - 1) * (f(n - 1, k) + f(n - 2, k))\n        // f(n, k) = (k - 1) * (f(n - 1, k) + f(n - 2, k))\n        // f(n, k) = (k - 1) * (f(n - 1, k) + f(n - 2, k))\n        // f(n, k) = (k - 1) * (f(n - 1, k) + f(n - 2, k))\n        // f(n, k",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        return total2",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        return same + diff * countNoOfWays(n - 2, k)",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same_prev = same\n        val diff_prev = diff\n        for (i <- 3 to n.toInt) {\n            same = diff_prev\n            diff = (total - same_prev) * (k - 1)\n            total = same + diff\n            same_prev = same\n            diff_prev = diff\n        }\n        total",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val same2 = same\n            val diff2 = diff * (k - 1)\n            val total2 = same2 + diff2\n            val same3 = same2\n            val diff3 = diff2 * (k - 1)\n            val total3 = same3 + diff3\n            val same4 = same3\n            val diff4 = diff3 * (k - 1)\n            val total4 = same4 + diff4\n            val same5 = same4\n            val diff5 = diff4 * (k - 1)\n            val total5 = same5 + diff5\n            val same6 = same5\n            val diff6 = diff5 * (k - 1)\n            val total6 = same6 + diff6\n            val same7 = same6\n            val diff7 = diff6 * (k - 1)\n            val total7 = same7 + diff7\n            val same8 = same7\n            val diff8 = diff7 * (k - 1)\n            val total8 = same8 + diff8\n            val same9 = same8\n            val diff9 = diff8 * (k - 1)\n            val total9 = same9 + diff9\n            val same10 = same9\n            val diff10 = diff9 * (k - 1)\n            val total10 = same10 + diff10\n            val same11 = same10\n            val diff11 = diff10 * (k - 1)\n            val total11 = same11 + diff11\n            val same12 = same11\n            val diff12 = diff11 * (k - 1)\n            val total12 = same12 + diff12\n            val same13 = same12\n            val diff13 = diff12 * (k - 1)\n            val total13 = same13 + diff13\n            val same14 = same13\n            val diff14 = diff13 * (k - 1)\n            val total14 = same14 + diff14\n            val same15 = same14\n            val diff15 = diff14 * (k - 1)\n            val total15 = same15 + diff15\n",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        return total2",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        var same = 0L\n        var diff = k\n        for (i <- 1 to n.toInt - 1) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val mod = 1000000007L\n        val dp = Array.ofDim[Long](n.toInt + 1)\n        dp(1) = k\n        dp(2) = total\n        for (i <- 3 to n.toInt) {\n            dp(i) = (same + diff) * (dp(i - 1) - same) % mod\n            same = diff\n            diff = dp(i)\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val mod = 1000000007L\n        val same2 = same\n        val diff2 = diff * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = same2\n        val diff3 = diff2 * (k - 1)\n        val total3 = same3 + diff3\n        var same4 = same3\n        var diff4 = diff3 * (k - 1)\n        var total4 = same4 + diff4\n        for (i <- 5 to n.toInt) {\n            same4 = same3\n            diff4 = diff3 * (k - 1)\n            total4 = (same4 + diff4) % mod\n            same3 = same2\n            diff3 = diff2 * (k - 1)\n            total3 = (same3 + diff3) % mod\n            same2 = same\n            diff2 = diff * (k - 1)\n            total2 = (same2 + diff2) % mod\n            same = total\n            diff = (total - same) * (k - 1)\n            total = (same + diff) % mod\n        }\n        total4",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                var temp = diff\n                diff = (diff + same) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        val dp = Array.fill[Long](n.toInt + 1)(0)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        return total2",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 2 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        var sameCount = same\n        var diffCount = diff\n        for (i <- 3 to n.toInt) {\n            sameCount = diffCount\n            diffCount = (total - sameCount) * (k - 1)\n            total = sameCount + diffCount\n        }\n        total",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 0\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        return same + diff * countNoOfWays(n - 2, k)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        countNoOfWays(n - 2, k) * total2",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) 0\n        else if (n == 1) k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        return total2",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(2)(0L)\n        dp(0) = k\n        dp(1) = k * k\n        for (i <- 2 to n.toInt - 1) {\n            val temp = dp(1)\n            dp(1) = (k - 1) * (dp(0) + dp(1))\n            dp(0) = temp\n        }\n        dp(1)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            (total * total) % 1000000007\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            (same * (countNoOfWays(n - 1, k) - same) + diff * countNoOfWays(n - 1, k)) % 1000000007\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = diff\n        val diff2 = (k - 1) * (k - 1) * k\n        val total2 = same2 + diff2\n        val same3 = diff2\n        val diff3 = (k - 1) * (k - 1) * (k - 1) * k\n        val total3 = same3 + diff3\n        val same4 = diff3\n        val diff4 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * k\n        val total4 = same4 + diff4\n        val same5 = diff4\n        val diff5 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * k\n        val total5 = same5 + diff5\n        val same6 = diff5\n        val diff6 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * k\n        val total6 = same6 + diff6\n        val same7 = diff6\n        val diff7 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * k\n        val total7 = same7 + diff7\n        val same8 = diff7\n        val diff8 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * k\n        val total8 = same8 + diff8\n        val same9 = diff8\n        val diff9 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) 0\n        else if (n == 1) k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.ofDim[Long](n.toInt + 1, k.toInt + 1)\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to k.toInt) {\n                if (i == 1) dp(i)(j) = j\n                else {\n                    dp(i)(j) = (dp(i - 1)(j) + dp(i - 1)(j - 1)) % 1000000007\n                }\n            }\n        }\n        dp(n.toInt)(k.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val result = Array.fill(n.toInt)(0L)\n            result(0) = k\n            result(1) = total\n            for (i <- 2 until n.toInt) {\n                result(i) = (same + diff) * (k - 1)\n                same = diff\n                diff = result(i)\n            }\n            result(n.toInt - 1)\n        }",
    "        val dp = Array.ofDim[Long](n.toInt + 1, k.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to k.toInt) {\n                if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 0\n                else if (i == 1) dp(i)(j) = j\n                else if (i == 2) dp(i)(j) = j * j\n                else dp(i)(j) = (dp(i - 1)(j) + dp(i - 2)(j)) * (j - 1)\n            }\n        }\n        dp(n.toInt)(k.toInt)",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        var sameCount = same\n        var diffCount = diff\n        for (i <- 3 to n.toInt) {\n            sameCount = diffCount\n            diffCount = (total - sameCount) * (k - 1)\n            total = sameCount + diffCount\n        }\n        total",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val same_diff = same + diff\n        val same_same = same\n        val diff_diff = diff\n        val same_diff_diff = same_diff\n        val same_same_diff = same_same\n        val same_diff_same = same_diff\n        val same_same_same = same_same\n        val diff_diff_diff = diff_diff\n        val diff_same_diff = diff_diff\n        val diff_diff_same = diff_diff\n        val diff_same_same = diff_same\n        val diff_same_same_diff = diff_same_same\n        val diff_same_diff_same = diff_same_diff\n        val diff_diff_same_same = diff_diff_same\n        val diff_same_same_same = diff_same_same\n        val diff_diff_same_diff = diff_diff_same\n        val diff_diff_diff_same = diff_diff_diff\n        val diff_diff_diff_diff = diff_diff_diff\n        val diff_diff_diff_diff_diff = diff_diff_diff_diff\n        val diff_diff_diff_diff_same = diff_diff_diff_diff\n        val diff_diff_diff_same_diff = diff_diff_diff_diff\n        val diff_diff_diff_same_same = diff_diff_diff_same\n        val diff_diff_same_diff_diff = diff_diff_diff_diff\n        val diff_diff_same_diff_same = diff_diff_diff_same\n        val diff_diff_same_same_diff = diff_diff_diff_same\n        val diff_diff_same_same_same = diff_diff_same_same\n        val diff_same_diff_diff_diff = diff_diff_diff_diff\n        val diff_same_diff_diff_same = diff_diff_diff_same\n        val diff_same_diff_same_diff = diff_diff_diff_same\n        val diff_same_diff",
    "        var dp = Array.fill[Long](3)(0)\n        dp(0) = k\n        dp(1) = k * k\n        for (i <- 2 to n.toInt) {\n            dp(2) = (k - 1) * (dp(0) + dp(1))\n            dp(0) = dp(1)\n            dp(1) = dp(2)\n        }\n        dp(2)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val result = Array.fill(n.toInt)(0L)\n        result(0) = same\n        result(1) = diff\n        for (i <- 2 until n.toInt) {\n            result(i) = total * (k - 1) - result(i - 1)\n            total = result(i) + result(i - 1)\n        }\n        result(n.toInt - 1)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same_n_minus_1 = same\n        val diff_n_minus_1 = total * (k - 1)\n        val total_n_minus_1 = same_n_minus_1 + diff_n_minus_1\n        val same_n_minus_2 = same\n        val diff_n_minus_2 = total * (k - 1)\n        val total_n_minus_2 = same_n_minus_2 + diff_n_minus_2\n        var same_n = 0L\n        var diff_n = 0L\n        var total_n = 0L\n        for (i <- 3 to n.toInt) {\n            same_n = diff_n_minus_1\n            diff_n = (total_n_minus_1 - same_n_minus_1) * (k - 1)\n            total_n = same_n + diff_n\n            same_n_minus_1 = same_n\n            diff_n_minus_1 = diff_n\n            total_n_minus_1 = total_n\n        }\n        total_n",
    "        val dp = Array.ofDim[Long](n.toInt + 1, k.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to k.toInt) {\n                if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 0\n                else if (i == 1) dp(i)(j) = j\n                else if (j == 1) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j) + dp(i - 1)(j - 1)) % 1000000007\n            }\n        }\n        dp(n.toInt)(k.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        total2",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            (same + diff) * countNoOfWays(n - 1, k) - same * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1)\n        val total13 = same13 + diff13",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 2)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 2)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 2)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 2)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 2)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 2)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 2)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 2)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 2)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 2)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 2)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 2",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 2)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 2)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 2)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 2)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 2)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 2)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 2)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 2)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 2)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 2)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 2)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 2",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val result = (total * countNoOfWays(n - 2, k)) % 1000000007\n            result\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                var temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val result = total * countNoOfWays(n - 2, k)\n            result\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            (same + diff) * countNoOfWays(n - 1, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, k.toInt + 1)\n        for (i <- 1 to k.toInt) dp(1)(i) = i\n        for (i <- 2 to n.toInt) {\n            for (j <- 1 to k.toInt) {\n                dp(i)(j) = (dp(i - 1)(j) + dp(i - 2)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(k.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) 0\n        else if (n == 1) k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        var dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                var temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        return total * countNoOfWays(n - 1, k)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val total2 = total * total\n            val same2 = same * same\n            val diff2 = diff * diff\n            val total3 = total2 * total\n            val same3 = same2 * same\n            val diff3 = diff2 * diff\n            val total4 = total3 * total\n            val same4 = same3 * same\n            val diff4 = diff3 * diff\n            val total5 = total4 * total\n            val same5 = same4 * same\n            val diff5 = diff4 * diff\n            val total6 = total5 * total\n            val same6 = same5 * same\n            val diff6 = diff5 * diff\n            val total7 = total6 * total\n            val same7 = same6 * same\n            val diff7 = diff6 * diff\n            val total8 = total7 * total\n            val same8 = same7 * same\n            val diff8 = diff7 * diff\n            val total9 = total8 * total\n            val same9 = same8 * same\n            val diff9 = diff8 * diff\n            val total10 = total9 * total\n            val same10 = same9 * same\n            val diff10 = diff9 * diff\n            val total11 = total10 * total\n            val same11 = same10 * same\n            val diff11 = diff10 * diff\n            val total12 = total11 * total\n            val same12 = same11 * same\n            val diff12 = diff11 * diff\n            val total13 = total12 * total\n            val same13 = same12 * same\n            val diff13 = diff12 * diff\n            val total14 = total13 * total\n            val same14 = same13 * same\n            val diff14 = diff13 * diff\n            val total15 = total14 * total\n            val same15 = same14 * same\n            val diff15 = diff14 * diff\n            val total16 = total15 * total\n            val same16 = same15 * same\n            val diff16 = diff15 * diff\n            val total17 = total16 * total\n            val same",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1",
    "        // dp(i) is the number of ways to paint the first i posts.\n        // dp(i) = dp(i - 1) * (k - 1) + dp(i - 2) * (k - 1)\n        // dp(i) = dp(i - 1) * (k - 1) + dp(i - 2) * (k - 1)\n        // dp(i) = (dp(i - 1) + dp(i - 2)) * (k - 1)\n        // dp(i) = dp(i - 1) * k + dp(i - 2) * (k - 1)\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = dp(i - 1) * k + dp(i - 2) * (k - 1)\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                var temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            (same + diff) * countNoOfWays(n - 1, k) - same * countNoOfWays(n - 2, k)\n        }",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) 0\n        else if (n == 1) k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = same\n        val diff2 = diff * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = same2\n        val diff3 = diff2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = same3\n        val diff4 = diff3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = same4\n        val diff5 = diff4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = same5\n        val diff6 = diff5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = same6\n        val diff7 = diff6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = same7\n        val diff8 = diff7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = same8\n        val diff9 = diff8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = same9\n        val diff10 = diff9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = same10\n        val diff11 = diff10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = same11\n        val diff12 = diff11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = same12\n        val diff13 = diff12 * (k - 1)\n        val total13 = same13 + diff13\n        val same14 = same13\n        val diff14 = diff13 * (k - 1)\n        val total14 = same14 + diff14\n        val same15 = same14\n        val diff15 = diff14 * (k - 1)\n        val total15",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 2)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 2)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 2)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 2)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 2)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 2)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 2)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 2)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 2)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 2)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 2)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 2",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val mod = 1000000007L\n        val result = (total * pow(total - 1, n - 2).toLong) % mod\n        result",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 1, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 0\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 1, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val result = Array.fill(n.toInt)(0L)\n            result(0) = k\n            result(1) = total\n            for (i <- 2 until n.toInt) {\n                result(i) = (same + diff) * (k - 1)\n                same = diff\n                diff = result(i)\n            }\n            result(n.toInt - 1)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        var total = same + diff\n        for (i <- 3 to n.toInt) {\n            same = diff\n            diff = total * (k - 1)\n            total = same + diff\n        }\n        total",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val same2 = total * (k - 1)\n            val diff2 = total * (k - 1)\n            val total2 = same2 + diff2\n            total2\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val sameDiff = same + diff\n        val sameDiffSame = same\n        val diffSameDiff = diff\n        var result = sameDiff\n        for (i <- 3 to n.toInt) {\n            result = sameDiffSame * same + diffSameDiff * diff\n            sameDiffSame = sameDiff\n            diffSameDiff = sameDiff - diffSameDiff\n            sameDiff = result\n        }\n        result",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        return total2"
  ]
}