{
  "name": "mbpp_291_count_no_of_ways",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    def countNoOfWays(n : Long, k : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countNoOfWays((2l), (4l)) == (16l));\n    assert(countNoOfWays((3l), (2l)) == (6l));\n    assert(countNoOfWays((4l), (4l)) == (228l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val sameDiff = same + diff\n        val sameDiffSame = same\n        val sameDiffDiff = diff * (k - 1)\n        val sameDiffSameDiff = sameDiff\n        val sameDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1) * (k - 1)\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same_previous = same\n        val diff_previous = diff\n        for (i <- 3 to n.toInt) {\n            same = diff_previous\n            diff = (total - same_previous) * (k - 1)\n            total = same + diff\n            same_previous = same\n            diff_previous = diff\n        }\n        total",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 0\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        // dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1)\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (dp(i - 1) + dp(i - 2)) * (k - 1)\n        }\n        dp(n.toInt)"
  ]
}