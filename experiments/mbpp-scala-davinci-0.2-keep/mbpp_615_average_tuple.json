{
  "name": "mbpp_615_average_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(y => y.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg",
    "        var sum = 0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)",
    "        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            lst = lst :+ (sum / i)\n        }\n        lst",
    "        val numsList = nums.toString.map(_.toString.toInt).toList\n        val numsListTuple = numsList.grouped(2).toList\n        numsListTuple.map(x => x.sum.toFloat / x.length).toList",
    "        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsListSize = numsList.size\n        val numsListSum = numsList.sum\n        val numsListAvg = numsListSum / numsListSize\n        val numsListAvgList = numsListAvg.toString.toList.map(_.asDigit)\n        val numsListAvgListSize = numsListAvgList.size\n        val numsListAvgListSum = numsListAvgList.sum\n        val numsListAvgListAvg = numsListAvgListSum / numsListAvgListSize\n        val numsListAvgListAvgList = numsListAvgListAvg.toString.toList.map(_.asDigit)\n        val numsListAvgListAvgListSize = numsListAvgListAvgList.size\n        val numsListAvgListAvgListSum = numsListAvgListAvgList.sum\n        val numsListAvgListAvgListAvg = numsListAvgListAvgListSum / numsListAvgListAvgListSize\n        val numsListAvgListAvgListAvgList = numsListAvgListAvgListAvg.toString.toList.map(_.asDigit)\n        val numsListAvgListAvgListAvgListSize = numsListAvgListAvgListAvgList.size\n        val numsListAvgListAvgListAvgListSum = numsListAvgListAvgListAvgList.sum\n        val numsListAvgListAvgListAvgListAvg = numsListAvgListAvgListAvgListSum / numsListAvgListAvgListAvgListSize\n        val numsListAvgListAvgListAvgListAvgList = numsListAvgListAvgListAvgListAvg.toString.toList.map(_.asDigit)\n        val numsListAvgListAvgListAvgListAvgListSize = numsListAvgListAvgListAvgListAvgList.size\n        val numsListAvgListAvgListAvgListAvgListSum = numsListAvgListAvgListAvgListAvgList.sum\n        val numsListAvgListAvgListAvgListAvgListAvg = numsListAvgListAvgListAvgListAvgListSum / numsListAvgListAvgListAvgListAvgListSize\n       ",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val nums = scala.io.StdIn.readLine.split(\" \").map(_.toFloat)\n            list += nums.sum / nums.length\n        }\n        list.toList",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum / i) :: result\n        }\n        result",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => (x(0).toFloat + x(1).toFloat) / 2)\n        numsTupleFloat",
    "        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).toString.toInt\n        }\n        result.map(x => x.toFloat).toList",
    "        var l = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            l = l :+ (sum.toFloat / i)\n        }\n        l",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += pow(i, j)\n            }\n            result = (sum / nums) :: result\n        }\n        result",
    "        var list = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            list = (sum / nums.toFloat) :: list\n        }\n        return list",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var tuple = (i, i)\n            list = list :+ (tuple._1 + tuple._2) / 2\n        }\n        list",
    "        var sum : Long = 0\n        var count : Long = 0\n        var result : List[Float] = List()\n        for (i <- 1 to nums) {\n            var tuple = (i, i + 1)\n            sum += tuple._1\n            sum += tuple._2\n            count += 2\n        }\n        result = List(sum.toFloat / count)\n        return result",
    "        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => pow(x, 5).toLong)\n        val sum = numsList2.sum\n        if (sum == nums) {\n            println(nums)\n            return List(nums)\n        }\n        return List()",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        val numsTupleTupleList = numsTupleTuple.map(x => x.map(y => y.sum))\n        val numsTupleTupleListAverage = numsTupleTupleList.map(x => x.map(y => y.toFloat / 3))\n        numsTupleTupleListAverage.flatten",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.size)\n        numsTupleFloatAvg",
    "        var result = List[Float]()\n        for (i <- 0 until nums) {\n            var sum = 0.0\n            for (j <- 0 until nums) {\n                sum += pow(i, j)\n            }\n            result = result :+ (sum / nums)\n        }\n        result",
    "        val list = ListBuffer[Float]()\n        for (i <- 0 until nums) {\n            val num = scala.util.Random.nextInt(nums)\n            list += num.toFloat\n        }\n        list.toList",
    "        var sum = 0\n        var count = 0\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n            if (count == 10) {\n                result = (sum / 10).toFloat :: result\n                sum = 0\n                count = 0\n            }\n        }\n        return result",
    "        val nums2 = nums.toString.map(_.asDigit).toList\n        val nums3 = nums2.map(x => List.fill(x)(x))\n        val nums4 = nums3.flatten\n        val nums5 = nums4.grouped(2).toList\n        val nums6 = nums5.map(x => (x(0), x(1)))\n        val nums7 = nums6.map(x => (x._1 + x._2) / 2.0f)\n        nums7",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListTuple = numsList.grouped(3).toList\n        val numsListTupleFloat = numsListTuple.map(_.map(_.toFloat))\n        val numsListTupleFloatAvg = numsListTupleFloat.map(_.sum / _.length)\n        numsListTupleFloatAvg",
    "        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += pow(i, j)\n            }\n            result = (sum / nums.toFloat) :: result\n        }\n        result",
    "        val list = ListBuffer[Float]()\n        for (i <- 0 until nums.toInt) {\n            val num = scala.util.Random.nextInt(100)\n            list += num\n        }\n        list.toList",
    "        val tuples = List((1,2),(3,4),(5,6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result",
    "        var list = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var num = scala.util.Random.nextInt(nums.toInt)\n            list = list :+ num.toFloat\n        }\n        list",
    "        var result : List[Float] = List()\n        for (i <- 0 until nums.toInt) {\n            var sum : Float = 0\n            var count : Int = 0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n                count += 1\n            }\n            result = (sum / count) :: result\n        }\n        return result",
    "        val nums2 = nums.toString.map(_.toString.toInt).toList\n        val nums3 = nums2.grouped(2).toList\n        val nums4 = nums3.map(x => (x(0) + x(1)) / 2.0f)\n        nums4",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = list :+ (sum.toFloat / i)\n        }\n        list",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum / i) :: result\n        }\n        result",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsList2 = numsList.grouped(2).toList\n        val numsList3 = numsList2.map(x => x.sum.toFloat / x.length)\n        numsList3",
    "        var list = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum / i) :: list\n        }\n        return list.reverse",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.size)\n        numsTupleFloatAvg",
    "        var list = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += pow(i, j).toFloat\n            }\n            list = (sum / nums.toFloat) :: list\n        }\n        list",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / i.toFloat) :: list\n        }\n        list",
    "        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => pow(x, numsList.length).toLong)\n        val numsList3 = numsList2.map(x => x.toString.toList.map(_.asDigit))\n        val numsList4 = numsList3.map(x => x.sum)\n        val numsList5 = numsList4.map(x => x.toFloat / numsList.length)\n        numsList5",
    "        val tuples = List((1,2,3), (4,5,6), (7,8,9))\n        val result = for (tuple <- tuples) yield {\n            tuple._1 + tuple._2 + tuple._3\n        }\n        result.map(x => x.toFloat / 3).toList",
    "        var list : List[Float] = List()\n        for (i <- 1 to nums.toInt) {\n            var sum : Long = 0\n            for (j <- 1 to nums.toInt) {\n                sum += i * j\n            }\n            list = (sum.toFloat / nums.toFloat) :: list\n        }\n        list.reverse",
    "        val numList = nums.toString.toList.map(_.toString.toInt)\n        val numTuple = numList.sliding(2, 2).toList\n        numTuple.map(x => (x(0) + x(1)) / 2.0f).toList",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1, i + 2)\n            val sum = tuple._1 + tuple._2 + tuple._3\n            list += sum / 3\n        }\n        list.toList",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            val avg = (tuple._1 + tuple._2) / 2.0f\n            list += avg\n        }\n        list.toList",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        numsTuple.map(x => x.sum.toFloat / x.length).toList",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            list = (sum / nums) :: list\n        }\n        list.reverse",
    "        var sum = 0\n        for (i <- 1 to nums) {\n            sum += i\n        }\n        val avg = sum / nums\n        List(avg.toFloat)",
    "        var list = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / i) :: list\n        }\n        list",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var tuple = (i, i + 1, i + 2)\n            var sum = tuple._1 + tuple._2 + tuple._3\n            list = list :+ sum / 3\n        }\n        list",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.zipWithIndex\n        val numsTupleGrouped = numsTuple.groupBy(_._2 % 3)\n        val numsTupleGroupedValues = numsTupleGrouped.values.toList\n        val numsTupleGroupedValuesSum = numsTupleGroupedValues.map(_.map(_._1).sum)\n        val numsTupleGroupedValuesSumFloat = numsTupleGroupedValuesSum.map(_.toFloat)\n        val numsTupleGroupedValuesSumFloatAverage = numsTupleGroupedValuesSumFloat.map(_ / 3)\n        numsTupleGroupedValuesSumFloatAverage",
    "        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = result :+ (sum / nums.toFloat)\n        }\n        result",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        numsTuple3",
    "        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i * nums.toInt + j)\n            }\n            result = result :+ (sum / nums.toInt)\n        }\n        return result",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        numsTuple3",
    "        val tuple = (1L to nums).toList.map(x => (x, x * x, x * x * x))\n        tuple.map(x => (x._1 + x._2 + x._3) / 3.0f).toList",
    "        val tuples = List((1,2), (3,4), (5,6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result",
    "        var list = List[Float]()\n        for (i <- 0 to nums.toInt - 1) {\n            var sum = 0.0\n            for (j <- 0 to nums.toInt - 1) {\n                sum += scala.util.Random.nextInt(100)\n            }\n            list = (sum / nums).toFloat :: list\n        }\n        return list",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        val numsTupleTupleList = numsTupleTuple.map(x => x.map(y => y.sum).sum)\n        val numsTupleTupleListFloat = numsTupleTupleList.map(x => x.toFloat)\n        val numsTupleTupleListFloatDiv = numsTupleTupleListFloat.map(x => x / 2)\n        numsTupleTupleListFloatDiv",
    "        var list = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0\n            var count = 0\n            for (j <- 1 to i) {\n                if (i % j == 0) {\n                    sum += j\n                    count += 1\n                }\n            }\n            list = list :+ (sum.toFloat / count)\n        }\n        list",
    "        val l = List(1,2,3,4,5,6,7,8,9,10)\n        val t = l.grouped(nums.toInt).toList\n        val t2 = t.map(x => x.sum.toFloat / x.length)\n        t2",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsList2 = numsList.sliding(2).toList\n        val numsList3 = numsList2.map(x => x.sum)\n        val numsList4 = numsList3.map(x => x.toFloat)\n        val numsList5 = numsList4.map(x => x / 2)\n        numsList5",
    "        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        val result = tuples.map(x => x._1 + x._2 + x._3).map(x => x / 3.0f)\n        result",
    "        val tuples = List((1, 2), (3, 4), (5, 6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result",
    "        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum / count)",
    "        val tuples = List((1, 2), (3, 4), (5, 6))\n        val list = tuples.map(x => (x._1 + x._2) / 2.0f)\n        list",
    "        var lst = List[Float]()\n        var i = 0\n        while (i < nums) {\n            var j = 0\n            var sum = 0\n            while (j < nums) {\n                sum += (i + j)\n                j += 1\n            }\n            lst = lst :+ (sum.toFloat / nums)\n            i += 1\n        }\n        return lst",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(nums)\n            val den = scala.util.Random.nextInt(nums)\n            list += num.toFloat / den.toFloat\n        }\n        list.toList",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(nums).toFloat\n            list += num\n        }\n        list.toList",
    "        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.zipWithIndex\n        val numsTupleGrouped = numsTuple.groupBy(x => x._2 % 3)\n        val numsTupleGroupedValues = numsTupleGrouped.values.toList\n        val numsTupleGroupedValuesSum = numsTupleGroupedValues.map(x => x.map(y => y._1).sum)\n        val numsTupleGroupedValuesSumAverage = numsTupleGroupedValuesSum.map(x => x.toFloat / 3)\n        numsTupleGroupedValuesSumAverage",
    "        var list : List[Float] = List()\n        for (i <- 1 to nums.toInt) {\n            var sum : Long = 0\n            for (j <- 1 to nums.toInt) {\n                sum += j\n            }\n            list = list :+ (sum.toFloat / nums.toFloat)\n        }\n        list",
    "        val tuples = List((1,2), (3,4), (5,6))\n        val averages = tuples.map(t => (t._1 + t._2).toFloat / 2)\n        return averages",
    "        val tuples = List((1,2,3), (4,5,6), (7,8,9))\n        val result = ListBuffer[Float]()\n        for (tuple <- tuples) {\n            var sum = 0\n            for (num <- tuple) {\n                sum += num\n            }\n            result += sum.toFloat / tuple.size\n        }\n        result.toList",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListTuple = numsList.grouped(3).toList\n        val numsListTupleFloat = numsListTuple.map(x => x.map(_.toFloat))\n        val numsListTupleFloatAverage = numsListTupleFloat.map(x => x.sum / x.length)\n        numsListTupleFloatAverage",
    "        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0\n            for (j <- 0 until nums.toInt) {\n                sum += i * j\n            }\n            result = (sum.toFloat / nums.toFloat) :: result\n        }\n        result",
    "        val lst = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.io.StdIn.readLine.split(\" \").map(_.toFloat)\n            lst += num.sum / num.length\n        }\n        lst.toList",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        numsTupleTuple.map(x => x.flatten.sum.toFloat / x.flatten.length).toList",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += (i * j)\n            }\n            list = (sum / nums) :: list\n        }\n        return list",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var temp = List[Float]()\n            for (j <- 1 to nums) {\n                temp = temp :+ (i + j).toFloat\n            }\n            result = result :+ temp.sum / nums\n        }\n        result",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2) / 2.0f)\n        numsTuple3",
    "        val sum = nums.toString.map(_.asDigit).sum\n        val len = nums.toString.length\n        val avg = sum.toFloat / len\n        List(avg)",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var tuple = (i, i + 1, i + 2)\n            var sum = tuple._1 + tuple._2 + tuple._3\n            var avg = sum / 3\n            list = list :+ avg\n        }\n        return list",
    "        var result = List[Float]()\n        for (i <- 0 until nums) {\n            var sum = 0.0\n            for (j <- 0 until nums) {\n                sum += pow(i, j)\n            }\n            result = (sum / nums) :: result\n        }\n        result",
    "        val numsList = nums.toString.split(\"\").map(_.toInt).toList\n        val numsListTuple = numsList.grouped(3).toList\n        val numsListTupleAverage = numsListTuple.map(x => x.sum.toFloat / x.length)\n        numsListTupleAverage",
    "        var result = List[Float]()\n        var sum = 0.0\n        var count = 0\n        var num = nums\n        while (num > 0) {\n            sum += num % 10\n            count += 1\n            num /= 10\n        }\n        result = (sum / count) :: result\n        result",
    "        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(y => y.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListSize = numsList.size\n        val numsListSum = numsList.sum\n        val numsListAverage = numsListSum.toFloat / numsListSize\n        List(numsListAverage)",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += j / i\n            }\n            result = result :+ (sum / nums)\n        }\n        result",
    "        var sum = 0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)",
    "        val tuples = nums.toString.map(x => x.asDigit).grouped(2).toList.map(x => (x(0), x(1)))\n        tuples.map(x => (x._1 + x._2) / 2.0f).toList",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / i.toFloat) :: list\n        }\n        list.reverse",
    "        var list : List[Float] = List()\n        for (i <- 0 until nums.toInt) {\n            var sum : Long = 0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            list = list :+ (sum.toFloat / nums.toFloat)\n        }\n        return list",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum.toFloat / i.toFloat) :: result\n        }\n        result",
    "        var result = List[Float]()\n        var sum = 0\n        for (i <- 0 until nums.toInt) {\n            var num = scala.io.StdIn.readLine.split(\" \").map(_.toInt)\n            for (j <- 0 until num.length) {\n                sum += num(j)\n            }\n            result = result :+ (sum.toFloat / num.length)\n            sum = 0\n        }\n        return result",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList",
    "        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).toString.toInt\n            }\n            result = (sum.toFloat / nums.toString.length) :: result\n        }\n        result",
    "        var list = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).toString.toInt\n            }\n            list = (sum.toFloat / nums.toString.length) :: list\n        }\n        list",
    "        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n        }\n        List(sum / count)",
    "        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            lst = lst :+ (sum / i)\n        }\n        lst",
    "        var result = List[Float]()\n        for (i <- 0 until nums) {\n            var sum = 0.0\n            for (j <- 0 until nums) {\n                sum += pow(i, j)\n            }\n            result = result :+ (sum / nums)\n        }\n        return result",
    "        val tuples = List((1,2),(3,4),(5,6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsList2 = numsList.map(x => List(x, x, x))\n        numsList2.map(x => x.sum.toFloat / x.length).toList",
    "        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).asDigit\n            }\n            result = result :+ (sum.toFloat / nums.toString.length)\n        }\n        result",
    "        val numsList = nums.toString.split(\"\").toList.map(x => x.toInt)\n        val numsList2 = numsList.map(x => x.toFloat)\n        val numsList3 = numsList2.map(x => x / numsList2.length)\n        numsList3",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum.toFloat / i)\n        }\n        result",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum.toFloat / i) :: result\n        }\n        result",
    "        val numsList = nums.toString.toList\n        val numsListInt = numsList.map(_.toString.toInt)\n        val numsListIntTuple = numsListInt.grouped(3).toList\n        val numsListIntTupleFloat = numsListIntTuple.map(x => x.map(_.toFloat))\n        val numsListIntTupleFloatAvg = numsListIntTupleFloat.map(x => x.sum / x.length)\n        numsListIntTupleFloatAvg",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum / i)\n        }\n        result",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        numsTuple3",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        numsTuple3",
    "        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsListSize = numsList.size\n        val numsListSum = numsList.sum\n        val numsListAverage = numsListSum.toFloat / numsListSize\n        val numsListAverageList = List(numsListAverage)\n        numsListAverageList",
    "        val tuples = List((1,2), (3,4), (5,6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result",
    "        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += (i * j)\n            }\n            lst = (sum / nums) :: lst\n        }\n        lst",
    "        val l = List(1,2,3,4,5,6,7,8,9,10)\n        val l2 = List(1,2,3,4,5,6,7,8,9,10)\n        val l3 = List(1,2,3,4,5,6,7,8,9,10)\n        val l4 = List(1,2,3,4,5,6,7,8,9,10)\n        val l5 = List(1,2,3,4,5,6,7,8,9,10)\n        val l6 = List(1,2,3,4,5,6,7,8,9,10)\n        val l7 = List(1,2,3,4,5,6,7,8,9,10)\n        val l8 = List(1,2,3,4,5,6,7,8,9,10)\n        val l9 = List(1,2,3,4,5,6,7,8,9,10)\n        val l10 = List(1,2,3,4,5,6,7,8,9,10)\n        val l11 = List(1,2,3,4,5,6,7,8,9,10)\n        val l12 = List(1,2,3,4,5,6,7,8,9,10)\n        val l13 = List(1,2,3,4,5,6,7,8,9,10)\n        val l14 = List(1,2,3,4,5,6,7,8,9,10)\n        val l15 = List(1,2,3,4,5,6,7,8,9,10)\n        val l16 = List(1,2,3,4,5,6,7,8,9,10)\n        val l17 = List(1,2,3,4,5,6,7,8,9,10)\n        val l18 = List(1,2,3,4,5,6,7,8,9,10)\n        val l19 = List(1",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1, i + 2)\n            val sum = tuple._1 + tuple._2 + tuple._3\n            list += sum / 3\n        }\n        list.toList",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        val numsTupleTupleList = numsTupleTuple.map(x => x.flatten)\n        val numsTupleTupleListAverage = numsTupleTupleList.map(x => x.sum.toFloat / x.length)\n        numsTupleTupleListAverage",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            list = (sum.toFloat / nums) :: list\n        }\n        list.reverse",
    "        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => pow(x, numsList.length).toLong)\n        val sum = numsList2.sum\n        val numsList3 = sum.toString.toList.map(_.asDigit)\n        val numsList4 = numsList3.map(x => pow(x, numsList3.length).toLong)\n        if (numsList4.sum == nums) true else false",
    "        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        val sum = tuples.map(x => x._1 + x._2 + x._3).sum\n        val average = sum / tuples.length\n        val result = tuples.map(x => (x._1 + x._2 + x._3) / average)\n        result",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / i.toFloat) :: list\n        }\n        list.reverse",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            result = result :+ (tuple._1 + tuple._2) / 2.0f\n        }\n        result",
    "        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = (sum / nums.toFloat) :: result\n        }\n        result",
    "        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).asDigit\n            }\n            result = result :+ (sum / nums.toString.length.toFloat)\n            nums /= 10\n        }\n        result",
    "        val list = List.range(1, nums + 1)\n        val tuple = (list, list.reverse)\n        val tupleList = List(tuple)\n        tupleList.map(x => x._1.sum.toFloat / x._1.length)",
    "        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => pow(x, numsList.length).toLong)\n        val numsList3 = numsList2.sum\n        val numsList4 = numsList3.toString.toList.map(_.asDigit)\n        val numsList5 = numsList4.map(x => pow(x, numsList4.length).toLong)\n        val numsList6 = numsList5.sum\n        val numsList7 = numsList6.toString.toList.map(_.asDigit)\n        val numsList8 = numsList7.map(x => pow(x, numsList7.length).toLong)\n        val numsList9 = numsList8.sum\n        val numsList10 = numsList9.toString.toList.map(_.asDigit)\n        val numsList11 = numsList10.map(x => pow(x, numsList10.length).toLong)\n        val numsList12 = numsList11.sum\n        val numsList13 = numsList12.toString.toList.map(_.asDigit)\n        val numsList14 = numsList13.map(x => pow(x, numsList13.length).toLong)\n        val numsList15 = numsList14.sum\n        val numsList16 = numsList15.toString.toList.map(_.asDigit)\n        val numsList17 = numsList16.map(x => pow(x, numsList16.length).toLong)\n        val numsList18 = numsList17.sum\n        val numsList19 = numsList18.toString.toList.map(_.asDigit)\n        val numsList20 = numsList19.map(x => pow(x, numsList19.length).toLong)\n        val numsList21 = numsList20.sum\n        val numsList22 = numsList21.toString.toList.map",
    "        var lst = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).asDigit\n            }\n            lst = (sum / nums.toString.length).toFloat :: lst\n        }\n        lst",
    "        var lst = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            lst = lst :+ (i.toFloat / nums.toFloat)\n        }\n        lst",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        numsTuple.map(x => x.sum.toFloat / x.length).toList",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val rand = new scala.util.Random\n            val num = rand.nextInt(100)\n            val den = rand.nextInt(100)\n            val avg = num.toFloat / den.toFloat\n            list += avg\n        }\n        list.toList",
    "        var lst = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += scala.util.Random.nextInt(nums.toInt)\n            }\n            lst = lst :+ (sum / nums.toInt)\n        }\n        lst",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg",
    "        var list = List[Float]()\n        for (i <- 0 until nums) {\n            var sum = 0.0\n            for (j <- 0 until nums) {\n                sum += pow(i, j)\n            }\n            list = list :+ (sum / nums)\n        }\n        return list",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1, i + 2)\n            val sum = tuple._1 + tuple._2 + tuple._3\n            list += sum / 3\n        }\n        list.toList",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        numsTupleFloat.map(x => x.sum / x.length).toList",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            list = list :+ i.toFloat\n        }\n        list",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        numsTuple.map(x => x.sum.toFloat / x.length).toList",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = i.toFloat\n            list += num / nums\n        }\n        list.toList",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListTuple = numsList.grouped(3).toList\n        val numsListTupleFloat = numsListTuple.map(x => x.map(_.toFloat))\n        val numsListTupleFloatAvg = numsListTupleFloat.map(x => x.sum / x.length)\n        numsListTupleFloatAvg",
    "        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => x * x)\n        val numsList3 = numsList2.map(x => x * x)\n        val numsList4 = numsList3.map(x => x * x)\n        val numsList5 = numsList4.map(x => x * x)\n        val numsList6 = numsList5.map(x => x * x)\n        val numsList7 = numsList6.map(x => x * x)\n        val numsList8 = numsList7.map(x => x * x)\n        val numsList9 = numsList8.map(x => x * x)\n        val numsList10 = numsList9.map(x => x * x)\n        val numsList11 = numsList10.map(x => x * x)\n        val numsList12 = numsList11.map(x => x * x)\n        val numsList13 = numsList12.map(x => x * x)\n        val numsList14 = numsList13.map(x => x * x)\n        val numsList15 = numsList14.map(x => x * x)\n        val numsList16 = numsList15.map(x => x * x)\n        val numsList17 = numsList16.map(x => x * x)\n        val numsList18 = numsList17.map(x => x * x)\n        val numsList19 = numsList18.map(x => x * x)\n        val numsList20 = numsList19.map(x => x * x)\n        val numsList21 = numsList20.map(x => x * x)\n        val numsList22 = numsList21.map(x => x * x)\n        val numsList23 = numsList22.map(x => x * x)\n        val numsList24 = numsList23.map(x => x * x)\n        val numsList25",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum / i) :: result\n        }\n        result",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum.toFloat / i)\n        }\n        result",
    "        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.zipWithIndex\n        val numsTupleGrouped = numsTuple.groupBy(_._2)\n        val numsTupleGroupedList = numsTupleGrouped.toList\n        val numsTupleGroupedListSorted = numsTupleGroupedList.sortBy(_._1)\n        val numsTupleGroupedListSortedMap = numsTupleGroupedListSorted.map(x => x._2)\n        val numsTupleGroupedListSortedMapFlat = numsTupleGroupedListSortedMap.flatten\n        val numsTupleGroupedListSortedMapFlatMap = numsTupleGroupedListSortedMapFlat.map(x => x._1)\n        val numsTupleGroupedListSortedMapFlatMapGrouped = numsTupleGroupedListSortedMapFlatMap.grouped(3)\n        val numsTupleGroupedListSortedMapFlatMapGroupedList = numsTupleGroupedListSortedMapFlatMapGrouped.toList\n        val numsTupleGroupedListSortedMapFlatMapGroupedListMap = numsTupleGroupedListSortedMapFlatMapGroupedList.map(x => x.sum)\n        val numsTupleGroupedListSortedMapFlatMapGroupedListMapAverage = numsTupleGroupedListSortedMapFlatMapGroupedListMap.map(x => x.toFloat / 3)\n        numsTupleGroupedListSortedMapFlatMapGroupedListMapAverage",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum / i) :: list\n        }\n        list",
    "        val tuples = List((1, 2), (3, 4), (5, 6))\n        tuples.map(x => (x._1 + x._2) / 2.0f).toList",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += pow(i, j)\n            }\n            list = list :+ (sum / nums)\n        }\n        list",
    "        val numsList = nums.toString.toList\n        val numsListInt = numsList.map(_.toString.toInt)\n        val numsListIntTuple = numsListInt.grouped(2).toList\n        val numsListIntTupleFloat = numsListIntTuple.map(x => x.map(_.toFloat))\n        val numsListIntTupleFloatAvg = numsListIntTupleFloat.map(x => x.sum / x.length)\n        numsListIntTupleFloatAvg",
    "        var numList = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            numList = numList :+ (sum.toFloat / i)\n        }\n        numList",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum.toFloat / i.toFloat) :: result\n        }\n        result",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListTuple = numsList.grouped(2).toList\n        val numsListTupleFloat = numsListTuple.map(x => x.map(_.toFloat))\n        val numsListTupleFloatAvg = numsListTupleFloat.map(x => x.sum / x.length)\n        numsListTupleFloatAvg",
    "        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = result :+ (sum / nums.toFloat)\n        }\n        result",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            result = (sum.toFloat / nums) :: result\n        }\n        result",
    "        val nums2 = nums.toString.split(\"\").map(_.toInt).toList\n        val nums3 = nums2.map(x => x * x)\n        val nums4 = nums3.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums5 = nums4.map(x => x * x)\n        val nums6 = nums5.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums7 = nums6.map(x => x * x)\n        val nums8 = nums7.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums9 = nums8.map(x => x * x)\n        val nums10 = nums9.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums11 = nums10.map(x => x * x)\n        val nums12 = nums11.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums13 = nums12.map(x => x * x)\n        val nums14 = nums13.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums15 = nums14.map(x => x * x)\n        val nums16 = nums15.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums17 = nums16.map(x => x * x)\n        val nums18 = nums17.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums19 = nums18.map(x => x * x)\n        val nums20 = nums19.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums21 = nums20.",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(nums.toInt)\n            list += num\n        }\n        list.toList",
    "        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).asDigit.toFloat\n        }\n        result",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var tuple = (i, i + 1, i + 2)\n            var sum = 0.0\n            for (j <- tuple) {\n                sum += j\n            }\n            list = list :+ (sum / 3)\n        }\n        list",
    "        var result : List[Float] = List()\n        for (i <- 0 until nums.toInt) {\n            var sum : Float = 0\n            for (j <- 0 until nums.toInt) {\n                sum += scala.util.Random.nextInt(nums.toInt)\n            }\n            result = result :+ (sum / nums)\n        }\n        return result",
    "        val tuples = List((1, 2), (3, 4), (5, 6))\n        val result = for (tuple <- tuples) yield (tuple._1 + tuple._2) / 2.0f\n        result",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListLength = numsList.length\n        val numsListSum = numsList.sum\n        val numsListAverage = numsListSum.toFloat / numsListLength\n        val numsListAverageList = List(numsListAverage)\n        numsListAverageList",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(100)\n            list += num\n        }\n        list.toList",
    "        val tuples = List((1,2),(3,4),(5,6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result",
    "        val numsList = nums.toString.split(\"\").map(_.toInt).toList\n        val numsList2 = numsList.map(x => List.fill(x)(x))\n        val numsList3 = numsList2.map(x => x.sum.toFloat / x.length)\n        numsList3",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsList2 = numsList.combinations(2).toList\n        val numsList3 = numsList2.map(x => x.reduce(_ * _))\n        val numsList4 = numsList3.map(x => x.toFloat)\n        val numsList5 = numsList4.map(x => x / 2)\n        numsList5",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val sum = numsList.sum\n        val len = numsList.length\n        val avg = sum.toFloat / len\n        List(avg)",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        numsTupleFloat.map(x => x.sum / x.length)",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList",
    "        val tuples = List((1,2),(3,4),(5,6),(7,8),(9,10))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result",
    "        val tuples = List((1,2), (2,3), (3,4), (4,5))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result",
    "        var sum = 0.0\n        var count = 0.0\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n        }\n        List(sum / count)",
    "        val list = nums.toString.split(\"\").map(_.toInt).toList\n        val sum = list.foldLeft(0)(_ + _)\n        val avg = sum.toFloat / list.length\n        List(avg)",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += (i * j)\n            }\n            list = list :+ (sum / nums)\n        }\n        return list",
    "        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).toString.toFloat\n        }\n        result",
    "        val list = ListBuffer[Float]()\n        for (i <- 0 to nums.toInt - 1) {\n            val num = scala.util.Random.nextInt(100)\n            list += num.toFloat\n        }\n        list.toList",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum.toFloat / i)\n        }\n        result",
    "        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0\n            for (j <- 0 until nums.toInt) {\n                sum += i * j\n            }\n            result = (sum.toFloat / nums.toFloat) :: result\n        }\n        result",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListTuple = numsList.sliding(2, 2).toList\n        val numsListTupleAverage = numsListTuple.map(x => (x(0) + x(1)) / 2.0f)\n        numsListTupleAverage",
    "        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.zipWithIndex\n        val numsTupleList = numsTuple.groupBy(x => x._2 % 3)\n        val numsTupleList2 = numsTupleList.map(x => x._2.map(y => y._1))\n        val numsTupleList3 = numsTupleList2.map(x => x.sum)\n        val numsTupleList4 = numsTupleList3.map(x => x.toFloat / 3)\n        numsTupleList4.toList",
    "        val numsList = nums.toString.split(\"\").toList.map(x => x.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(y => y.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg",
    "        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)",
    "        val list = ListBuffer[Float]()\n        for (i <- 0 until nums.toInt) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList",
    "        val list = ListBuffer[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            val num = nums.toString.charAt(i).toString.toInt\n            list += num.toFloat\n        }\n        list.toList",
    "        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).toString.toInt.toFloat\n        }\n        result.map(x => x / nums.toString.length)",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += 1.0 / j\n            }\n            result = result :+ sum.toFloat\n        }\n        result",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsListTuple = numsList.grouped(2).toList\n        val numsListTupleAverage = numsListTuple.map(x => x.sum.toFloat / x.length)\n        numsListTupleAverage",
    "        val nums2 = nums.toString.split(\"\").map(x => x.toInt).toList\n        val nums3 = nums2.combinations(2).toList\n        val nums4 = nums3.map(x => x.reduceLeft(_ * _))\n        val nums5 = nums4.map(x => x.toFloat)\n        val nums6 = nums5.map(x => x / 2)\n        nums6",
    "        val tuples = List((1,2),(3,4),(5,6),(7,8),(9,10))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList",
    "        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        tuples.map(t => t._1 + t._2 + t._3).map(t => t / 3.0f).toList",
    "        val tuples = List((1,2), (3,4), (5,6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result",
    "        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsTuple = numsList.sliding(2, 2).toList\n        numsTuple.map(x => (x(0) + x(1)) / 2.0f).toList",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        numsTuple.map(x => x.sum.toFloat / x.length).toList",
    "        var list = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += Random.nextInt(nums.toInt)\n            }\n            list = (sum / nums.toInt) :: list\n        }\n        list",
    "        val numsList = nums.toString.split(\"\").map(_.toInt).toList\n        val numsList2 = numsList.map(x => List.fill(x)(x))\n        val numsList3 = numsList2.flatten\n        val numsList4 = numsList3.grouped(2).toList\n        val numsList5 = numsList4.map(x => (x(0), x(1)))\n        val numsList6 = numsList5.map(x => (x._1 + x._2) / 2.0f)\n        numsList6",
    "        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        val result = tuples.map(t => t._1 + t._2 + t._3)\n        result.map(t => t.toFloat / 3)",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => (x(0).toFloat + x(1).toFloat) / 2)\n        numsTupleFloat",
    "        val list = ListBuffer[Float]()\n        for (i <- 0 to nums.toInt - 1) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList",
    "        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += pow(i, j)\n            }\n            lst = lst :+ (sum / nums)\n        }\n        return lst",
    "        val list = ListBuffer[Float]()\n        for (i <- 0 until nums) {\n            val num = (random * 100).toInt\n            list += num\n        }\n        list.toList",
    "        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.io.StdIn.readLine.split(\" \").map(_.toFloat)\n            list += num.sum / num.length\n        }\n        list.toList",
    "        val list = List(nums)\n        val tuple = Tuple1(list)\n        val tupleOfTuples = Tuple1(tuple)\n        val sum = tupleOfTuples._1._1.sum\n        val size = tupleOfTuples._1._1.size\n        val average = sum.toFloat / size\n        List(average)",
    "        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = (sum / nums.toInt) :: result\n        }\n        result",
    "        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        tuples.map(x => x._1 + x._2 + x._3).map(x => x.toFloat / 3).toList"
  ]
}