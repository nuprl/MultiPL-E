{
  "name": "mbpp_406_find_Parity",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= n - 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n != 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        if (count % 2 == 0) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num != 0) {\n            if ((num & 1) == 1) count += 1\n            num >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var y = x\n        while (y > 0) {\n            parity = !parity\n            y = y & (y - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmgddnih_.scala:15)\n\tat Problem.main(tmpmgddnih_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x == 0) return false\n        var count = 0\n        var n = x\n        while (n != 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num > 0) {\n            if (num % 2 == 1) count += 1\n            num /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var n = x\n        while (n > 0) {\n            parity ^= 1\n            n &= (n - 1)\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var n = x\n        while (n > 0) {\n            parity ^= 1\n            n &= n - 1\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        if (count % 2 == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n = n >> 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var n = x\n        while (n != 0) {\n            parity = parity ^ (n & 1)\n            n = n >> 1\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdm5537ub.scala:9:21 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            parity = parity ^ (n & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Found:    Long\n\u001b[31m  |\u001b[0m                     Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) return false\n        else return true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var y = x\n        while (y > 0) {\n            if ((y & 1) == 1) count += 1\n            y >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var n = x\n        var parity = false\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var n = x\n        var parity = false\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += n & 1\n            n >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu5h4lkm_.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += n & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var y = x\n        while (y != 0) {\n            parity = !parity\n            y = y & (y - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzm4i3_i1.scala:15)\n\tat Problem.main(tmpzm4i3_i1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var temp = x\n        while (temp > 0) {\n            if (temp % 2 == 1) count += 1\n            temp /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var x1 = x\n        while (x1 > 0) {\n            if (x1 % 2 == 1) count += 1\n            x1 /= 2\n        }\n        if (count % 2 == 0) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var num = x\n        while (num > 0) {\n            parity = !parity\n            num = num & (num - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm1x1k6c8.scala:15)\n\tat Problem.main(tmpm1x1k6c8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var temp = x\n        while (temp > 0) {\n            if ((temp & 1) == 1) count += 1\n            temp >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        return x % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptieep0bm.scala:9)\n\tat Problem.main(tmptieep0bm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) return false\n        else return true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var x1 = x\n        while (x1 != 0) {\n            parity ^= 1\n            x1 &= (x1 - 1)\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity : Boolean = true\n        var n : Long = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0zrnzqly.scala:15)\n\tat Problem.main(tmp0zrnzqly.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var y = x\n        while (y > 0) {\n            if ((y & 1) == 1) count += 1\n            y >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) false\n        else true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) {\n                count += 1\n            }\n            n /= 2\n        }\n        if (count % 2 == 1) {\n            parity = true\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var y = x\n        while (y != 0) {\n            parity = !parity\n            y = y & (y - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var n = x\n        var parity = false\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var n = x\n        while (n > 0) {\n            parity += 1\n            n &= n - 1\n        }\n        parity % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n != 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var y = x\n        while (y > 0) {\n            if ((y & 1) == 1) count += 1\n            y >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var y = x\n        while (y != 0) {\n            parity ^= (y & 1)\n            y >>= 1\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124033,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa4x50ieu.scala:9:19 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            parity ^= (y & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value ^= is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) return false\n        else return true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var temp = x\n        while (temp > 0) {\n            count += 1\n            temp &= temp - 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        while (x > 0) {\n            parity = !parity\n            x = x & (x - 1)\n        }\n        parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpndcebfq1.scala:9:14 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            x = x & (x - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            Reassignment to val x\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num != 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var sum = 0\n        var n = x\n        while (n > 0) {\n            sum += n & 1\n            n = n >> 1\n        }\n        return sum % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8xtvejzr.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            sum += n & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= n - 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) return false\n        else return true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= n - 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var y = x\n        while (y != 0) {\n            parity = !parity\n            y = y & (y - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzm4i3_i1.scala:15)\n\tat Problem.main(tmpzm4i3_i1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var temp = x\n        while (temp != 0) {\n            count += 1\n            temp = temp & (temp - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= n - 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var temp = x\n        while (temp > 0) {\n            if (temp % 2 == 1) count += 1\n            temp /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var n = x\n        while (n != 0) {\n            parity ^= (n & 1)\n            n >>= 1\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpej85r8ew.scala:9:19 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            parity ^= (n & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value ^= is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        return (x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppupnjg5g.scala:9)\n\tat Problem.main(tmppupnjg5g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity : Boolean = true\n        var n : Long = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0zrnzqly.scala:15)\n\tat Problem.main(tmp0zrnzqly.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var n = x\n        while (n > 0) {\n            parity = parity ^ (n & 1)\n            n = n >> 1\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76rv3qic.scala:9:21 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            parity = parity ^ (n & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Found:    Long\n\u001b[31m  |\u001b[0m                     Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n &= (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwpuvstjc.scala:15)\n\tat Problem.main(tmpwpuvstjc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var temp = x\n        while (temp != 0) {\n            count += 1\n            temp = temp & (temp - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var num = x\n        while(num > 0) {\n            parity += 1\n            num &= num - 1\n        }\n        return parity % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var y = x\n        while (y != 0) {\n            parity ^= 1\n            y &= (y - 1)\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num > 0) {\n            if (num % 2 == 1) count += 1\n            num /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n = n >> 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        return (count % 2) == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n != 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity : Boolean = false\n        var x_copy : Long = x\n        while (x_copy > 0) {\n            parity = !parity\n            x_copy = x_copy & (x_copy - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        return (x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppupnjg5g.scala:9)\n\tat Problem.main(tmppupnjg5g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var y = x\n        while (y != 0) {\n            parity = !parity\n            y &= y - 1\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprf39uzjx.scala:15)\n\tat Problem.main(tmprf39uzjx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var sum = 0\n        var n = x\n        while (n > 0) {\n            sum += n % 2\n            n /= 2\n        }\n        return sum % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp85mrxvby.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            sum += n % \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= n - 1\n        }\n        count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += n & 1\n            n >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu5h4lkm_.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += n & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n != 0) {\n            if ((n & 1) == 1) count += 1\n            n = n >> 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num >>= 1\n        }\n        return (count % 2) == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var n = x\n        var parity = false\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var y = x\n        while (y > 0) {\n            count += y & 1\n            y >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp653oh_gs.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += y & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num > 0) {\n            if ((num & 1) == 1) {\n                count += 1\n            }\n            num >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n != 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) return false\n        else return true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var n = x\n        while (n != 0) {\n            parity = parity ^ (n & 1)\n            n = n >> 1\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdm5537ub.scala:9:21 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            parity = parity ^ (n & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Found:    Long\n\u001b[31m  |\u001b[0m                     Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) return false\n        else return true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity : Boolean = false\n        var n : Long = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var temp = x\n        while (temp > 0) {\n            if (temp % 2 == 1) count += 1\n            temp /= 2\n        }\n        count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxg1i700x.scala:15)\n\tat Problem.main(tmpxg1i700x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n = n >> 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var y = x\n        var parity = false\n        while (y != 0) {\n            parity = !parity\n            y = y & (y - 1)\n        }\n        parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var temp = x\n        while (temp != 0) {\n            if ((temp & 1) == 1) count += 1\n            temp >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        return x % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n = n >> 1\n        }\n        return (count % 2) == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num > 0) {\n            if (num % 2 == 1) count += 1\n            num /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var y = x\n        while (y > 0) {\n            parity = !parity\n            y = y & (y - 1)\n        }\n        parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) return false\n        else return true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var temp = x\n        while (temp != 0) {\n            if ((temp & 1) == 1) count += 1\n            temp >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var n = x\n        while (n > 0) {\n            parity = parity ^ (n & 1)\n            n = n >> 1\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76rv3qic.scala:9:21 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            parity = parity ^ (n & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Found:    Long\n\u001b[31m  |\u001b[0m                     Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num != 0) {\n            if ((num & 1) == 1) count += 1\n            num >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var y = x\n        while (y > 0) {\n            count += y & 1\n            y >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp653oh_gs.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += y & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) false\n        else true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxg1i700x.scala:15)\n\tat Problem.main(tmpxg1i700x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var y = x\n        while (y > 0) {\n            if ((y & 1) == 1) count += 1\n            y >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += n & 1\n            n >>= 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu5h4lkm_.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += n & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n = n >> 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= n - 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var y = x\n        while (y > 0) {\n            if ((y & 1) == 1) count += 1\n            y >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            n = n & (n - 1)\n            count += 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n != 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var y = x\n        while (y != 0) {\n            count += 1\n            y = y & (y - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var sum = 0L\n        var n = x\n        while (n > 0) {\n            sum += n % 2\n            n /= 2\n        }\n        return sum % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var n = x\n        while (n > 0) {\n            parity ^= (n & 1)\n            n >>= 1\n        }\n        return parity == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv4zrmfke.scala:9:19 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            parity ^= (n & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value ^= is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity : Boolean = true\n        var n : Long = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0zrnzqly.scala:15)\n\tat Problem.main(tmp0zrnzqly.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var y = x\n        while (y != 0) {\n            parity = !parity\n            y = y & (y - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = 0\n        var num = x\n        while (num > 0) {\n            parity += 1\n            num &= (num - 1)\n        }\n        return parity % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if (n % 2 == 1) count += 1\n            n /= 2\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxg1i700x.scala:15)\n\tat Problem.main(tmpxg1i700x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var n = x\n        var parity = false\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= n - 1\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n != 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n = n >> 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = true\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_coh8nnd.scala:15)\n\tat Problem.main(tmp_coh8nnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var y = x\n        var parity = false\n        while (y != 0) {\n            parity = !parity\n            y = y & (y - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n &= (n - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            count += 1\n            n = n & (n - 1)\n        }\n        count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var sum = 0\n        var n = x\n        while (n > 0) {\n            sum += n % 2\n            n /= 2\n        }\n        return sum % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp85mrxvby.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            sum += n % \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        return x % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var sum = 0\n        var n = x\n        while (n > 0) {\n            sum += n % 2\n            n /= 2\n        }\n        return sum % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp85mrxvby.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            sum += n % \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var y = x\n        while (y > 0) {\n            if ((y & 1) == 1) count += 1\n            y >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var parity = false\n        var n = x\n        while (n > 0) {\n            parity = !parity\n            n = n & (n - 1)\n        }\n        return parity\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        if (x % 2 == 0) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var num = x\n        while (num > 0) {\n            count += 1\n            num = num & (num - 1)\n        }\n        return count % 2 == 1\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n        var count = 0\n        var n = x\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        return (count % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}