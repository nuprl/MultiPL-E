{
  "name": "mbpp_773_occurance_substring",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == patternLength - 1) {\n                    return Some(Right(index))\n                }\n                j += 1\n            }\n            else {\n                j = 0\n                index = i + 1\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    j = 0\n                    count += 1\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(count))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return None\n        val p = pattern.toCharArray\n        val t = text.toCharArray\n        var i = 0\n        var j = 0\n        var h = 0\n        var d = 256\n        var q = 101\n        var ht = 0\n        var hp = 0\n        var result : Option[Either[String, Long]] = None\n        while (i < m) {\n            h = (h * d + p(i)) % q\n            hp = (hp * d + t(i)) % q\n            i += 1\n        }\n        i = 0\n        while (i <= n - m) {\n            if (h == hp) {\n                j = 0\n                while (j < m && p(j) == t(i + j)) j += 1\n                if (j == m) {\n                    result = Some(Right(i))\n                    return result\n                }\n            }\n            if (i < n - m) {\n                hp = (d * (hp - t(i) * ht) + t(i + m)) % q\n                if (hp < 0) hp += q\n            }\n            i += 1\n        }\n        result",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        }\n        return Some(Right(count))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val n = text.length\n        val m = pattern.length\n        if (n < m) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, m).hashCode\n        var i = 0\n        while (i <= n - m) {\n            if (patternHash == textHash) {\n                if (text.substring(i, i + m) == pattern) return Some(Right(i))\n            }\n            if (i < n - m) {\n                textHash = textHash - text(i).toInt + text(i + m).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var flag = false\n        while(i < textLength) {\n            if(text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if(j == patternLength) {\n                count += 1\n                j = 0\n                flag = true\n            }\n        }\n        if(flag) Some(Right(count))\n        else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) None\n        else Some(Right(count))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        if (occurance == 1) return Some(Right(position))\n        Some(Left(occurance.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) {\n            return None\n        }\n        return Some(Right(position))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub.hashCode == patternHash) {\n                if (sub == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            i += 1\n        }\n        return None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                found = true\n                index = i - j\n                j = 0\n            }\n        }\n        if (found) return Some(Right(index))\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            var index = 0\n            while (i < textLength && j < patternLength) {\n                if (textArray(i) == patternArray(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Some(Right(i - j))\n            } else {\n                None\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            val subText = text.substring(i, i + patternLength)\n            val subTextHash = subText.hashCode\n            if (subTextHash == patternHash) {\n                return Some(Left(subText))\n            }\n            i += 1\n        }\n        return None",
    "        val n = text.length\n        val m = pattern.length\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Some(Right(i))\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        }\n        if (count == 1) {\n            return Some(Right(position))\n        }\n        return Some(Left(count.toString))",
    "        val result = text.indexOf(pattern)\n        if (result == -1) None\n        else Some(Right(result))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub == pattern) return Some(Right(i))\n        }\n        Some(Left(\"No match\"))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        var index = 0\n        while (i < textLength && !found) {\n            if (textArray(i) == patternArray(j)) {\n                j += 1\n                i += 1\n                if (j == patternLength) {\n                    found = true\n                    index = i - patternLength\n                }\n            } else {\n                j = 0\n                i = k + 1\n                k = i\n            }\n        }\n        if (found) {\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength) {\n                if (text(i + j) != pattern(j)) break\n                j += 1\n            }\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        }\n        if (count == 1) {\n            return Some(Right(position))\n        }\n        return Some(Left(count.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        val patternHash = patternArray.foldLeft(0L)((acc, c) => acc + c)\n        var windowHash = 0L\n        for (i <- 0 until patternLength) {\n            windowHash += textArray(i)\n        }\n        for (i <- 0 until textLength - patternLength + 1) {\n            if (windowHash == patternHash) {\n                var matchFound = true\n                for (j <- 0 until patternLength) {\n                    if (textArray(i + j) != patternArray(j)) {\n                        matchFound = false\n                        break\n                    }\n                }\n                if (matchFound) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                windowHash -= textArray(i)\n                windowHash += textArray(i + patternLength)\n            }\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var index = 0\n        var found = false\n        while (index < textLength - patternLength + 1) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                found = true\n                return Some(Right(index))\n            }\n            index += 1\n        }\n        if (found) Some(Left(\"Found\")) else None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        var found = false\n        while(i < textLength && j < patternLength) {\n            if(text(i) == pattern(j)) {\n                if(j == 0) position = i\n                i += 1\n                j += 1\n            } else {\n                if(j != 0) {\n                    j = 0\n                    i = position + 1\n                } else {\n                    i += 1\n                }\n            }\n            if(j == patternLength) {\n                occurance += 1\n                j = 0\n            }\n        }\n        if(occurance > 0) {\n            Some(Right(occurance))\n        } else {\n            None\n        }",
    "        val pos = text.indexOf(pattern)\n        if (pos == -1) None\n        else Some(Right(pos))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    break\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (found) return Some(Right(index))\n        return None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val result = text.indexOf(pattern)\n        if (result == -1) None\n        else Some(Right(result.toLong))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            None\n        } else {\n            val patternHash = pattern.hashCode\n            val textHash = text.substring(0, patternLength).hashCode\n            var i = 0\n            while (i <= textLength - patternLength) {\n                if (textHash == patternHash) {\n                    if (text.substring(i, i + patternLength) == pattern) {\n                        return Some(Right(i))\n                    }\n                }\n                if (i < textLength - patternLength) {\n                    textHash = textHash - text.charAt(i).toInt + text.charAt(i + patternLength).toInt\n                }\n                i += 1\n            }\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var count = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                count += 1\n                index = i - j\n                j = 0\n            }\n        }\n        if (count == 0) return None\n        else if (count == 1) return Some(Right(index))\n        else return Some(Left(count.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        val textHash = text.substring(0, patternLength).hashCode\n        if (patternHash == textHash) return Some(Right(1))\n        var i = 2\n        while (i <= textLength - patternLength + 1) {\n            textHash = (textHash - text(i - 2).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength - 2).toInt\n            if (patternHash == textHash) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        val patternHash = patternArray.foldLeft(0L)((acc, x) => acc + x.toLong)\n        val textHash = textArray.take(patternLength).foldLeft(0L)((acc, x) => acc + x.toLong)\n        if (patternHash == textHash) return Some(Right(0))\n        var i = 1\n        while (i <= textLength - patternLength) {\n            val newHash = textHash - textArray(i - 1).toLong + textArray(i + patternLength - 1).toLong\n            if (newHash == patternHash) {\n                var j = 0\n                while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n                if (j == patternLength) return Some(Right(i))\n            }\n            textHash = newHash\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i.toLong))\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n                if (text(i) == pattern(j)) {\n                    position = i\n                    j += 1\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else return Some(Left(occurance.toString + \" \" + position.toString))",
    "        var result = new ListBuffer[Long]()\n        var index = 0\n        while (index < text.length) {\n            if (text.substring(index).startsWith(pattern)) {\n                result += index\n                index += pattern.length\n            } else {\n                index += 1\n            }\n        }\n        if (result.length == 0) None else Some(Right(result.length))",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            val occurance = text.split(pattern).length - 1\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        if (occurance == 1) return Some(Right(position))\n        return Some(Left(occurance.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0L\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                if (!found) {\n                    position = i\n                    found = true\n                }\n                i += 1\n                j += 1\n            } else {\n                if (found) {\n                    i = position + 1\n                    j = 0\n                    found = false\n                } else {\n                    i += 1\n                }\n            }\n        }\n        if (j == patternLength) Some(Right(position)) else None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                j += 1\n                if (j == patternLength) return Some(Right(i - patternLength + 1))\n            }\n            else {\n                i -= j\n                j = 0\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        val patternHash = patternArray.foldLeft(0L)((acc, x) => acc + x.toLong)\n        var textHash = 0L\n        for (i <- 0 until patternLength) {\n            textHash += textArray(i).toLong\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (textHash == patternHash) {\n                var j = 0\n                while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Some(Right(i))\n                }\n            }\n            textHash -= textArray(i).toLong\n            if (i + patternLength < textLength) {\n                textHash += textArray(i + patternLength).toLong\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var found = false\n        var index = 0\n        var count = 0\n        while(i < textLength && j < patternLength) {\n            if(text(i) == pattern(j)) {\n                if(j == 0) index = i\n                i += 1\n                j += 1\n            } else {\n                if(j != 0) {\n                    j = 0\n                    i = index + 1\n                } else {\n                    i += 1\n                }\n            }\n            if(j == patternLength) {\n                found = true\n                count += 1\n                j = 0\n            }\n        }\n        if(found) Some(Right(count)) else None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    position = i - patternLength\n                    j = 0\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) None else Some(Right(position))",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            Some(Left(\"No match\"))\n        }",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            val count = text.split(pattern).length - 1\n            Some(Right(index))\n        } else None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        val patternHash = patternArray.foldLeft(0L)((acc, c) => acc + c.toLong)\n        var textHash = 0L\n        var i = 0\n        while (i < patternLength) {\n            textHash += textArray(i).toLong\n            i += 1\n        }\n        if (textHash == patternHash) {\n            return Some(Right(0))\n        }\n        var j = 0\n        while (j < textLength - patternLength) {\n            textHash -= textArray(j).toLong\n            textHash += textArray(j + patternLength).toLong\n            if (textHash == patternHash) {\n                return Some(Right(j + 1))\n            }\n            j += 1\n        }\n        return None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        }\n        else if (count == 1) {\n            return Some(Right(position))\n        }\n        else {\n            return Some(Left(count.toString))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                j += 1\n                if (j == patternLength) {\n                    return Some(Right(index))\n                }\n            } else {\n                j = 0\n                index = i + 1\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (textHash == patternHash && text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = textHash - text.charAt(i).toInt + text.charAt(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = -1\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(count))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            textHash = textHash - text(i).toInt + text(i + patternLength).toInt\n            i += 1\n        }\n        if (textHash == patternHash) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        var result = new ListBuffer[Long]\n        var i = 0\n        while (i < text.length - pattern.length + 1) {\n            if (text.substring(i, i + pattern.length) == pattern) {\n                result += i\n            }\n            i += 1\n        }\n        if (result.length == 0) None\n        else Some(Right(result.length))",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val index = text.indexOf(pattern)\n        if (index == -1) {\n            None\n        } else {\n            Some(Right(index))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val patternHash = pattern.hashCode\n        for (i <- 0 to textLength - patternLength) {\n            val substring = text.substring(i, i + patternLength)\n            if (substring.hashCode == patternHash) return Some(Right(i))\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var index = 0\n        var occurance = 0\n        var position = 0L\n        while (index < textLength) {\n            if (text(index) == pattern(0)) {\n                var i = 1\n                while (i < patternLength && index + i < textLength && text(index + i) == pattern(i)) {\n                    i += 1\n                }\n                if (i == patternLength) {\n                    occurance += 1\n                    position = position * 10 + index\n                }\n            }\n            index += 1\n        }\n        if (occurance == 0) return None\n        if (occurance == 1) return Some(Right(position))\n        Some(Left(occurance.toString + \" \" + position))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        if (textLength == patternLength) {\n            if (text == pattern) return Some(Left(text))\n            else return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var currentHash = text.substring(0, patternLength).hashCode\n        var currentIndex = 0\n        while (currentIndex + patternLength <= textLength) {\n            if (currentHash == patternHash) {\n                val subString = text.substring(currentIndex, currentIndex + patternLength)\n                if (subString == pattern) return Some(Right(currentIndex))\n            }\n            currentHash = if (currentIndex + patternLength < textLength) {\n                val nextChar = text.charAt(currentIndex + patternLength)\n                (currentHash - text.charAt(currentIndex) * pow(31, patternLength - 1).toInt + nextChar * pow(31, patternLength - 1).toInt) % Int.MaxValue\n            } else {\n                text.substring(currentIndex + 1, currentIndex + patternLength + 1).hashCode\n            }\n            currentIndex += 1\n        }\n        None",
    "        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) None\n        else {\n            val start = result.get.start\n            val end = result.get.end\n            val sub = text.substring(start, end)\n            Some(Right(start))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == patternLength - 1) {\n                    return Some(Right(index))\n                }\n                i += 1\n                j += 1\n            } else {\n                i = index + 1\n                j = 0\n                index = i\n            }\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var flag = true\n            for (j <- 0 to patternLength - 1) {\n                if (textArray(i + j) != patternArray(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return Some(Right(i))\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        var result = \"\"\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    result += (position + 1) + \" \"\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                count += 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(count))\n        }",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        else if (count == 1) return Some(Right(position))\n        else return Some(Left(count.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub == pattern) {\n                return Some(Right(i))\n            }\n        }\n        None",
    "        if (text.contains(pattern)) {\n            Some(Right(text.indexOf(pattern)))\n        } else {\n            Some(Left(\"No match\"))\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        val textHash = new Array[Long](textLength)\n        val patternHash = new Array[Long](patternLength)\n        val base = 31\n        var basePower = 1L\n        for (i <- 0 until patternLength) {\n            patternHash(i) = patternArray(i) * basePower\n            basePower *= base\n        }\n        basePower = 1L\n        for (i <- 0 until textLength) {\n            textHash(i) = textArray(i) * basePower\n            if (i > 0) {\n                textHash(i) += textHash(i - 1)\n            }\n            basePower *= base\n        }\n        var patternHashValue = 0L\n        for (i <- 0 until patternLength) {\n            patternHashValue += patternHash(i)\n        }\n        for (i <- 0 until textLength - patternLength + 1) {\n            val textHashValue = textHash(i + patternLength - 1) - (if (i == 0) 0 else textHash(i - 1))\n            if (patternHashValue == textHashValue) {\n                var found = true\n                for (j <- 0 until patternLength) {\n                    if (textArray(i + j) != patternArray(j)) {\n                        found = false\n                    }\n                }\n                if (found) {\n                    return Some(Right(i))\n                }\n            }\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var found = false\n        var result = \"\"\n        var count = 0\n        while(i < textLength && j < patternLength) {\n            if(text(i) == pattern(j)) {\n                if(!found) {\n                    found = true\n                    result += i + \" \"\n                    count += 1\n                }\n                i += 1\n                j += 1\n            } else {\n                if(found) {\n                    found = false\n                    j = 0\n                } else i += 1\n            }\n        }\n        if(count == 0) None\n        else Some(Left(result))",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val patternHash = pattern.hashCode\n        val patternHashList = new ArrayBuffer[Int]()\n        var hash = 0\n        for (i <- 0 until patternLength) {\n            hash += text(i).toInt\n            patternHashList += hash\n        }\n        var hashList = new ArrayBuffer[Int]()\n        hashList += hash\n        for (i <- patternLength until textLength) {\n            hash = hash - text(i - patternLength).toInt + text(i).toInt\n            hashList += hash\n        }\n        val result = new ArrayBuffer[Long]()\n        for (i <- 0 until textLength - patternLength + 1) {\n            if (hashList(i) == patternHash) {\n                var flag = true\n                for (j <- 0 until patternLength) {\n                    if (text(i + j) != pattern(j)) {\n                        flag = false\n                        break\n                    }\n                }\n                if (flag) result += i\n            }\n        }\n        if (result.length == 0) None\n        else Some(Right(result(0)))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == patternLength - 1) {\n                    index = i - j\n                    return Some(Right(index))\n                }\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) {\n            None\n        } else {\n            Some(Right(occurance))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            var i = 0\n            while (i < textLength - patternLength + 1) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Some(Right(i))\n                }\n                i += 1\n            }\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) return Some(Right(i - j))\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val result = text.indexOf(pattern)\n        if (result == -1) None\n        else Some(Right(result))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                j = 0\n                k += 1\n                i = k\n            }\n            if (j == patternLength) {\n                found = true\n                return Some(Right(k.toLong))\n            }\n        }\n        if (found) {\n            return Some(Left(text.substring(k, k + patternLength)))\n        } else {\n            return None\n        }",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (text.substring(i, i + patternLength) == pattern) return Some(Right(i.toLong))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text.charAt(i).toInt) + text.charAt(i + patternLength).toInt\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var result : Option[Either[String, Long]] = None\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == patternLength - 1) {\n                    result = Some(Right(i - j))\n                    break\n                }\n                else j += 1\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        result",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub.hashCode == patternHash) {\n                if (sub.equals(pattern)) return Some(Right(i))\n                else return Some(Left(sub))\n            }\n            i += 1\n        }\n        None",
    "        val result = text.indexOf(pattern)\n        if (result == -1) None else Some(Right(result))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == patternLength - 1) {\n                    found = true\n                    break\n                }\n                i += 1\n                j += 1\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (found) Some(Right(i - patternLength + 1)) else None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                found = true\n                position = i - j\n            }\n        }\n        if (found) {\n            Some(Right(position.toLong))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        None",
    "        val result = text.indexOf(pattern)\n        if (result == -1) None\n        else Some(Right(result))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                count += 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(count))\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var index = 0\n        var found = false\n        while (index <= textLength - patternLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                found = true\n                return Some(Right(index))\n            }\n            index += 1\n        }\n        if (found) {\n            Some(Left(text))\n        } else {\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var index = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                found = true\n                index = i - j\n            }\n        }\n        if (found) {\n            Some(Right(index))\n        } else {\n            Some(Left(\"No match\"))\n        }",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = textHash - text.charAt(i).toInt + text.charAt(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val result = text.indexOf(pattern)\n        if (result == -1) None else Some(Right(result))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                count += 1\n                j = 0\n            }\n        }\n        if (count == 0) return None\n        else if (count == 1) return Some(Right(i - patternLength))\n        else return Some(Left(count.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = textHash - text(i).toInt + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) return None\n        else if (count == 1) return Some(Right(i - patternLength))\n        else return Some(Left(count.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) None\n        else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            var found = false\n            var position = -1\n            while (i < textLength && j < patternLength) {\n                if (textArray(i) == patternArray(j)) {\n                    if (j == 0) position = i\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n                if (j == patternLength) {\n                    found = true\n                    j = 0\n                }\n            }\n            if (found) Some(Right(position))\n            else None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    break\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (found) Some(Right(position)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (textLength < patternLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub.hashCode == patternHash) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        var result = \"\"\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == patternLength - 1) {\n                    count += 1\n                    result += (i - patternLength + 1).toString + \" \"\n                    j = 0\n                } else {\n                    j += 1\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            None\n        } else {\n            Some(Right(count))\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var index = -1\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    index = i\n                }\n                if (j == patternLength - 1) {\n                    return Some(Right(index))\n                }\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    i = index + 1\n                    j = 0\n                } else {\n                    i += 1\n                }\n                index = -1\n            }\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var currentHash = text.substring(0, patternLength).hashCode\n        for (i <- 0 to textLength - patternLength) {\n            if (currentHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                currentHash = (currentHash - text.charAt(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text.charAt(i + patternLength).toInt\n            }\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub.hashCode == patternHash) {\n                if (sub.equals(pattern)) {\n                    return Some(Right(i))\n                }\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                found = true\n                break\n            }\n        }\n        if (found) Some(Right(i - j)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (!found) return Some(Left(\"Not found\"))\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = textHash - text(i).toInt + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                count += 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(count))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        var j = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                var k = 0\n                while (k < patternLength && pattern(k) == text(i + k)) {\n                    k += 1\n                }\n                if (k == patternLength) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = textHash - text(i).toInt + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        return None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i < textLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var index = 0\n        var found = false\n        var result = \"\"\n        while (index <= textLength - patternLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                found = true\n                result += index + \" \"\n            }\n            index += 1\n        }\n        if (found) return Some(Right(result.trim.toLong))\n        else return None",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            val occurance = text.split(pattern).length - 1\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        if (text.contains(pattern)) {\n            Some(Right(text.indexOf(pattern)))\n        } else {\n            Some(Left(\"No match\"))\n        }",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return None\n        val hash = new HashMap[String, Long]\n        var h = 0L\n        for (i <- 0 until m) h = h * 31 + pattern(i)\n        for (i <- 0 until n - m + 1) {\n            val sub = text.substring(i, i + m)\n            if (hash.contains(sub)) return Some(Right(hash(sub)))\n            hash(sub) = i\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    j = 0\n                    i = position + 1\n                } else {\n                    i += 1\n                }\n            }\n            if (j == patternLength) {\n                found = true\n                return Some(Right(position.toLong))\n            }\n        }\n        if (found) Some(Right(position.toLong)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (found) return Some(Right(count))\n        else return Some(Left(position.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textChars = text.toCharArray\n        val patternChars = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (textChars(i) == patternChars(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) None else Some(Right(count))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var k = 0\n        var t = 0\n        var h = 1\n        for (i <- 0 until patternLength - 1) h = (h * 256) % 101\n        i = 0\n        while (i < patternLength) {\n            j = (j * 256 + text(i).toInt) % 101\n            k = (k * 256 + pattern(i).toInt) % 101\n            i += 1\n        }\n        i = 0\n        while (i <= textLength - patternLength) {\n            if (j == k) {\n                t = i\n                var flag = true\n                for (j <- 0 until patternLength) {\n                    if (text(t) != pattern(j)) {\n                        flag = false\n                        break\n                    }\n                    t += 1\n                }\n                if (flag) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                j = (j - text(i).toInt * h) % 101\n                if (j < 0) j += 101\n                j = (j * 256 + text(i + patternLength).toInt) % 101\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var index = 0\n        var count = 0\n        while (index < textLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                count += 1\n                index += patternLength\n            }\n            else index += 1\n        }\n        if (count == 0) return None\n        else return Some(Right(count))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var k = 0\n        var t = 0\n        var h = 0\n        var p = 0\n        var q = 0\n        var d = 0\n        var count = 0\n        var result = \"\"\n        var position = 0L\n        d = 256\n        h = pow(d, patternLength - 1).toInt\n        p = 0\n        q = 0\n        for (i <- 0 until patternLength) {\n            p = (d * p + pattern(i)) % 101\n            q = (d * q + text(i)) % 101\n        }\n        for (i <- 0 until textLength - patternLength + 1) {\n            if (p == q) {\n                for (j <- 0 until patternLength) {\n                    if (text(i + j) != pattern(j)) break\n                    if (j == patternLength - 1) {\n                        count += 1\n                        result += (i + 1) + \" \"\n                        position += i + 1\n                    }\n                }\n            }\n            if (i < textLength - patternLength) {\n                q = (d * (q - text(i) * h) + text(i + patternLength)) % 101\n                if (q < 0) q = (q + 101)\n            }\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(position))\n        return Some(Left(result))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) None\n        else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            val textHash = new Array[Int](textLength - patternLength + 1)\n            val patternHash = new Array[Int](patternLength)\n            val base = 256\n            var power = 1\n            for (i <- 0 until patternLength) {\n                patternHash(i) = patternArray(i).toInt\n                if (i != 0) power = (power * base) % 1000000007\n            }\n            var hash = 0\n            for (i <- 0 until patternLength) hash = (hash * base + textArray(i).toInt) % 1000000007\n            textHash(0) = hash\n            for (i <- 1 to textLength - patternLength) {\n                hash = (hash * base - textArray(i - 1).toInt * power % 1000000007 + textArray(i + patternLength - 1).toInt) % 1000000007\n                if (hash < 0) hash += 1000000007\n                textHash(i) = hash\n            }\n            for (i <- 0 to textLength - patternLength) {\n                var match = true\n                for (j <- 0 until patternLength) {\n                    if (textArray(i + j) != patternArray(j)) {\n                        match = false\n                        break\n                    }\n                }\n                if (match) return Some(Right(i.toLong))\n            }\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        val patternHash = patternArray.foldLeft(0L)((acc, x) => acc + x)\n        var textHash = textArray.take(patternLength).foldLeft(0L)((acc, x) => acc + x)\n        for (i <- 0 to textLength - patternLength) {\n            if (textHash == patternHash) {\n                var isMatch = true\n                for (j <- 0 until patternLength) {\n                    if (textArray(i + j) != patternArray(j)) {\n                        isMatch = false\n                        break\n                    }\n                }\n                if (isMatch) return Some(Right(i))\n            }\n            if (i + patternLength < textLength) {\n                textHash = textHash - textArray(i) + textArray(i + patternLength)\n            }\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    j = 0\n                    i = position + 1\n                } else {\n                    i += 1\n                }\n            }\n            if (j == patternLength) {\n                found = true\n                j = 0\n                i = position + 1\n            }\n        }\n        if (found) Some(Right(position)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                j += 1\n                if (j == patternLength) {\n                    return Some(Right(i - patternLength + 1))\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                j += 1\n                if (j == patternLength) return Some(Right(i - patternLength + 1))\n            } else {\n                i -= j\n                j = 0\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                return Some(Right(i - j))\n            }\n        }\n        None",
    "        val n = text.length\n        val m = pattern.length\n        val lps = Array.fill(m)(0)\n        var i = 1\n        var j = 0\n        while (i < m) {\n            if (pattern(i) == pattern(j)) {\n                lps(i) = j + 1\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) j = lps(j - 1)\n                else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        i = 0\n        j = 0\n        while (i < n) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            if (j == m) {\n                return Some(Right(i - j))\n            } else if (i < n && text(i) != pattern(j)) {\n                if (j != 0) j = lps(j - 1)\n                else i += 1\n            }\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var textIndex = 0\n        var patternIndex = 0\n        var occurance = 0\n        var position = 0\n        while (textIndex < textLength) {\n            if (text(textIndex) == pattern(patternIndex)) {\n                if (patternIndex == 0) {\n                    position = textIndex\n                }\n                patternIndex += 1\n                if (patternIndex == patternLength) {\n                    occurance += 1\n                    patternIndex = 0\n                }\n            }\n            else {\n                patternIndex = 0\n            }\n            textIndex += 1\n        }\n        if (occurance == 0) {\n            return None\n        }\n        else if (occurance == 1) {\n            return Some(Right(position))\n        }\n        else {\n            return Some(Left(occurance.toString))\n        }",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var result = ListBuffer[Long]()\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                result += i\n            }\n        }\n        if (result.length == 0) None\n        else Some(Right(result.length))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub.hashCode == patternHash) {\n                if (sub == pattern) return Some(Right(i))\n                else return Some(Left(sub))\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = -1\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                if (j == patternLength - 1) {\n                    count += 1\n                    j = 0\n                    i = position + 1\n                }\n                else {\n                    i += 1\n                    j += 1\n                }\n            }\n            else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) return None\n        else if (count == 1) return Some(Right(position))\n        else return Some(Left(count.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var index = -1\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            index = i - patternLength\n            return Some(Right(index))\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var hash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (hash == patternHash && text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                hash = hash - text(i) + text(i + patternLength)\n            }\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val textCharArray = text.toCharArray\n        val patternCharArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (textCharArray(i) == patternCharArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (!found) return Some(Left(text))\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var found = false\n        var count = 0\n        var position = 0\n        while(i < textLength && j < patternLength) {\n            if(text(i) == pattern(j)) {\n                if(j == 0) position = i\n                i += 1\n                j += 1\n                if(j == patternLength) {\n                    found = true\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if(found) Some(Right(position)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var index = 0\n        var result = \"\"\n        while (index <= textLength - patternLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                result += (index + 1).toString + \" \"\n            }\n            index += 1\n        }\n        if (result == \"\") return None\n        else return Some(Right(result.trim.toLong))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var pos = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) pos = i\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (count == 0) None else Some(Right(count))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))"
  ]
}