{
  "name": "mbpp_773_occurance_substring",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == patternLength - 1) {\n                    return Some(Right(index))\n                }\n                j += 1\n            }\n            else {\n                j = 0\n                index = i + 1\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    j = 0\n                    count += 1\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(count))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return None\n        val p = pattern.toCharArray\n        val t = text.toCharArray\n        var i = 0\n        var j = 0\n        var h = 0\n        var d = 256\n        var q = 101\n        var ht = 0\n        var hp = 0\n        var result : Option[Either[String, Long]] = None\n        while (i < m) {\n            h = (h * d + p(i)) % q\n            hp = (hp * d + t(i)) % q\n            i += 1\n        }\n        i = 0\n        while (i <= n - m) {\n            if (h == hp) {\n                j = 0\n                while (j < m && p(j) == t(i + j)) j += 1\n                if (j == m) {\n                    result = Some(Right(i))\n                    return result\n                }\n            }\n            if (i < n - m) {\n                hp = (d * (hp - t(i) * ht) + t(i + m)) % q\n                if (hp < 0) hp += q\n            }\n            i += 1\n        }\n        result",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        }\n        return Some(Right(count))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val n = text.length\n        val m = pattern.length\n        if (n < m) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, m).hashCode\n        var i = 0\n        while (i <= n - m) {\n            if (patternHash == textHash) {\n                if (text.substring(i, i + m) == pattern) return Some(Right(i))\n            }\n            if (i < n - m) {\n                textHash = textHash - text(i).toInt + text(i + m).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var flag = false\n        while(i < textLength) {\n            if(text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if(j == patternLength) {\n                count += 1\n                j = 0\n                flag = true\n            }\n        }\n        if(flag) Some(Right(count))\n        else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) None\n        else Some(Right(count))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        if (occurance == 1) return Some(Right(position))\n        Some(Left(occurance.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) {\n            return None\n        }\n        return Some(Right(position))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub.hashCode == patternHash) {\n                if (sub == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            i += 1\n        }\n        return None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                found = true\n                index = i - j\n                j = 0\n            }\n        }\n        if (found) return Some(Right(index))\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            var index = 0\n            while (i < textLength && j < patternLength) {\n                if (textArray(i) == patternArray(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Some(Right(i - j))\n            } else {\n                None\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            val subText = text.substring(i, i + patternLength)\n            val subTextHash = subText.hashCode\n            if (subTextHash == patternHash) {\n                return Some(Left(subText))\n            }\n            i += 1\n        }\n        return None"
  ]
}