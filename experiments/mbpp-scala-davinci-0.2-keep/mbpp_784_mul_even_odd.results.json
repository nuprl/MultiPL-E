{
  "name": "mbpp_784_mul_even_odd",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var result = 1L\n        for (i <- list1) {\n            if (i % 2 == 0 && !evenFound) {\n                even = i\n                evenFound = true\n            }\n            else if (i % 2 != 0 && !oddFound) {\n                odd = i\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                result = even * odd\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6zj6ltr.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = i\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6zj6ltr.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                odd = i\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (i : Long)\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.length == 0 || odd.length == 0) return 0\n        even(0) * odd(0)\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var product = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                product = even * odd\n                return product\n            }\n            else {\n                odd = list1(i).toInt\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3yxjtjeo.scala:22)\n\tat Problem.main(tmp3yxjtjeo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while (even == 0 || odd == 0) {\n            if (list1(i) % 2 == 0) even = list1(i)\n            if (list1(i) % 2 == 1) odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp60v2i1qm.scala:10:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp60v2i1qm.scala:11:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mif\u001b[0m (list1(i) % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Long\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = false\n        var flag1 = false\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0 && flag == false) {\n                even = list1(i)\n                flag = true\n            }\n            if (list1(i) % 2 != 0 && flag1 == false) {\n                odd = list1(i)\n                flag1 = true\n            }\n            if (flag == true && flag1 == true) {\n                product = even * odd\n                return product\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgmgehbkc.scala:14:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgmgehbkc.scala:18:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while (even == 0 || odd == 0) {\n            if (list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:10:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while (even == 0 || odd == 0) {\n            if (list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:10:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbbw09gmd.scala:15)\n\tat Problem.main(tmpbbw09gmd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var even_found = false\n        var odd_found = false\n        var i = 0\n        while (i < list1.length && (!even_found || !odd_found)) {\n            if (list1(i) % 2 == 0 && !even_found) {\n                even = list1(i).toInt\n                even_found = true\n            }\n            else if (list1(i) % 2 == 1 && !odd_found) {\n                odd = list1(i).toInt\n                odd_found = true\n            }\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 != 0)\n        var evenProduct = even.reduceLeft(_ * _)\n        var oddProduct = odd.reduceLeft(_ * _)\n        return evenProduct * oddProduct\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1c2c4m78.scala:13)\n\tat Problem.main(tmp1c2c4m78.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510073,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var evens = list1.filter(x => x % 2 == 0)\n        var odds = list1.filter(x => x % 2 == 1)\n        if (evens.length == 0 || odds.length == 0) return 0\n        evens(0) * odds(0)\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510073,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2kj3339.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2kj3339.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even(0) * odd(0)\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while(even == 0 || odd == 0) {\n            if(list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplte95jrx.scala:10:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m(list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Long\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplte95jrx.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i)\n                product *= odd\n                break\n            }\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvnl8bbaj.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvnl8bbaj.scala:13:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvnl8bbaj.scala:18:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvnl8bbaj.scala:20:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = list1.filter(x => x % 2 == 0).head\n        var odd = list1.filter(x => x % 2 != 0).head\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 == 1).head\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var flag = 0\n        var product = 1\n        for (i <- list1) {\n            if (flag == 0) {\n                if (i % 2 == 0) {\n                    even = i\n                    flag = 1\n                }\n            }\n            else {\n                if (i % 2 != 0) {\n                    odd = i\n                    flag = 0\n                }\n            }\n        }\n        product = even * odd\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbwgrs4c.scala:13:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    even = i\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (i : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbwgrs4c.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    odd = i\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (i : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        if (list1.length == 0) {\n            return 0\n        }\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) {\n                even += list1(i)\n            } else {\n                odd += list1(i)\n            }\n        }\n        return even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0rog4q56.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even += list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0rog4q56.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                odd += list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while (even == 0 || odd == 0) {\n            if (list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:10:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFlag = false\n        var oddFlag = false\n        var product = 1L\n        for (i <- list1) {\n            if (i % 2 == 0 && evenFlag == false) {\n                even = i\n                evenFlag = true\n            }\n            else if (i % 2 != 0 && oddFlag == false) {\n                odd = i\n                oddFlag = true\n            }\n            if (evenFlag == true && oddFlag == true) {\n                product = even * odd\n                return product\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1346zk1q.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = i\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1346zk1q.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                odd = i\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (i : Long)\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = list1(i).toInt\n            else odd = list1(i).toInt\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa2bkd2t_.scala:15)\n\tat Problem.main(tmpa2bkd2t_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        return even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplvu4wy7z.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplvu4wy7z.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var i = 0\n        while (i < list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = list1(i)\n                evenFound = true\n            }\n            if (list1(i) % 2 == 1 && !oddFound) {\n                odd = list1(i)\n                oddFound = true\n            }\n            if (evenFound && oddFound) return even * odd\n            i += 1\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzvfyqgw.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzvfyqgw.scala:17:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbbw09gmd.scala:15)\n\tat Problem.main(tmpbbw09gmd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbbw09gmd.scala:15)\n\tat Problem.main(tmpbbw09gmd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbbw09gmd.scala:15)\n\tat Problem.main(tmpbbw09gmd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = 0\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                flag = 1\n                break\n            }\n        }\n        if (flag == 0) {\n            return 0\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i)\n                break\n            }\n        }\n        product = even * odd\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqgtfi8jl.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqgtfi8jl.scala:15:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqgtfi8jl.scala:23:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqgtfi8jl.scala:24:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even(0) * odd(0)\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = list1(i).toInt\n                evenFound = true\n            }\n            else if (list1(i) % 2 == 1 && !oddFound) {\n                odd = list1(i).toInt\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                product = even * odd\n                return product\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while (even == 0 || odd == 0) {\n            if (list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:10:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i)\n            else odd = odd + list1(i)\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpez00h83p.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = even + list1(i)\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    Long\n\u001b[31m  |\u001b[0m                                   Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpez00h83p.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33melse\u001b[0m odd = odd + list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = true\n        while(flag) {\n            if(list1(i) % 2 == 0) {\n                even = list1(i)\n                flag = false\n            }\n            i += 1\n        }\n        flag = true\n        i = 0\n        while(flag) {\n            if(list1(i) % 2 != 0) {\n                odd = list1(i)\n                flag = false\n            }\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa99jbwnt.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa99jbwnt.scala:21:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i.toInt\n                return even * odd\n            }\n            else {\n                odd = i.toInt\n            }\n        }\n        return even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz73y5_1k.scala:20)\n\tat Problem.main(tmpz73y5_1k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = list1(i).toInt\n                evenFound = true\n            }\n            else if (list1(i) % 2 == 1 && !oddFound) {\n                odd = list1(i).toInt\n                oddFound = true\n            }\n            if (evenFound && oddFound) return even * odd\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = list1(i)\n                evenFound = true\n            }\n            else if (list1(i) % 2 == 1 && !oddFound) {\n                odd = list1(i)\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                product = even * odd\n                return product\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcj_ge4xo.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcj_ge4xo.scala:17:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even : Long = 1\n        var odd : Long = 1\n        for (i <- 0 to list1.length - 1) {\n            if (i % 2 == 0) even *= list1(i)\n            else odd *= list1(i)\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfik0r5uh.scala:15)\n\tat Problem.main(tmpfik0r5uh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for(i <- 0 until list1.length) {\n            if(list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for(i <- 0 until list1.length) {\n            if(list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgp3__qol.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgp3__qol.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var result = 1L\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = list1(i)\n                evenFound = true\n            }\n            else if (list1(i) % 2 != 0 && !oddFound) {\n                odd = list1(i)\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                result = even * odd\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6qlijjp4.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6qlijjp4.scala:17:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122970,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1L\n        for (i <- list1) {\n            if (i % 2 == 0 && !evenFound) {\n                even = i\n                evenFound = true\n            }\n            else if (i % 2 != 0 && !oddFound) {\n                odd = i\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                product = even * odd\n                return product\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg__0fs8h.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = i\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg__0fs8h.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                odd = i\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (i : Long)\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i)\n                break\n            }\n        }\n        product = even * odd\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1islm30.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj1islm30.scala:13:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1islm30.scala:18:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj1islm30.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i)\n                product *= odd\n                break\n            }\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcfhrhm86.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcfhrhm86.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcfhrhm86.scala:19:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcfhrhm86.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even += 1\n                if (even == 1) product *= list1(i)\n            }\n            else {\n                odd += 1\n                if (odd == 1) product *= list1(i)\n            }\n            if (even == 1 && odd == 1) return product\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9za8s5_5.scala:12:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (even == \u001b[31m1\u001b[0m) product *= list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value *= is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9za8s5_5.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mif\u001b[0m (odd == \u001b[31m1\u001b[0m) product *= list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value *= is not a member of Int - did you mean Int.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                break\n            }\n        }\n        for (i <- list1) {\n            if (i % 2 != 0) {\n                odd = i\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123001,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj3neezm4.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                even = i\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj3neezm4.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj3neezm4.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                odd = i\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (i : Long)\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj3neezm4.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbbw09gmd.scala:15)\n\tat Problem.main(tmpbbw09gmd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = list1(i).toInt\n            else odd = list1(i).toInt\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa2bkd2t_.scala:15)\n\tat Problem.main(tmpa2bkd2t_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var even_found = false\n        var odd_found = false\n        var result = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0 && !even_found) {\n                even = list1(i).toInt\n                even_found = true\n            }\n            if (list1(i) % 2 != 0 && !odd_found) {\n                odd = list1(i).toInt\n                odd_found = true\n            }\n            if (even_found && odd_found) {\n                result = even * odd\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                product *= odd\n                break\n            }\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq_n_zmn.scala:13:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq_n_zmn.scala:20:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while(even == 0 || odd == 0) {\n            if(list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplte95jrx.scala:10:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m(list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Long\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplte95jrx.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbbw09gmd.scala:15)\n\tat Problem.main(tmpbbw09gmd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while(even == 0 || odd == 0) {\n            if(i % 2 == 0 && even == 0) even = list1(i)\n            if(i % 2 == 1 && odd == 0) odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyzgz9ek2.scala:10:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m(i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && even == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    Long\n\u001b[31m   |\u001b[0m                                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyzgz9ek2.scala:11:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mif\u001b[0m(i % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m && odd == \u001b[31m0\u001b[0m) odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    Long\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i.toInt\n                break\n            }\n        }\n        for (i <- list1) {\n            if (i % 2 != 0) {\n                odd = i.toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_v2a7rev.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_v2a7rev.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = list1(i)\n                evenFound = true\n            }\n            else if (list1(i) % 2 != 0 && !oddFound) {\n                odd = list1(i)\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                product = even * odd\n                return product\n            }\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk2041ae.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk2041ae.scala:17:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i)\n                break\n            }\n        }\n        product = even * odd\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9pri3b4.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc9pri3b4.scala:12:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9pri3b4.scala:17:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc9pri3b4.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var flag = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                flag = 1\n                break\n            }\n        }\n        if (flag == 1) {\n            for (i <- 0 until list1.length) {\n                if (list1(i) % 2 != 0) {\n                    odd = list1(i)\n                    break\n                }\n            }\n            product = even * odd\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu_sbf9c4.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_sbf9c4.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu_sbf9c4.scala:20:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Long\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_sbf9c4.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5q5mmbk.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5q5mmbk.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5q5mmbk.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5q5mmbk.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                product *= odd\n                break\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzjpprhgl.scala:13:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzjpprhgl.scala:20:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i.toInt\n                break\n            }\n        }\n        for (i <- list1) {\n            if (i % 2 != 0) {\n                odd = i.toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_v2a7rev.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_v2a7rev.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510073,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even += list1(i)\n            else odd += list1(i)\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu1yomgxb.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even += list1(i)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu1yomgxb.scala:10:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33melse\u001b[0m odd += list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Int - did you mean Int.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5q5mmbk.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5q5mmbk.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var result = 0L\n        for (i <- list1) {\n            if (i % 2 == 0 && !evenFound) {\n                even = i\n                evenFound = true\n            }\n            if (i % 2 != 0 && !oddFound) {\n                odd = i\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                result = even * odd\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dlwuovw.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = i\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dlwuovw.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                odd = i\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (i : Long)\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510073,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- list1) {\n            if (even == 0 && i % 2 == 0) {\n                even = i\n            }\n            if (odd == 0 && i % 2 != 0) {\n                odd = i\n            }\n        }\n        product = even * odd\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7swk6rp.scala:11:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                even = i\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7swk6rp.scala:14:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                odd = i\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (i : Long)\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122970,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = true\n        var product = 1\n        while(i < list1.length && flag) {\n            if(list1(i) % 2 == 0) {\n                even = list1(i)\n                flag = false\n            }\n            i += 1\n        }\n        flag = true\n        i = 0\n        while(i < list1.length && flag) {\n            if(list1(i) % 2 != 0) {\n                odd = list1(i)\n                flag = false\n            }\n            i += 1\n        }\n        product *= even * odd\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjvkvpkbo.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjvkvpkbo.scala:22:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510073,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while (even == 0 || odd == 0) {\n            if (list1(i) % 2 == 0) even = list1(i)\n            if (list1(i) % 2 == 1) odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp60v2i1qm.scala:10:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp60v2i1qm.scala:11:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mif\u001b[0m (list1(i) % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Long\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0)\n            return 0\n        else\n            return even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length > 0 && odd.length > 0) even(0) * odd(0)\n        else 0\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = 0\n        var flag1 = 0\n        var prod = 1\n        for(i <- 0 to list1.length - 1) {\n            if(list1(i) % 2 == 0 && flag == 0) {\n                even = list1(i).toInt\n                flag = 1\n            }\n            else if(list1(i) % 2 != 0 && flag1 == 0) {\n                odd = list1(i).toInt\n                flag1 = 1\n            }\n        }\n        prod = even * odd\n        prod\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var result = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                result *= even\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                result *= odd\n                break\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplsmi4lwb.scala:13:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplsmi4lwb.scala:20:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && evenFound == false) {\n                even = list1(i)\n                evenFound = true\n            }\n            if (list1(i) % 2 == 1 && oddFound == false) {\n                odd = list1(i)\n                oddFound = true\n            }\n            if (evenFound == true && oddFound == true) {\n                product = even * odd\n                return product\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpa56p7q.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpa56p7q.scala:17:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while(even == 0 || odd == 0) {\n            if(list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplte95jrx.scala:10:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m(list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Long\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplte95jrx.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while(even == 0 || odd == 0) {\n            if(list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplte95jrx.scala:10:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m(list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Long\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplte95jrx.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5q5mmbk.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5q5mmbk.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510073,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2kj3339.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2kj3339.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510073,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        list1.zipWithIndex.filter(x => x._2 % 2 == 0).map(_._1).product * list1.zipWithIndex.filter(x => x._2 % 2 == 1).map(_._1).product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyy_flp6j.scala:9)\n\tat Problem.main(tmpyy_flp6j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbbw09gmd.scala:15)\n\tat Problem.main(tmpbbw09gmd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while (even == 0 || odd == 0) {\n            if (list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:10:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even += list1(i)\n            else odd += list1(i)\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu1yomgxb.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even += list1(i)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu1yomgxb.scala:10:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33melse\u001b[0m odd += list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Int - did you mean Int.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i)\n            else odd = odd + list1(i)\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpez00h83p.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = even + list1(i)\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    Long\n\u001b[31m  |\u001b[0m                                   Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpez00h83p.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33melse\u001b[0m odd = odd + list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 != 0)\n        if (even.length > 0 && odd.length > 0) {\n            even(0) * odd(0)\n        } else {\n            0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i)\n                product *= odd\n                break\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvc8eqddj.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvc8eqddj.scala:13:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvc8eqddj.scala:18:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvc8eqddj.scala:20:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        for(i <- 0 to list1.length - 1) {\n            if(list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for(i <- 0 to list1.length - 1) {\n            if(list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        return even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfqosyx0e.scala:12:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfqosyx0e.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122965,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmyp3wyt3.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmyp3wyt3.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = false\n        var flag1 = false\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0 && flag == false) {\n                even = list1(i).toInt\n                flag = true\n            }\n            if (list1(i) % 2 != 0 && flag1 == false) {\n                odd = list1(i).toInt\n                flag1 = true\n            }\n        }\n        product = even * odd\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                product *= odd\n                break\n            }\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq_n_zmn.scala:13:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq_n_zmn.scala:20:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = false\n        var flag2 = false\n        while(i < list1.length && (!flag || !flag2)) {\n            if(list1(i) % 2 == 0 && !flag) {\n                even = list1(i).toInt\n                flag = true\n            }\n            if(list1(i) % 2 != 0 && !flag2) {\n                odd = list1(i).toInt\n                flag2 = true\n            }\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = list1(i).toInt\n            else odd = list1(i).toInt\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa2bkd2t_.scala:15)\n\tat Problem.main(tmpa2bkd2t_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5q5mmbk.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv5q5mmbk.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val (even, odd) = list1.partition(_ % 2 == 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510073,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6mvjwek.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510073,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2kj3339.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2kj3339.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122965,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmyp3wyt3.scala:11:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmyp3wyt3.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var evenNum = 0L\n        var oddNum = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                evenNum = list1(i)\n                even += 1\n            }\n            else {\n                oddNum = list1(i)\n                odd += 1\n            }\n            if (even == 1 && odd == 1) {\n                return evenNum * oddNum\n            }\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa15jgxhu.scala:26)\n\tat Problem.main(tmpa15jgxhu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while(even == 0 || odd == 0) {\n            if(list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplte95jrx.scala:10:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m(list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Long\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplte95jrx.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var i = 0\n        while (even == 0 || odd == 0) {\n            if (list1(i) % 2 == 0) even = list1(i)\n            else odd = list1(i)\n            i += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:10:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (list1(i) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) even = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagogsooh.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m odd = list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 == 1)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122970,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        var flag = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                if (flag == 0) {\n                    even = list1(i).toInt\n                    flag = 1\n                }\n            }\n            else {\n                if (flag == 1) {\n                    odd = list1(i).toInt\n                    flag = 2\n                }\n            }\n            if (flag == 2) {\n                product = even * odd\n                flag = 3\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3cwfnf_0.scala:32)\n\tat Problem.main(tmp3cwfnf_0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even(0) * odd(0)\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 != 0)\n        var even1 = even.head\n        var odd1 = odd.head\n        even1 * odd1\n    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}