{
  "name": "mbpp_229_re_arrange_array",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqu6y5jlh.scala:12)\n\tat Problem.main(tmpqu6y5jlh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(_ < 0)\n        val pos = arr.filter(_ >= 0)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        val negSortedReversed = negSorted.reverse\n        val posSortedReversed = posSorted.reverse\n        val negSortedReversedFirstN = negSortedReversed.take(n.toInt)\n        val posSortedReversedFirstN = posSortedReversed.take(n.toInt)\n        val negSortedReversedFirstNReversed = negSortedReversedFirstN.reverse\n        val posSortedReversedFirstNReversed = posSortedReversedFirstN.reverse\n        val negSortedReversedFirstNReversedLastN = negSortedReversedFirstNReversed.drop(n.toInt)\n        val posSortedReversedFirstNReversedLastN = posSortedReversedFirstNReversed.drop(n.toInt)\n        val negSortedReversedFirstNReversedLastNReversed = negSortedReversedFirstNReversedLastN.reverse\n        val posSortedReversedFirstNReversedLastNReversed = posSortedReversedFirstNReversedLastN.reverse\n        val negSortedReversedFirstNReversedLastNReversedSorted = negSortedReversedFirstNReversedLastNReversed.sorted\n        val posSortedReversedFirstNReversedLastNReversedSorted = posSortedReversedFirstNReversedLastNReversed.sorted\n        val negSortedReversedFirstNReversedLastNReversedSortedReversed = negSortedReversedFirstNReversedLastNReversedSorted.reverse\n        val posSortedReversedFirstNReversedLastNReversedSortedReversed = posSortedReversedFirstNReversedLastNReversedSorted.reverse\n        val negSortedReversedFirstNReversedLastNReversedS\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0qp6pl8m.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qp6pl8m.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqu6y5jlh.scala:12)\n\tat Problem.main(tmpqu6y5jlh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        // First, we sort the array.\n        val sorted = arr.sorted\n        // Next, we split the array into two parts.\n        val (neg, pos) = sorted.splitAt(n.toInt)\n        // Finally, we merge the two parts.\n        neg.zip(pos).flatMap(x => List(x._1, x._2))\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq39dfrk4.scala:14)\n\tat Problem.main(tmpq39dfrk4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sortWith(_ < _)\n        val posSorted = pos.sortWith(_ > _)\n        negSorted ::: posSorted\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf323la0h.scala:12)\n\tat Problem.main(tmpf323la0h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        var i = 0\n        var j = n - 1\n        while (i < j) {\n            while (arr(i.toInt) < 0 && i < j) i += 1\n            while (arr(j.toInt) > 0 && i < j) j -= 1\n            if (i < j) {\n                val temp = arr(i.toInt)\n                arr(i.toInt) = arr(j.toInt)\n                arr(j.toInt) = temp\n            }\n        }\n        arr\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv12qq45d.scala:13:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                arr(i.toInt) = arr(j.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value update is not a member of List[Long] - did you mean arr.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv12qq45d.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                arr(j.toInt) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value update is not a member of List[Long] - did you mean arr.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        val (neg1, pos1) = arr.drop(n.toInt).partition(_ < 0)\n        neg ::: pos ::: neg1 ::: pos1\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyxput8px.scala:11)\n\tat Problem.main(tmpyxput8px.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: pos.filter(_ >= 0) ::: neg.filter(_ >= 0) ::: pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdo1mlagg.scala:10)\n\tat Problem.main(tmpdo1mlagg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: neg.filter(_ >= 0) ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0__rmpf8.scala:10)\n\tat Problem.main(tmp0__rmpf8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        var neg = List[Long]()\n        var pos = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) neg = neg :+ arr(i)\n            else pos = pos :+ arr(i)\n        }\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2v67wq_j.scala:15)\n\tat Problem.main(tmp2v67wq_j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(x => x < 0)\n        val pos = arr.filter(x => x >= 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_h9fzhrs.scala:11)\n\tat Problem.main(tmp_h9fzhrs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(_ < 0).sorted\n        val pos = arr.filter(_ >= 0).sorted\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6h239pq3.scala:11)\n\tat Problem.main(tmp6h239pq3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb53nmuth.scala:10)\n\tat Problem.main(tmpb53nmuth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: pos.filter(_ >= 0) ::: neg.filter(_ >= 0) ::: pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdo1mlagg.scala:10)\n\tat Problem.main(tmpdo1mlagg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(x => x < 0)\n        val pos = arr.filter(x => x >= 0)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        val negSortedReversed = negSorted.reverse\n        val posSortedReversed = posSorted.reverse\n        val negSortedReversedN = negSortedReversed.take(n.toInt)\n        val posSortedReversedN = posSortedReversed.take(n.toInt)\n        val negSortedReversedNReversed = negSortedReversedN.reverse\n        val posSortedReversedNReversed = posSortedReversedN.reverse\n        val result = negSortedReversedNReversed ::: posSortedReversedNReversed\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6cxhvxa6.scala:20)\n\tat Problem.main(tmp6cxhvxa6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (negative, positive) = arr.splitAt(n.toInt)\n        val (negativeSorted, positiveSorted) = (negative.sorted, positive.sorted)\n        negativeSorted ::: positiveSorted\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpas8jdzl1.scala:11)\n\tat Problem.main(tmpas8jdzl1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb53nmuth.scala:10)\n\tat Problem.main(tmpb53nmuth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(x => x < 0)\n        val pos = arr.filter(x => x >= 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_h9fzhrs.scala:11)\n\tat Problem.main(tmp_h9fzhrs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(_ < 0)\n        val pos = arr.filter(_ >= 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvqx57tgj.scala:11)\n\tat Problem.main(tmpvqx57tgj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(x => x < 0)\n        val pos = arr.filter(x => x >= 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_h9fzhrs.scala:11)\n\tat Problem.main(tmp_h9fzhrs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ++ pos.filter(_ >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4td11l7r.scala:10)\n\tat Problem.main(tmp4td11l7r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val negative = arr.take(n.toInt).filter(x => x < 0)\n        val positive = arr.take(n.toInt).filter(x => x >= 0)\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqds_io25.scala:11)\n\tat Problem.main(tmpqds_io25.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        var result = List[Long]()\n        var positive = List[Long]()\n        var negative = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative = negative :+ arr(i)\n            else positive = positive :+ arr(i)\n        }\n        result = negative ::: positive\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3yr8anj3.scala:17)\n\tat Problem.main(tmp3yr8anj3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val negative = arr.filter(_ < 0)\n        val positive = arr.filter(_ >= 0)\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp92lgsr3h.scala:11)\n\tat Problem.main(tmp92lgsr3h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sortWith(_ > _)\n        val posSorted = pos.sortWith(_ < _)\n        negSorted ::: posSorted\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpp21arlpb.scala:12)\n\tat Problem.main(tmpp21arlpb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val negative = arr.filter(x => x < 0)\n        val positive = arr.filter(x => x >= 0)\n        val result = negative ::: positive\n        result.take(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvjiave9t.scala:12)\n\tat Problem.main(tmpvjiave9t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(_ < 0)\n        val pos = arr.filter(_ >= 0)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmperbduefe.scala:13)\n\tat Problem.main(tmperbduefe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ++ pos.filter(_ >= 0) ++ neg.filter(_ >= 0) ++ pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8pvuoty.scala:10)\n\tat Problem.main(tmpo8pvuoty.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        var negative = List[Long]()\n        var positive = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative = negative :+ arr(i)\n            else positive = positive :+ arr(i)\n        }\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2v4e9yfv.scala:15)\n\tat Problem.main(tmp2v4e9yfv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val positive = arr.filter(_ >= 0)\n        val negative = arr.filter(_ < 0)\n        (negative ::: positive).take(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv67ikmad.scala:11)\n\tat Problem.main(tmpv67ikmad.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        var negative = List[Long]()\n        var positive = List[Long]()\n        for (i <- 0 until arr.length) {\n            if (arr(i) < 0) negative = negative :+ arr(i)\n            else positive = positive :+ arr(i)\n        }\n        var result = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (i < negative.length) result = result :+ negative(i)\n            else result = result :+ positive(i - negative.length)\n        }\n        for (i <- n.toInt until arr.length) {\n            if (i - n.toInt < positive.length) result = result :+ positive(i - n.toInt)\n            else result = result :+ negative(i - n.toInt - positive.length)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8ue9heqc.scala:24)\n\tat Problem.main(tmp8ue9heqc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sortWith(_ < _)\n        val posSorted = pos.sortWith(_ > _)\n        negSorted ::: posSorted\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf323la0h.scala:12)\n\tat Problem.main(tmpf323la0h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: pos.filter(_ >= 0) ::: neg.filter(_ >= 0) ::: pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdo1mlagg.scala:10)\n\tat Problem.main(tmpdo1mlagg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val negative = arr.take(n.toInt).filter(_ < 0)\n        val positive = arr.take(n.toInt).filter(_ >= 0)\n        val rest = arr.drop(n.toInt)\n        negative ::: positive ::: rest\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprawjy_wh.scala:12)\n\tat Problem.main(tmprawjy_wh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ++ pos.filter(_ >= 0) ++ neg.filter(_ >= 0) ++ pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8pvuoty.scala:10)\n\tat Problem.main(tmpo8pvuoty.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ++ pos.filter(_ >= 0) ++ neg.filter(_ >= 0) ++ pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8pvuoty.scala:10)\n\tat Problem.main(tmpo8pvuoty.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val positive = arr.filter(x => x >= 0)\n        val negative = arr.filter(x => x < 0)\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe9fdhjs1.scala:11)\n\tat Problem.main(tmpe9fdhjs1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        var positive = List[Long]()\n        var negative = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative = negative :+ arr(i)\n            else positive = positive :+ arr(i)\n        }\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyowvokq_.scala:15)\n\tat Problem.main(tmpyowvokq_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb53nmuth.scala:10)\n\tat Problem.main(tmpb53nmuth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(x => x < 0)\n        val pos = arr.filter(x => x >= 0)\n        val negList = neg.sorted\n        val posList = pos.sorted\n        val negListRev = negList.reverse\n        val posListRev = posList.reverse\n        val negListRevLen = negListRev.length\n        val posListRevLen = posListRev.length\n        val negListRevLenMinusOne = negListRevLen - 1\n        val posListRevLenMinusOne = posListRevLen - 1\n        val negListRevLenMinusOneDiv2 = negListRevLenMinusOne / 2\n        val posListRevLenMinusOneDiv2 = posListRevLenMinusOne / 2\n        val negListRevLenMinusOneDiv2Plus1 = negListRevLenMinusOneDiv2 + 1\n        val posListRevLenMinusOneDiv2Plus1 = posListRevLenMinusOneDiv2 + 1\n        val negListRevLenMinusOneDiv2Plus1Div2 = negListRevLenMinusOneDiv2Plus1 / 2\n        val posListRevLenMinusOneDiv2Plus1Div2 = posListRevLenMinusOneDiv2Plus1 / 2\n        val negListRevLenMinusOneDiv2Plus1Div2Plus1 = negListRevLenMinusOneDiv2Plus1Div2 + 1\n        val posListRevLenMinusOneDiv2Plus1Div2Plus1 = posListRevLenMinusOneDiv2Plus1Div2 + 1\n        val negListRevLenMinusOneDiv2Plus1Div2Plus1Div2 = negListRevLenMinusOneDiv2Plus1Div2Plus1 / 2\n        val posListRevLenMinusOneDiv2Plus1Div2Plus1Div2 = posListRevLenMinusOneDiv2Plus1Div2Plus1 / 2\n        val negListRevLenMinusOneDiv2Plus1Div2Plus1Div2Plus1 = negListRevLenMinusOneDiv2Plus1Div2Plus1Div2 + 1\n        val posListRevLenMinusOneDiv2Plus1Div2Plus1Div2Plus1 = posListRevLenMinusOneDiv2Plus1Div2Plus1\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplxt4y0ks.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb53nmuth.scala:10)\n\tat Problem.main(tmpb53nmuth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val positive = arr.filter(_ >= 0)\n        val negative = arr.filter(_ < 0)\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpybc8w5y_.scala:11)\n\tat Problem.main(tmpybc8w5y_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        val (neg1, neg2) = neg.partition(_ < 0)\n        neg1 ++ pos ++ neg2\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5kh936uq.scala:11)\n\tat Problem.main(tmp5kh936uq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb53nmuth.scala:10)\n\tat Problem.main(tmpb53nmuth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb53nmuth.scala:10)\n\tat Problem.main(tmpb53nmuth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb53nmuth.scala:10)\n\tat Problem.main(tmpb53nmuth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ++ pos.filter(_ >= 0) ++ neg.filter(_ >= 0) ++ pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8pvuoty.scala:10)\n\tat Problem.main(tmpo8pvuoty.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: pos.filter(_ >= 0) ::: neg.filter(_ >= 0) ::: pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdo1mlagg.scala:10)\n\tat Problem.main(tmpdo1mlagg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqu6y5jlh.scala:12)\n\tat Problem.main(tmpqu6y5jlh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (negative, positive) = arr.take(n.toInt).partition(_ < 0)\n        negative ++ positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqimrc74d.scala:10)\n\tat Problem.main(tmpqimrc74d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        var negative = new ListBuffer[Long]\n        var positive = new ListBuffer[Long]\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative += arr(i)\n            else positive += arr(i)\n        }\n        return negative.toList ++ positive.toList ++ arr.slice(n.toInt, arr.length)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjpf2uswo.scala:15)\n\tat Problem.main(tmpjpf2uswo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: pos.filter(_ >= 0) ::: neg.filter(_ >= 0) ::: pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdo1mlagg.scala:10)\n\tat Problem.main(tmpdo1mlagg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val negative = arr.filter(x => x < 0)\n        val positive = arr.filter(x => x >= 0)\n        val result = negative ::: positive\n        result.take(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvjiave9t.scala:12)\n\tat Problem.main(tmpvjiave9t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (negs, poss) = arr.take(n.toInt).partition(_ < 0)\n        negs ::: poss\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuf2_s16i.scala:10)\n\tat Problem.main(tmpuf2_s16i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val negative = arr.filter(_ < 0)\n        val positive = arr.filter(_ >= 0)\n        val negativeSorted = negative.sorted\n        val positiveSorted = positive.sorted\n        val negativeSortedReversed = negativeSorted.reverse\n        val positiveSortedReversed = positiveSorted.reverse\n        val negativeSortedReversedFirstN = negativeSortedReversed.take(n.toInt)\n        val positiveSortedReversedFirstN = positiveSortedReversed.take(n.toInt)\n        val negativeSortedReversedFirstNReversed = negativeSortedReversedFirstN.reverse\n        val positiveSortedReversedFirstNReversed = positiveSortedReversedFirstN.reverse\n        val negativeSortedReversedFirstNReversedSorted = negativeSortedReversedFirstNReversed.sorted\n        val positiveSortedReversedFirstNReversedSorted = positiveSortedReversedFirstNReversed.sorted\n        val negativeSortedReversedFirstNReversedSortedReversed = negativeSortedReversedFirstNReversedSorted.reverse\n        val positiveSortedReversedFirstNReversedSortedReversed = positiveSortedReversedFirstNReversedSorted.reverse\n        val negativeSortedReversedFirstNReversedSortedReversedSorted = negativeSortedReversedFirstNReversedSortedReversed.sorted\n        val positiveSortedReversedFirstNReversedSortedReversedSorted = positiveSortedReversedFirstNReversedSortedReversed.sorted\n        val negativeSortedReversedFirstNReversedSortedReversedSortedReversed = negativeSortedReversedFirstNReversedSortedReversedSorted.reverse\n        val positiveSortedReversedFirstNReversedSortedReversedSortedReversed = positiveSortedReversedFirstNReversedSortedReversedSorted.reverse\n        val negativeSortedReversedFirstNReversedSortedReversedSortedReversedSorted = negativeSorted\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzze9_n1s.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ++ pos.filter(_ >= 0) ++ neg.filter(_ >= 0) ++ pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8pvuoty.scala:10)\n\tat Problem.main(tmpo8pvuoty.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: neg.filter(_ >= 0) ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0__rmpf8.scala:10)\n\tat Problem.main(tmp0__rmpf8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(_ < 0)\n        val pos = arr.filter(_ >= 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvqx57tgj.scala:11)\n\tat Problem.main(tmpvqx57tgj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val negative = arr.filter(_ < 0)\n        val positive = arr.filter(_ >= 0)\n        val negativeFirst = negative ++ positive\n        negativeFirst.take(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpldt4uc17.scala:12)\n\tat Problem.main(tmpldt4uc17.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ++ pos.filter(_ >= 0) ++ neg.filter(_ >= 0) ++ pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8pvuoty.scala:10)\n\tat Problem.main(tmpo8pvuoty.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(_ < 0)\n        val pos = arr.filter(_ >= 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvqx57tgj.scala:11)\n\tat Problem.main(tmpvqx57tgj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]\n        var negative = new ListBuffer[Long]\n        var positive = new ListBuffer[Long]\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative += arr(i)\n            else positive += arr(i)\n        }\n        result ++= negative ++= positive\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6msp205t.scala:17)\n\tat Problem.main(tmp6msp205t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb53nmuth.scala:10)\n\tat Problem.main(tmpb53nmuth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        var negative = List[Long]()\n        var positive = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative = negative :+ arr(i)\n            else positive = positive :+ arr(i)\n        }\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2v4e9yfv.scala:15)\n\tat Problem.main(tmp2v4e9yfv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: pos.filter(_ >= 0) ::: neg.filter(_ >= 0) ::: pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdo1mlagg.scala:10)\n\tat Problem.main(tmpdo1mlagg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val positive = arr.filter(x => x >= 0)\n        val negative = arr.filter(x => x < 0)\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe9fdhjs1.scala:11)\n\tat Problem.main(tmpe9fdhjs1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(x => x < 0)\n        val pos = arr.filter(x => x >= 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_h9fzhrs.scala:11)\n\tat Problem.main(tmp_h9fzhrs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(x => x < 0).sorted\n        val pos = arr.filter(x => x >= 0).sorted\n        (neg ::: pos).take(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvv3do0b4.scala:11)\n\tat Problem.main(tmpvv3do0b4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val positive = arr.filter(x => x >= 0)\n        val negative = arr.filter(x => x < 0)\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe9fdhjs1.scala:11)\n\tat Problem.main(tmpe9fdhjs1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqu6y5jlh.scala:12)\n\tat Problem.main(tmpqu6y5jlh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(x => x < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsehwqtkk.scala:10)\n\tat Problem.main(tmpsehwqtkk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val positive = arr.filter(x => x >= 0)\n        val negative = arr.filter(x => x < 0)\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe9fdhjs1.scala:11)\n\tat Problem.main(tmpe9fdhjs1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        val (neg1, pos1) = arr.drop(n.toInt).partition(_ < 0)\n        neg ::: pos ::: neg1 ::: pos1\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyxput8px.scala:11)\n\tat Problem.main(tmpyxput8px.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: neg.filter(_ >= 0) ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0__rmpf8.scala:10)\n\tat Problem.main(tmp0__rmpf8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        var result = List[Long]()\n        var negative = List[Long]()\n        var positive = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative = negative :+ arr(i)\n            else positive = positive :+ arr(i)\n        }\n        result = negative ::: positive\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4l5rh0xu.scala:17)\n\tat Problem.main(tmp4l5rh0xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb53nmuth.scala:10)\n\tat Problem.main(tmpb53nmuth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val positive = arr.filter(x => x >= 0)\n        val negative = arr.filter(x => x < 0)\n        val result = negative ::: positive\n        result.take(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplt6sl2k9.scala:12)\n\tat Problem.main(tmplt6sl2k9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(x => x < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsehwqtkk.scala:10)\n\tat Problem.main(tmpsehwqtkk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val neg = arr.filter(x => x < 0).sorted\n        val pos = arr.filter(x => x >= 0).sorted\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp75e0pp7r.scala:11)\n\tat Problem.main(tmp75e0pp7r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val negative = arr.filter(_ < 0).sorted\n        val positive = arr.filter(_ >= 0).sorted\n        negative ::: positive\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgfcf64x2.scala:11)\n\tat Problem.main(tmpgfcf64x2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp71cvu4nd.scala:10)\n\tat Problem.main(tmp71cvu4nd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509946,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt1gwyz5o.scala:10)\n\tat Problem.main(tmpt1gwyz5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: pos.filter(_ >= 0) ::: neg.filter(_ >= 0) ::: pos.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdo1mlagg.scala:10)\n\tat Problem.main(tmpdo1mlagg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb53nmuth.scala:10)\n\tat Problem.main(tmpb53nmuth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}