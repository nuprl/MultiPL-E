{
  "name": "mbpp_457_Find_Min",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sublist having minimum length.\n    def FindMin(lst : Any) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(FindMin((Any(List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((Any(1l.toLong))));\n    assert(FindMin((Any(List[Long](1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 7l.toLong, 8l.toLong)))).equals((Any(1l.toLong, 1l.toLong))));\n    assert(FindMin((Any(List[String](\"x\"), List[String](\"x\", \"y\"), List[String](\"x\", \"y\", \"z\")))).equals((Any(\"x\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) min = i\n        }\n        min",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_lst = lst2(0)\n        for (l <- lst2) {\n            if (l.length < min) {\n                min = l.length\n                min_lst = l\n            }\n        }\n        return min_lst",
    "        lst match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                val min = FindMin(xs)\n                min match {\n                    case Nil => x\n                    case y :: ys => {\n                        if (x.length < y.length) x else y\n                    }\n                }\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0)\n        for (i <- 1 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0)\n        for (i <- 1 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minlst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minlst = i\n            }\n        }\n        return minlst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                var temp = FindMin(lst.asInstanceOf[List[Any]].apply(i))\n                if (temp.asInstanceOf[List[Any]].length < min) {\n                    min = temp.asInstanceOf[List[Any]].length\n                    min_lst = temp\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        lst match {\n            case Nil => Nil\n            case x :: xs => {\n                val min = FindMin(xs)\n                min match {\n                    case Nil => List(x)\n                    case y :: ys => if (x.length < y.length) List(x) else min\n                }\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_list = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (i.asInstanceOf[List[Any]].length < min) {\n                    min = i.asInstanceOf[List[Any]].length\n                    min_list = i.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_list",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        var min = lst2(0).asInstanceOf[List[Any]].length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).asInstanceOf[List[Any]].length < min) {\n                min = lst2(i).asInstanceOf[List[Any]].length\n                min_lst = lst2(i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (l <- lst.asInstanceOf[List[Any]]) {\n            if (l.asInstanceOf[List[Any]].length < min) {\n                min = l.asInstanceOf[List[Any]].length\n                min_lst = l\n            }\n        }\n        return min_lst",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        var min = lst1(0).asInstanceOf[List[Any]].length\n        var min_lst = lst1(0)\n        for (i <- 1 to lst1.length - 1) {\n            if (lst1(i).asInstanceOf[List[Any]].length < min) {\n                min = lst1(i).asInstanceOf[List[Any]].length\n                min_lst = lst1(i)\n            }\n        }\n        return min_lst",
    "        if (lst.isInstanceOf[List[Any]]) {\n            val l = lst.asInstanceOf[List[Any]]\n            if (l.length == 0) {\n                return l\n            }\n            var min = l(0)\n            for (i <- 1 until l.length) {\n                if (FindMin(l(i)).asInstanceOf[List[Any]].length < FindMin(min).asInstanceOf[List[Any]].length) {\n                    min = l(i)\n                }\n            }\n            return FindMin(min)\n        }\n        return lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (i.asInstanceOf[List[Any]].length < min) {\n                    min = i.asInstanceOf[List[Any]].length\n                    min_lst = i.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x.length)\n        val min = lst2.min\n        val index = lst2.indexOf(min)\n        return lst1(index)",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Int]].length\n        var minlst = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Int]]\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Int]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Int]].length\n                minlst = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Int]]\n            }\n        }\n        minlst",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst1(0).length\n        var min_lst = lst1(0)\n        for (i <- 1 to lst1.length - 1) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        var min = lst1(0).length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst1(0).length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                min_lst = lst2(i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        return min",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        var min = lst2(0).asInstanceOf[List[Any]].length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).asInstanceOf[List[Any]].length < min) {\n                min = lst2(i).asInstanceOf[List[Any]].length\n                min_lst = lst2(i)\n            }\n        }\n        return min_lst",
    "        lst match {\n            case Nil => Nil\n            case x :: xs => {\n                val min = FindMin(xs)\n                min match {\n                    case Nil => List(x)\n                    case y :: ys => {\n                        if (x.length < y.length) List(x)\n                        else List(y)\n                    }\n                }\n            }\n        }",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                min_lst = lst2(i)\n            }\n        }\n        return min_lst",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                min_lst = lst2(i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        minList",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0)\n        for (i <- 1 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        return min",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst1(0).length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (x <- lst.asInstanceOf[List[Any]]) {\n            if (x.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = x\n            }\n        }\n        min",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                min_lst = lst2(i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        minList",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                var temp = FindMin(lst.asInstanceOf[List[Any]].apply(i))\n                if (temp.asInstanceOf[List[Any]].length < min) {\n                    min = temp.asInstanceOf[List[Any]].length\n                    min_lst = temp.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        var min = lst2(0).asInstanceOf[List[Any]].length\n        var minList = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).asInstanceOf[List[Any]].length < min) {\n                min = lst2(i).asInstanceOf[List[Any]].length\n                minList = lst2(i)\n            }\n        }\n        minList",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length)\n                min = i\n        }\n        return min",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0)\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) min = i\n        }\n        min",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        return min",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var minlst = lst\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                val lst2 = FindMin(lst.asInstanceOf[List[Any]].apply(i))\n                if (lst2.asInstanceOf[List[Any]].length < min) {\n                    min = lst2.asInstanceOf[List[Any]].length\n                    minlst = lst2\n                }\n            }\n        }\n        minlst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0)\n        for (i <- 1 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        return min_lst",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        var min = lst2(0).asInstanceOf[List[Any]].length\n        var min_index = 0\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).asInstanceOf[List[Any]].length < min) {\n                min = lst2(i).asInstanceOf[List[Any]].length\n                min_index = i\n            }\n        }\n        lst2(min_index)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst1(0).length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_lst = lst1(i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (FindMin(i).asInstanceOf[List[Any]].length < min) {\n                    min = FindMin(i).asInstanceOf[List[Any]].length\n                    min_lst = FindMin(i).asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (i.asInstanceOf[List[Any]].length < min) {\n                    min = i.asInstanceOf[List[Any]].length\n                    min_lst = i.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_list = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_list = i\n            }\n        }\n        min_list",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minlst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minlst = i\n            }\n        }\n        return minlst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        minList",
    "        lst match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                val y = FindMin(xs)\n                if (x.asInstanceOf[List[Any]].length < y.asInstanceOf[List[Any]].length) x else y\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (i.asInstanceOf[List[Any]].length < min) {\n                    min = i.asInstanceOf[List[Any]].length\n                    min_lst = i.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst : Any = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (min > i.asInstanceOf[List[Any]].length) {\n                    min = i.asInstanceOf[List[Any]].length\n                    min_lst = i\n                }\n            }\n        }\n        return min_lst",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst1(0).length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_lst = lst1(i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                var temp = FindMin(lst.asInstanceOf[List[Any]].apply(i))\n                if (temp.asInstanceOf[List[Any]].length < min) {\n                    min = temp.asInstanceOf[List[Any]].length\n                    min_lst = temp.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                min_lst = lst2(i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (i.asInstanceOf[List[Any]].length < min) {\n                    min = i.asInstanceOf[List[Any]].length\n                    min_lst = i.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_list = List[Any]()\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (i.asInstanceOf[List[Any]].length < min) {\n                    min = i.asInstanceOf[List[Any]].length\n                    min_list = i.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        min_list",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        return min",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minlst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minlst = i\n            }\n        }\n        return minlst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minlst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minlst = i\n            }\n        }\n        return minlst",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst1(0).length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var minlst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                minlst = lst2(i)\n            }\n        }\n        minlst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minlst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minlst = i\n            }\n        }\n        return minlst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        if (lst.isInstanceOf[List[Any]]) {\n            val lst1 = lst.asInstanceOf[List[Any]]\n            if (lst1.length == 0) {\n                return List()\n            }\n            else {\n                var min = lst1(0)\n                for (i <- 1 until lst1.length) {\n                    if (FindMin(lst1(i)).asInstanceOf[List[Any]].length < FindMin(min).asInstanceOf[List[Any]].length) {\n                        min = lst1(i)\n                    }\n                }\n                return min\n            }\n        }\n        else {\n            return List(lst)\n        }",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        minList",
    "        if (lst.isInstanceOf[List[Any]]) {\n            val lst2 = lst.asInstanceOf[List[Any]]\n            if (lst2.length == 0) return List()\n            else {\n                val lst3 = lst2.map(FindMin(_))\n                val lst4 = lst3.filter(_.isInstanceOf[List[Any]])\n                if (lst4.length == 0) return lst\n                else {\n                    val lst5 = lst4.map(_.asInstanceOf[List[Any]])\n                    val lst6 = lst5.sortWith((l1, l2) => l1.length < l2.length)\n                    return lst6(0)\n                }\n            }\n        }\n        else return lst",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        var min = lst1(0).asInstanceOf[List[Any]].length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).asInstanceOf[List[Any]].length < min) {\n                min = lst1(i).asInstanceOf[List[Any]].length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_list = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_list = i\n            }\n        }\n        min_list",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        var min = lst1.head.asInstanceOf[List[Any]].length\n        var min_lst = lst1.head\n        for (l <- lst1) {\n            if (l.asInstanceOf[List[Any]].length < min) {\n                min = l.asInstanceOf[List[Any]].length\n                min_lst = l\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        lst match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                val min = FindMin(xs)\n                min match {\n                    case y :: ys => if (x.length < y.length) x else min\n                    case _ => min\n                }\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0)\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].map(x => x.asInstanceOf[List[Any]].length).min\n        lst.asInstanceOf[List[Any]].filter(x => x.asInstanceOf[List[Any]].length == min)",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                min_lst = lst2(i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var minList = List[Any]()\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (i.asInstanceOf[List[Any]].length < min) {\n                    min = i.asInstanceOf[List[Any]].length\n                    minList = i.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return minList",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        var min = lst2(0).asInstanceOf[List[Any]].length\n        var minlst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).asInstanceOf[List[Any]].length < min) {\n                min = lst2(i).asInstanceOf[List[Any]].length\n                minlst = lst2(i)\n            }\n        }\n        minlst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst1(0).length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst1(0).length\n        var min_index = 0\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_index = i\n            }\n        }\n        return lst1(min_index)",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = List[Any]()\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (i.asInstanceOf[List[Any]].length < min) {\n                    min = i.asInstanceOf[List[Any]].length\n                    min_lst = i.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                var temp = FindMin(lst.asInstanceOf[List[Any]].apply(i))\n                if (temp.asInstanceOf[List[Any]].length < min) {\n                    min = temp.asInstanceOf[List[Any]].length\n                    min_lst = temp\n                }\n            }\n        }\n        return min_lst",
    "        lst match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                val min = FindMin(xs)\n                if (min.asInstanceOf[List[Any]].length < x.asInstanceOf[List[Any]].length) min else x\n            }\n        }",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        var min = lst2(0).asInstanceOf[List[Any]].length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            val lst3 = lst2(i).asInstanceOf[List[Any]]\n            if (lst3.length < min) {\n                min = lst3.length\n                min_lst = lst3\n            }\n        }\n        min_lst",
    "        var min = List[Any]()\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (min.length == 0 || i.asInstanceOf[List[Any]].length < min.length) {\n                min = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                min_lst = lst2(i)\n            }\n        }\n        return min_lst",
    "        lst match {\n            case Nil => Nil\n            case h :: t => {\n                val min = FindMin(t)\n                min match {\n                    case Nil => h\n                    case _ => if (h.length < min.length) h else min\n                }\n            }\n        }",
    "        lst match {\n            case Nil => Nil\n            case x :: xs => {\n                val min = FindMin(xs)\n                min match {\n                    case Nil => x\n                    case y :: ys => {\n                        if (x.length < y.length) x else y\n                    }\n                }\n            }\n        }",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        var min = lst2(0).asInstanceOf[List[Any]].length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).asInstanceOf[List[Any]].length < min) {\n                min = lst2(i).asInstanceOf[List[Any]].length\n                min_lst = lst2(i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        var min = lst2(0).asInstanceOf[List[Any]].length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).asInstanceOf[List[Any]].length < min) {\n                min = lst2(i).asInstanceOf[List[Any]].length\n                min_lst = lst2(i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = List[Any]()\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (min.length == 0 || i.asInstanceOf[List[Any]].length < min.length) {\n                min = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min",
    "        lst match {\n            case Nil => Nil\n            case x :: xs => {\n                val min = FindMin(xs)\n                min match {\n                    case Nil => x\n                    case y :: ys => {\n                        if (x.length < y.length) x else y\n                    }\n                }\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]](0)\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                minList = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        minList",
    "        lst match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                val min = FindMin(xs)\n                if (min.asInstanceOf[List[Any]].length < x.asInstanceOf[List[Any]].length) min else x\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        var min = lst2(0).asInstanceOf[List[Int]].length\n        var minlst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).asInstanceOf[List[Int]].length < min) {\n                min = lst2(i).asInstanceOf[List[Int]].length\n                minlst = lst2(i)\n            }\n        }\n        minlst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        if (lst.isInstanceOf[List[Any]]) {\n            val lst2 = lst.asInstanceOf[List[Any]]\n            if (lst2.isEmpty)\n                return List()\n            else {\n                val lst3 = lst2.map(FindMin(_))\n                val lst4 = lst3.filter(_.isInstanceOf[List[Any]])\n                if (lst4.isEmpty)\n                    return lst\n                else {\n                    val lst5 = lst4.map(_.asInstanceOf[List[Any]].length)\n                    val min = lst5.min\n                    val lst6 = lst4.filter(_.asInstanceOf[List[Any]].length == min)\n                    return lst6(0)\n                }\n            }\n        }\n        else\n            return lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_index = 0\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                min_index = i\n            }\n        }\n        return lst2(min_index)",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_index = 0\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                min_index = i\n            }\n        }\n        return lst2(min_index)",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        min",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0)\n        for (i <- 1 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        val lst3 = lst2.map(x => x.length)\n        val min = lst3.min\n        val index = lst3.indexOf(min)\n        return lst2(index)",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]](0)\n        for (i <- 1 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                minList = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        return minList",
    "        lst match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                val y = FindMin(xs)\n                if (x.asInstanceOf[List[Any]].length < y.asInstanceOf[List[Any]].length) x else y\n            }\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        var min = lst1(0).asInstanceOf[List[Any]].length\n        var min_lst = lst1(0)\n        for (i <- 0 until lst1.length) {\n            if (lst1(i).asInstanceOf[List[Any]].length < min) {\n                min = lst1(i).asInstanceOf[List[Any]].length\n                min_lst = lst1(i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        return min",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]](0)\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                minList = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        return minList",
    "        lst match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                val y = FindMin(xs)\n                if (x.asInstanceOf[List[Any]].length < y.asInstanceOf[List[Any]].length) x else y\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                var temp = FindMin(lst.asInstanceOf[List[Any]].apply(i))\n                if (temp.asInstanceOf[List[Any]].length < min) {\n                    min = temp.asInstanceOf[List[Any]].length\n                    min_lst = temp.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst : Any = lst\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (FindMin(i).asInstanceOf[List[Any]].length < min) {\n                    min = FindMin(i).asInstanceOf[List[Any]].length\n                    min_lst = FindMin(i)\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        return min",
    "        if (lst.isInstanceOf[List[Any]]) {\n            val lst2 = lst.asInstanceOf[List[Any]]\n            if (lst2.length == 0) {\n                return lst\n            }\n            else {\n                val lst3 = lst2.map(FindMin(_))\n                val lst4 = lst3.filter(x => x.isInstanceOf[List[Any]])\n                if (lst4.length == 0) {\n                    return lst\n                }\n                else {\n                    val lst5 = lst4.map(x => x.asInstanceOf[List[Any]])\n                    val lst6 = lst5.sortWith((x, y) => x.length < y.length)\n                    return lst6(0)\n                }\n            }\n        }\n        else {\n            return lst\n        }",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst2(0).length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).length < min) {\n                min = lst2(i).length\n                min_lst = lst2(i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = List[Any]()\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (i.asInstanceOf[List[Any]].length < min) {\n                    min = i.asInstanceOf[List[Any]].length\n                    min_lst = i.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        var min = lst1(0).asInstanceOf[List[Any]].length\n        var min_lst = lst1(0).asInstanceOf[List[Any]]\n        for (i <- 1 until lst1.length) {\n            val lst2 = lst1(i).asInstanceOf[List[Any]]\n            if (lst2.length < min) {\n                min = lst2.length\n                min_lst = lst2\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                val l = FindMin(i)\n                if (l.asInstanceOf[List[Any]].length < min) {\n                    min = l.asInstanceOf[List[Any]].length\n                    min_lst = l\n                }\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = List[Any]()\n        var min_len = Int.MaxValue\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                if (lst.asInstanceOf[List[Any]].apply(i).asInstanceOf[List[Any]].length < min_len) {\n                    min = lst.asInstanceOf[List[Any]].apply(i).asInstanceOf[List[Any]]\n                    min_len = min.length\n                }\n            }\n        }\n        return min",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minlst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minlst = i\n            }\n        }\n        return minlst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                var len = FindMin(lst.asInstanceOf[List[Any]].apply(i)).asInstanceOf[List[Any]].length\n                if (len < min) {\n                    min = len\n                    min_lst = FindMin(lst.asInstanceOf[List[Any]].apply(i)).asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i.asInstanceOf[List[Any]]\n            }\n        }\n        return min_lst",
    "        var min = 0\n        var min_lst = List[Any]()\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]][i].asInstanceOf[List[Any]].length < min || min == 0) {\n                min = lst.asInstanceOf[List[Any]][i].asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]][i].asInstanceOf[List[Any]]\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        return min",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        var min = lst1(0).asInstanceOf[List[Any]].length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).asInstanceOf[List[Any]].length < min) {\n                min = lst1(i).asInstanceOf[List[Any]].length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        lst match {\n            case Nil => Nil\n            case lst : List[Any] => lst.map(FindMin).minBy(_.length)\n            case _ => lst\n        }",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[List[Any]])\n        val lst4 = lst3.sortBy(x => x.length)\n        lst4.head",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        var min = lst2(0).asInstanceOf[List[Any]].length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).asInstanceOf[List[Any]].length < min) {\n                min = lst2(i).asInstanceOf[List[Any]].length\n                min_lst = lst2(i)\n            }\n        }\n        min_lst",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst1(0).length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        return min",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                if (i.asInstanceOf[List[Any]].length < min) {\n                    min = i.asInstanceOf[List[Any]].length\n                    min_lst = i.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_list = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_list = i\n            }\n        }\n        return min_list",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                val lst_len = FindMin(lst.asInstanceOf[List[Any]].apply(i))\n                if (lst_len.asInstanceOf[List[Any]].length < min) {\n                    min = lst_len.asInstanceOf[List[Any]].length\n                    min_lst = lst_len.asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        var min = lst1(0).length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).length < min) {\n                min = lst1(i).length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        if (lst2.length == 0) return lst\n        var min = lst2(0).asInstanceOf[List[Any]].length\n        var min_lst = lst2(0)\n        for (i <- 1 until lst2.length) {\n            if (lst2(i).asInstanceOf[List[Any]].length < min) {\n                min = lst2(i).asInstanceOf[List[Any]].length\n                min_lst = lst2(i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        return min"
  ]
}