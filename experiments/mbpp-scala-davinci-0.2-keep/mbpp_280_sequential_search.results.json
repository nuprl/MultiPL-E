{
  "name": "mbpp_280_sequential_search",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) {\n            Right(dlist.indexOf(item))\n        } else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeqk9ze8o.scala:13)\n\tat Problem.main(tmpeqk9ze8o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (x <- dlist) {\n            if (x == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1vcixphs.scala:16)\n\tat Problem.main(tmp1vcixphs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        val index = dlist.indexOf(item)\n        if (index == -1) Left(false) else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq0do7iyr.scala:10)\n\tat Problem.main(tmpq0do7iyr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                index = i\n                return Right(index)\n            }\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0wmzfrhw.scala:16)\n\tat Problem.main(tmp0wmzfrhw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) {\n            Right(dlist.indexOf(item))\n        } else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeqk9ze8o.scala:13)\n\tat Problem.main(tmpeqk9ze8o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while (index < dlist.length && !found) {\n            if (dlist(index) == item) {\n                found = true\n            }\n            else {\n                index += 1\n            }\n        }\n        if (found) {\n            Right(index)\n        }\n        else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc74t1gkq.scala:24)\n\tat Problem.main(tmpc74t1gkq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) {\n            Left(false)\n        } else if (dlist.head == item) {\n            Right(0)\n        } else {\n            val result = sequentialSearch(dlist.tail, item)\n            if (result.isLeft) {\n                Left(false)\n            } else {\n                Right(1 + result.right.get)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6647nkmk.scala:20)\n\tat Problem.main(tmp6647nkmk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgbn1o1xe.scala:17)\n\tat Problem.main(tmpgbn1o1xe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgbn1o1xe.scala:17)\n\tat Problem.main(tmpgbn1o1xe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                index = i\n                return Right(index)\n            }\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0wmzfrhw.scala:16)\n\tat Problem.main(tmp0wmzfrhw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while(index < dlist.length && !found) {\n            if(dlist(index) == item) {\n                found = true\n            }\n            else {\n                index += 1\n            }\n        }\n        if(found) {\n            return Right(index)\n        }\n        else {\n            return Left(found)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzv46o296.scala:24)\n\tat Problem.main(tmpzv46o296.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        val result = dlist.indexOf(item)\n        if (result == -1) Left(false) else Right(result)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ckm_8rc.scala:10)\n\tat Problem.main(tmp5ckm_8rc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.indexOf(item))\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr4envi9d.scala:11)\n\tat Problem.main(tmpr4envi9d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 to dlist.length - 1) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7brfnq7.scala:17)\n\tat Problem.main(tmpj7brfnq7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.indexOf(item))\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr4envi9d.scala:11)\n\tat Problem.main(tmpr4envi9d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(0)\n        else {\n            val result = sequentialSearch(dlist.tail, item)\n            if (result.isLeft) Left(false)\n            else Right(1 + result.right.get)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjyf0_h7k.scala:15)\n\tat Problem.main(tmpjyf0_h7k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) Right(dlist.indexOf(item)) else Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk8wywu5f.scala:9)\n\tat Problem.main(tmpk8wywu5f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var i = 0\n        var found = false\n        var position = -1\n        while (i < dlist.length && !found) {\n            if (dlist(i) == item) {\n                found = true\n                position = i\n            }\n            i += 1\n        }\n        if (found) Right(position) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdq3jdor0.scala:19)\n\tat Problem.main(tmpdq3jdor0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(0)\n        else {\n            val result = sequentialSearch(dlist.tail, item)\n            if (result.isLeft) Left(false)\n            else Right(result.right.get + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprhedclyv.scala:15)\n\tat Problem.main(tmprhedclyv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7tsmi8ik.scala:16)\n\tat Problem.main(tmp7tsmi8ik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.head)\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsenua5ck.scala:11)\n\tat Problem.main(tmpsenua5ck.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) {\n            Right(dlist.indexOf(item))\n        } else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeqk9ze8o.scala:13)\n\tat Problem.main(tmpeqk9ze8o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 to dlist.length - 1) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7brfnq7.scala:17)\n\tat Problem.main(tmpj7brfnq7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7tsmi8ik.scala:16)\n\tat Problem.main(tmp7tsmi8ik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7tsmi8ik.scala:16)\n\tat Problem.main(tmp7tsmi8ik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var i = 0\n        var found = false\n        while (i < dlist.length && !found) {\n            if (dlist(i) == item) {\n                found = true\n            }\n            else {\n                i = i + 1\n            }\n        }\n        if (found) {\n            Right(i)\n        }\n        else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1lcfkmez.scala:24)\n\tat Problem.main(tmp1lcfkmez.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                index = i\n                return Right(index)\n            }\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0wmzfrhw.scala:16)\n\tat Problem.main(tmp0wmzfrhw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        val index = dlist.indexOf(item)\n        if (index == -1) Left(false) else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq0do7iyr.scala:10)\n\tat Problem.main(tmpq0do7iyr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var i = 0\n        while (i < dlist.length) {\n            if (dlist(i) == item) return Right(i)\n            i += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzmhntu54.scala:14)\n\tat Problem.main(tmpzmhntu54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (x <- dlist) {\n            if (x == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1vcixphs.scala:16)\n\tat Problem.main(tmp1vcixphs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var position = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                position = i\n            }\n        }\n        if (found) Right(position) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxlrv1qkn.scala:17)\n\tat Problem.main(tmpxlrv1qkn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) return Right(i)\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1xgt3a2a.scala:12)\n\tat Problem.main(tmp1xgt3a2a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) return Left(false)\n        if (dlist.head == item) return Right(dlist.head)\n        else return sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpunhhji03.scala:11)\n\tat Problem.main(tmpunhhji03.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7tsmi8ik.scala:16)\n\tat Problem.main(tmp7tsmi8ik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var i = 0\n        while (i < dlist.length) {\n            if (dlist(i) == item) return Right(i)\n            i += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzmhntu54.scala:14)\n\tat Problem.main(tmpzmhntu54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var pos = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                pos = i\n            }\n        }\n        if (found) Right(pos) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdgotuxvl.scala:17)\n\tat Problem.main(tmpdgotuxvl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) return Right(i)\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1xgt3a2a.scala:12)\n\tat Problem.main(tmp1xgt3a2a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var position = -1\n        var index = 0\n        while (index < dlist.length && !found) {\n            if (dlist(index) == item) {\n                found = true\n                position = index\n            }\n            index += 1\n        }\n        if (found) Right(position) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8wxlh5vr.scala:19)\n\tat Problem.main(tmp8wxlh5vr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                index = i\n                return Right(index)\n            }\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0wmzfrhw.scala:16)\n\tat Problem.main(tmp0wmzfrhw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) {\n            return Left(false)\n        }\n        else if (dlist.head == item) {\n            return Right(dlist.indexOf(item))\n        }\n        else {\n            return sequentialSearch(dlist.tail, item)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx7qe362b.scala:17)\n\tat Problem.main(tmpx7qe362b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while (index < dlist.length && !found) {\n            if (dlist(index) == item) {\n                found = true\n            }\n            else {\n                index += 1\n            }\n        }\n        if (found) {\n            Right(index)\n        }\n        else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc74t1gkq.scala:24)\n\tat Problem.main(tmpc74t1gkq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        def search(dlist : List[Long], item : Long, index : Long) : Either[Boolean, Long] = {\n            if (dlist.isEmpty) Left(false)\n            else if (dlist.head == item) Right(index)\n            else search(dlist.tail, item, index + 1)\n        }\n        search(dlist, item, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnf9_1k_y.scala:14)\n\tat Problem.main(tmpnf9_1k_y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while(index < dlist.length && !found) {\n            if(dlist(index) == item) {\n                found = true\n            }\n            else {\n                index += 1\n            }\n        }\n        if(found) {\n            return Right(index)\n        }\n        else {\n            return Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpklxhzced.scala:24)\n\tat Problem.main(tmpklxhzced.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (e <- dlist) {\n            if (e == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz740hkk2.scala:16)\n\tat Problem.main(tmpz740hkk2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        dlist match {\n            case Nil => Left(false)\n            case x :: xs => if (x == item) Right(0) else sequentialSearch(xs, item) match {\n                case Left(false) => Left(false)\n                case Right(i) => Right(i + 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjgbb0dj3.scala:15)\n\tat Problem.main(tmpjgbb0dj3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var pos = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                pos = i\n            }\n        }\n        if (found) Right(pos) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdgotuxvl.scala:17)\n\tat Problem.main(tmpdgotuxvl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) {\n            Right(dlist.indexOf(item))\n        } else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeqk9ze8o.scala:13)\n\tat Problem.main(tmpeqk9ze8o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while (index < dlist.length && !found) {\n            if (dlist(index) == item) {\n                found = true\n            } else {\n                index += 1\n            }\n        }\n        if (found) {\n            Right(index)\n        } else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx7nke2gu.scala:22)\n\tat Problem.main(tmpx7nke2gu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while (index < dlist.length && !found) {\n            if (dlist(index) == item) {\n                found = true\n            } else {\n                index += 1\n            }\n        }\n        if (found) {\n            Right(index)\n        } else {\n            Left(found)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp49drmx7g.scala:22)\n\tat Problem.main(tmp49drmx7g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var pos = 0\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                pos = i\n            }\n        }\n        if (found) Right(pos) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw5w5lshy.scala:17)\n\tat Problem.main(tmpw5w5lshy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.head)\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsenua5ck.scala:11)\n\tat Problem.main(tmpsenua5ck.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while(index < dlist.length && !found) {\n            if(dlist(index) == item) found = true\n            else index += 1\n        }\n        if(found) Right(index) else Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw1lu88so.scala:15)\n\tat Problem.main(tmpw1lu88so.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (x <- dlist) {\n            if (x == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1vcixphs.scala:16)\n\tat Problem.main(tmp1vcixphs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while (index < dlist.length && !found) {\n            if (dlist(index) == item) {\n                found = true\n            }\n            else {\n                index += 1\n            }\n        }\n        if (found) {\n            return Right(index)\n        }\n        else {\n            return Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz9tvc6_4.scala:24)\n\tat Problem.main(tmpz9tvc6_4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var pos = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                pos = i\n            }\n        }\n        if (found) Right(pos) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdgotuxvl.scala:17)\n\tat Problem.main(tmpdgotuxvl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var i = 0\n        while (i < dlist.length) {\n            if (dlist(i) == item) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu20uvk2s.scala:16)\n\tat Problem.main(tmpu20uvk2s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) {\n            Right(dlist.indexOf(item))\n        } else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeqk9ze8o.scala:13)\n\tat Problem.main(tmpeqk9ze8o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) {\n            Left(false)\n        } else if (dlist.head == item) {\n            Right(0)\n        } else {\n            val result = sequentialSearch(dlist.tail, item)\n            if (result.isLeft) {\n                Left(false)\n            } else {\n                Right(result.right.get + 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoxfusd0i.scala:20)\n\tat Problem.main(tmpoxfusd0i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 to dlist.length - 1) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7brfnq7.scala:17)\n\tat Problem.main(tmpj7brfnq7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index : Long = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnpaojh3s.scala:16)\n\tat Problem.main(tmpnpaojh3s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        val index = dlist.indexOf(item)\n        if (index == -1) Left(false) else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq0do7iyr.scala:10)\n\tat Problem.main(tmpq0do7iyr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.head)\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsenua5ck.scala:11)\n\tat Problem.main(tmpsenua5ck.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) {\n            Right(dlist.indexOf(item))\n        }\n        else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkh6t9l99.scala:14)\n\tat Problem.main(tmpkh6t9l99.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) return Left(false)\n        if (dlist.head == item) return Right(dlist.head)\n        else return sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpunhhji03.scala:11)\n\tat Problem.main(tmpunhhji03.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                index = i\n                return Right(index)\n            }\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0wmzfrhw.scala:16)\n\tat Problem.main(tmp0wmzfrhw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        dlist match {\n            case Nil => Left(false)\n            case x :: xs => if (x == item) Right(dlist.indexOf(item)) else sequentialSearch(xs, item)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjvpg4urz.scala:12)\n\tat Problem.main(tmpjvpg4urz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        val index = dlist.indexOf(item)\n        if (index == -1) Left(false) else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq0do7iyr.scala:10)\n\tat Problem.main(tmpq0do7iyr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        dlist.zipWithIndex.filter(x => x._1 == item).map(x => Right(x._2)).headOption.getOrElse(Left(false))\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl1t5f_bc.scala:6:95 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        dlist.zipWithIndex.filter(\u001b[36mx\u001b[0m => x._1 == item).map(\u001b[36mx\u001b[0m => Right(x._2)).headOption.getOrElse(Left(\u001b[31mfalse\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    Either[Boolean, \u001b[1m\u001b[31mInt\u001b[0m]\n\u001b[31m  |\u001b[0m        Required: Either[Boolean, \u001b[1m\u001b[32mLong\u001b[0m]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.indexOf(item))\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr4envi9d.scala:11)\n\tat Problem.main(tmpr4envi9d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) Right(dlist.indexOf(item)) else Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk8wywu5f.scala:9)\n\tat Problem.main(tmpk8wywu5f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.head)\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsenua5ck.scala:11)\n\tat Problem.main(tmpsenua5ck.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var pos = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                pos = i\n            }\n        }\n        if (found) Right(pos) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdgotuxvl.scala:17)\n\tat Problem.main(tmpdgotuxvl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var i = 0\n        for (i <- 0 to dlist.length - 1) {\n            if (dlist(i) == item) {\n                return Right(i)\n            }\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcv_t__dk.scala:15)\n\tat Problem.main(tmpcv_t__dk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.head)\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsenua5ck.scala:11)\n\tat Problem.main(tmpsenua5ck.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        var i = 0\n        while (i < dlist.length && !found) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n            i += 1\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxb3wpgxq.scala:19)\n\tat Problem.main(tmpxb3wpgxq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.indexOf(item))\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr4envi9d.scala:11)\n\tat Problem.main(tmpr4envi9d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = 0\n        for (i <- 0 to dlist.length - 1) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc24ddgle.scala:17)\n\tat Problem.main(tmpc24ddgle.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = 0\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_f1t45uw.scala:17)\n\tat Problem.main(tmp_f1t45uw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        val index = dlist.indexOf(item)\n        if (index == -1) Left(false) else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq0do7iyr.scala:10)\n\tat Problem.main(tmpq0do7iyr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                index = i\n                return Right(index)\n            }\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0wmzfrhw.scala:16)\n\tat Problem.main(tmp0wmzfrhw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) {\n            Left(false)\n        } else if (dlist.head == item) {\n            Right(0)\n        } else {\n            val result = sequentialSearch(dlist.tail, item)\n            if (result.isLeft) {\n                Left(false)\n            } else {\n                Right(result.right.get + 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoxfusd0i.scala:20)\n\tat Problem.main(tmpoxfusd0i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while (index < dlist.length && !found) {\n            if (dlist(index) == item) {\n                found = true\n            }\n            else {\n                index += 1\n            }\n        }\n        if (found) {\n            return Right(index)\n        }\n        else {\n            return Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz9tvc6_4.scala:24)\n\tat Problem.main(tmpz9tvc6_4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                index = i\n                return Right(index)\n            }\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0wmzfrhw.scala:16)\n\tat Problem.main(tmp0wmzfrhw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        val index = dlist.indexOf(item)\n        if (index == -1) Left(false)\n        else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl4pxy_8z.scala:11)\n\tat Problem.main(tmpl4pxy_8z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var pos = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                pos = i\n            }\n        }\n        if (found) Right(pos) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdgotuxvl.scala:17)\n\tat Problem.main(tmpdgotuxvl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7tsmi8ik.scala:16)\n\tat Problem.main(tmp7tsmi8ik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        for (i <- dlist) {\n            if (i == item) {\n                found = true\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpanbo76cc.scala:18)\n\tat Problem.main(tmpanbo76cc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var pos = 0\n        for (i <- 0 to dlist.length - 1) {\n            if (dlist(i) == item) {\n                found = true\n                pos = i\n            }\n        }\n        if (found) Right(pos) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ehyzx2q.scala:17)\n\tat Problem.main(tmp5ehyzx2q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7tsmi8ik.scala:16)\n\tat Problem.main(tmp7tsmi8ik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (e <- dlist) {\n            if (e == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmy1j1aj4.scala:14)\n\tat Problem.main(tmpmy1j1aj4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                index = i\n                return Right(index)\n            }\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0wmzfrhw.scala:16)\n\tat Problem.main(tmp0wmzfrhw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1L\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpabmtps41.scala:17)\n\tat Problem.main(tmpabmtps41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (x <- dlist) {\n            if (x == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1vcixphs.scala:16)\n\tat Problem.main(tmp1vcixphs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var i = 0\n        while (i < dlist.length) {\n            if (dlist(i) == item) return Right(i)\n            i += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzmhntu54.scala:14)\n\tat Problem.main(tmpzmhntu54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        for (i <- 0 to dlist.length - 1) {\n            if (dlist(i) == item) return Right(i)\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvwzgpra.scala:12)\n\tat Problem.main(tmppvwzgpra.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (x <- dlist) {\n            if (x == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7p92f47u.scala:14)\n\tat Problem.main(tmp7p92f47u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) {\n            return Left(false)\n        }\n        if (dlist.head == item) {\n            return Right(0)\n        }\n        val result = sequentialSearch(dlist.tail, item)\n        if (result.isLeft) {\n            return Left(false)\n        }\n        return Right(result.right.get + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmay41qlh.scala:19)\n\tat Problem.main(tmpmay41qlh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) {\n            Right(dlist.indexOf(item))\n        } else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeqk9ze8o.scala:13)\n\tat Problem.main(tmpeqk9ze8o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.indexOf(item))\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr4envi9d.scala:11)\n\tat Problem.main(tmpr4envi9d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7tsmi8ik.scala:16)\n\tat Problem.main(tmp7tsmi8ik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found : Boolean = false\n        var index : Long = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4rhppxlk.scala:17)\n\tat Problem.main(tmp4rhppxlk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var i = 0\n        for (i <- 0 to dlist.length - 1) {\n            if (dlist(i) == item) {\n                return Right(i)\n            }\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcv_t__dk.scala:15)\n\tat Problem.main(tmpcv_t__dk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        dlist.zipWithIndex.filter(_._1 == item).headOption match {\n            case Some(x) => Right(x._2)\n            case None => Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxx2i57ac.scala:12)\n\tat Problem.main(tmpxx2i57ac.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var i = 0\n        for (i <- 0 to dlist.length - 1) {\n            if (dlist(i) == item) {\n                return Right(i)\n            }\n        }\n        return Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcv_t__dk.scala:15)\n\tat Problem.main(tmpcv_t__dk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) return Left(false)\n        else if (dlist.head == item) return Right(0)\n        else {\n            val result = sequentialSearch(dlist.tail, item)\n            if (result.isLeft) return Left(false)\n            else return Right(1 + result.right.get)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkeb4qtfa.scala:15)\n\tat Problem.main(tmpkeb4qtfa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) Right(dlist.indexOf(item))\n        else Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfg77xb1n.scala:10)\n\tat Problem.main(tmpfg77xb1n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) {\n            Right(dlist.indexOf(item))\n        } else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeqk9ze8o.scala:13)\n\tat Problem.main(tmpeqk9ze8o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.head)\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsenua5ck.scala:11)\n\tat Problem.main(tmpsenua5ck.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (x <- dlist) {\n            if (x == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7p92f47u.scala:14)\n\tat Problem.main(tmp7p92f47u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) return Right(index)\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspl104w4.scala:14)\n\tat Problem.main(tmpspl104w4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var found = false\n        var index = -1\n        for (i <- 0 until dlist.length) {\n            if (dlist(i) == item) {\n                found = true\n                index = i\n            }\n        }\n        if (found) Right(index) else Left(found)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtu7fxt.scala:17)\n\tat Problem.main(tmppvtu7fxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        dlist match {\n            case Nil => Left(false)\n            case x :: xs => if (x == item) Right(0) else {\n                val result = sequentialSearch(xs, item)\n                result match {\n                    case Left(false) => Left(false)\n                    case Right(x) => Right(x + 1)\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124132,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnw6h8q3b.scala:18)\n\tat Problem.main(tmpnw6h8q3b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        dlist.indexOf(item) match {\n            case -1 => Left(false)\n            case x => Right(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124132,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4t440vld.scala:12)\n\tat Problem.main(tmp4t440vld.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        for (i <- dlist) {\n            if (i == item) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(false)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q42c61b.scala:16)\n\tat Problem.main(tmp3q42c61b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.indexOf(item))\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr4envi9d.scala:11)\n\tat Problem.main(tmpr4envi9d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while (index < dlist.length && !found) {\n            if (dlist(index) == item) {\n                found = true\n            }\n            else {\n                index += 1\n            }\n        }\n        if (found) {\n            return Right(index)\n        }\n        else {\n            return Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz9tvc6_4.scala:24)\n\tat Problem.main(tmpz9tvc6_4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.isEmpty) Left(false)\n        else if (dlist.head == item) Right(dlist.indexOf(item))\n        else sequentialSearch(dlist.tail, item)\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr4envi9d.scala:11)\n\tat Problem.main(tmpr4envi9d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while (index < dlist.length && !found) {\n            if (dlist(index) == item) {\n                found = true\n            }\n            else {\n                index += 1\n            }\n        }\n        if (found) {\n            Right(index)\n        }\n        else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc74t1gkq.scala:24)\n\tat Problem.main(tmpc74t1gkq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        var index = 0\n        var found = false\n        while (index < dlist.length && !found) {\n            if (dlist(index) == item) {\n                found = true\n            }\n            else {\n                index += 1\n            }\n        }\n        if (found) {\n            Right(index)\n        }\n        else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc74t1gkq.scala:24)\n\tat Problem.main(tmpc74t1gkq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Either[Boolean, Long] = {\n        if (dlist.contains(item)) {\n            Right(dlist.indexOf(item))\n        } else {\n            Left(false)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals((true, 3l)));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals((true, 7l)));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals((true, 6l)));\n    }\n\n}\n",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeqk9ze8o.scala:13)\n\tat Problem.main(tmpeqk9ze8o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}