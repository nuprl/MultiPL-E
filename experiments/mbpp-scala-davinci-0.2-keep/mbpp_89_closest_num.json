{
  "name": "mbpp_89_closest_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the closest smaller number than n.\n    def closestNum(N : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(closestNum((11l)) == (10l));\n    assert(closestNum((7l)) == (6l));\n    assert(closestNum((12l)) == (11l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        var n = N\n        var count = 0\n        while (n % 2 == 0) {\n            n /= 2\n            count += 1\n        }\n        if (count == 0) return N - 1\n        var i = 1\n        while (i < count) {\n            n *= 2\n            i += 1\n        }\n        n - 1",
    "        var n = N\n        var count = 0\n        while (n % 2 == 0) {\n            n /= 2\n            count += 1\n        }\n        if (count == 0) return N - 1\n        else return N - pow(2, count).toLong",
    "        val s = N.toString\n        val l = s.length\n        val d = s(l - 1).toString.toInt\n        val d1 = s(l - 2).toString.toInt\n        if (d == 0) {\n            if (d1 == 1) return N - 1\n            else return N - 11\n        }\n        else if (d == 1) {\n            if (d1 == 1) return N - 1\n            else return N - 11\n        }\n        else if (d == 2) {\n            if (d1 == 1) return N - 1\n            else return N - 11\n        }\n        else if (d == 3) {\n            if (d1 == 1) return N - 1\n            else return N - 11\n        }\n        else if (d == 4) {\n            if (d1 == 1) return N - 1\n            else return N - 11\n        }\n        else if (d == 5) {\n            if (d1 == 1) return N - 1\n            else return N - 11\n        }\n        else if (d == 6) {\n            if (d1 == 1) return N - 1\n            else return N - 11\n        }\n        else if (d == 7) {\n            if (d1 == 1) return N - 1\n            else return N - 11\n        }\n        else if (d == 8) {\n            if (d1 == 1) return N - 1\n            else return N - 11\n        }\n        else if (d == 9) {\n            if (d1 == 1) return N - 1\n            else return N - 11\n        }\n        else return -1",
    "        var n = N\n        var count = 0\n        while (n % 2 == 0) {\n            count += 1\n            n /= 2\n        }\n        if (count == 0) return -1\n        else return N - (1 << (count - 1))",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        if (i == 0) return -1\n        var result = N\n        result &= ~(1 << (i + j))\n        result |= (1 << (i + j - 1))\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        return (1 << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        val s = N.toString\n        val l = s.length\n        val d = s(l - 1).toString.toInt\n        val d1 = s(l - 2).toString.toInt\n        if (d == 0) {\n            if (d1 == 1) return N - 1\n            return (N / pow(10, l - 2)).toLong * pow(10, l - 2).toLong - 1\n        }\n        if (d1 == 0) return N - d\n        if (d1 == 1) return N - d - 1\n        return (N / pow(10, l - 1)).toLong * pow(10, l - 1).toLong - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var nn = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff",
    "        val s = N.toString\n        val n = s.length\n        val m = n / 2\n        val a = s.substring(0, m)\n        val b = s.substring(m, n)\n        val c = a.toLong\n        val d = b.toLong\n        val e = c - 1\n        val f = d + 1\n        val g = e.toString.length\n        val h = f.toString.length\n        val i = g - m\n        val j = h - m\n        val k = if (i == 0) e else e * pow(10, m).toLong\n        val l = if (j == 0) f else f * pow(10, m).toLong\n        val x = if (i == 0) k else k + pow(10, m - 1).toLong\n        val y = if (j == 0) l else l - pow(10, m - 1).toLong\n        val z = if (abs(x - N) < abs(y - N)) x else y\n        z",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else {\n                j = i\n                k = 1\n            }\n            n /= 2\n        }\n        return (pow(2, j).toLong + k)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var result = N\n        result &= ~((1 << (i + 1)) - 1)\n        result |= (1 << i) - 1\n        result",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                break\n            }\n        }\n        return N - (1 << i)",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if (n % 10 == 0) {\n                n /= 10\n                count += 1\n            }\n            else {\n                n -= 1\n                count += 1\n            }\n        }\n        N - count",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        N - (1 << count)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                j = i\n            }\n            i += 1\n            n >>= 1\n        }\n        return N & ~(1 << j)",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n != 0) {\n            if ((n & 1) == 1) {\n                if (i == 0) {\n                    i = k\n                } else {\n                    j = k\n                }\n            }\n            n >>= 1\n            k += 1\n        }\n        N ^ ((1 << i) | (1 << j))",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                return (N & ~(1 << i))\n            }\n        }\n        return 0",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        val n = N.toString\n        val len = n.length\n        val dp = Array.ofDim[Long](len, 2)\n        dp(0)(0) = 1\n        dp(0)(1) = 1\n        for (i <- 1 until len) {\n            dp(i)(0) = dp(i - 1)(0) * 10 + pow(10, i).toLong\n            dp(i)(1) = dp(i - 1)(1) * 10 + pow(10, i - 1).toLong\n        }\n        var ans = 0L\n        for (i <- 0 until len) {\n            val d = n(i) - '0'\n            if (d == 0) ans += dp(len - i - 1)(0)\n            else if (d == 1) ans += dp(len - i - 1)(1)\n            else ans += pow(10, len - i - 1).toLong\n        }\n        ans",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if (n % 10 == 0) {\n                n /= 10\n                count += 1\n            } else {\n                n -= 1\n                break\n            }\n        }\n        n * pow(10, count).toLong",
    "        val s = N.toString\n        val l = s.length\n        val a = s.toList.map(_.toString.toInt)\n        val b = a.zipWithIndex.sortWith((x, y) => x._1 < y._1)\n        val c = b.filter(_._2 != 0)\n        val d = c.filter(_._1 < a(0))\n        if (d.length == 0) return -1\n        val e = d.max\n        val f = a.updated(0, e._1).updated(e._2, a(0))\n        f.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i = k\n            } else {\n                j = k\n            }\n            n >>= 1\n            k += 1\n        }\n        var m = N & ((1 << i) - 1)\n        m |= (1 << i)\n        m |= ((1 << (j - i - 1)) - 1) << (i + 1)\n        return m",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i > j) return N - pow(2, i).toLong\n        else return N - pow(2, j).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var gggg = 0\n        var hhhh = 0\n        var i",
    "        val s = N.toString\n        val n = s.length\n        val m = s.toList.map(_.toString.toInt)\n        val p = (0 until n).map(i => (i, m(i))).filter(x => x._2 != 0).sortBy(_._2)\n        if (p.length == 0) return -1\n        val t = p.head\n        val u = (0 until n).map(i => if (i == t._1) t._2 - 1 else 9)\n        u.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        var ans = 0L\n        for (k <- 0 until i) ans = (ans << 1) + 1\n        for (k <- i until j) ans = (ans << 1)\n        return ans",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                i = j\n            }\n            j += 1\n            n >>= 1\n        }\n        N & ~(1 << i)",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            n /= 2\n        }\n        return pow(2, i).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                j = i\n            }\n            n >>= 1\n            i += 1\n        }\n        N & ~(1 << j)",
    "        var n = N\n        var i = 0\n        var j = 0\n        var result = 0L\n        while (n > 0) {\n            if (n % 2 == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n /= 2\n        }\n        result = (1 << (i + j)) - 1\n        result",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        var result = 0L\n        for (i <- 0 until count) {\n            result = (result << 1) + 1\n        }\n        result",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            n >>= 1\n        }\n        N - (1 << i)",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n -= 1\n                n |= (1 << i)\n                return n\n            }\n            i += 1\n            n >>= 1\n        }\n        return -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return ((1 << i) - 1) << (j - 1)",
    "        val s = N.toString\n        val n = s.length\n        val m = pow(10, n - 1).toLong\n        val d = s(0).toString.toInt\n        if (d == 1) {\n            val t = s.substring(1)\n            val u = t.toLong\n            val v = u - 1\n            val w = v.toString\n            val x = w.length\n            val y = n - x - 1\n            val z = pow(10, y).toLong\n            return z * 9 + v\n        } else {\n            val t = s.substring(1)\n            val u = t.toLong\n            val v = u - 1\n            val w = v.toString\n            val x = w.length\n            val y = n - x - 1\n            val z = pow(10, y).toLong\n            return (d - 1) * m + z * 9 + v\n        }",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return ((1 << i) + (1 << (j - 1)) - 1)",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i - 1) <= a(i)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val t = a(j)\n        a(j) = a(i - 1)\n        a(i - 1) = t\n        j = n - 1\n        while (i < j) {\n            val t = a(i)\n            a(i) = a(j)\n            a(j) = t\n            i += 1\n            j -= 1\n        }\n        a.mkString.toLong",
    "        val s = N.toString\n        val l = s.length\n        val a = s.toCharArray\n        var i = 0\n        while (i < l - 1) {\n            if (a(i) > a(i + 1)) {\n                a(i) = (a(i) - 1).toChar\n                for (j <- i + 1 until l) a(j) = '9'\n                return a.mkString.toLong\n            }\n            i += 1\n        }\n        return N",
    "        val s = N.toString\n        val l = s.length\n        val sb = new StringBuilder\n        var i = 0\n        while (i < l - 1) {\n            if (s(i) > s(i + 1)) {\n                sb.append(s.substring(0, i))\n                sb.append(s(i) - 1)\n                for (j <- i + 1 until l) sb.append('9')\n                return sb.toString.toLong\n            }\n            i += 1\n        }\n        N - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i = k\n            } else {\n                j = k\n            }\n            n >>= 1\n            k += 1\n        }\n        return (N & ((1 << i) - 1)) | (1 << i) | ((1 << (j - i - 1)) - 1)",
    "        val binary = N.toBinaryString\n        val len = binary.length\n        val last = binary.last\n        if (last == '1') {\n            val index = binary.lastIndexOf('0')\n            val newBinary = binary.substring(0, index) + \"1\" + \"0\" * (len - index - 1)\n            return Integer.parseInt(newBinary, 2).toLong\n        } else {\n            val index = binary.lastIndexOf('1')\n            val newBinary = binary.substring(0, index) + \"0\" * (len - index)\n            return Integer.parseInt(newBinary, 2).toLong\n        }",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var result = N\n        result &= ~((1 << i) - 1)\n        result |= (1 << (i - 1)) - 1\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i = k\n            } else {\n                j = k\n            }\n            n >>= 1\n            k += 1\n        }\n        var result = N\n        result &= ~(1 << j)\n        result |= 1 << i\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        if (count == 1) return N - 1\n        var i = 0\n        while (i < 63) {\n            if (((N >> i) & 1) == 1) {\n                var j = i + 1\n                while (j < 63) {\n                    if (((N >> j) & 1) == 0) {\n                        var result = N - (1L << i) + (1L << j)\n                        return result\n                    }\n                    j += 1\n                }\n            }\n            i += 1\n        }\n        return 0",
    "        val bin = N.toBinaryString\n        val len = bin.length\n        val bin2 = bin.substring(0, len - 1) + \"1\"\n        val bin3 = bin.substring(0, len - 1) + \"0\"\n        val num2 = BigInt(bin2, 2).toLong\n        val num3 = BigInt(bin3, 2).toLong\n        if (N - num3 < num2 - N) num3 else num2",
    "        val s = N.toString\n        val n = s.length\n        val m = n / 2\n        val (a, b) = s.splitAt(m)\n        val (c, d) = (a.toLong, b.toLong)\n        val (c1, d1) = (c - 1, d + 1)\n        val (c2, d2) = (c + 1, d - 1)\n        val (c3, d3) = (c, d - 1)\n        val (c4, d4) = (c - 1, d)\n        val (c5, d5) = (c, d)\n        val (c6, d6) = (c + 1, d)\n        val (c7, d7) = (c, d + 1)\n        val (c8, d8) = (c - 1, d + 1)\n        val (c9, d9) = (c + 1, d - 1)\n        val (c10, d10) = (c + 1, d + 1)\n        val (c11, d11) = (c - 1, d - 1)\n        val (c12, d12) = (c - 2, d + 1)\n        val (c13, d13) = (c + 1, d - 2)\n        val (c14, d14) = (c - 2, d)\n        val (c15, d15) = (c, d - 2)\n        val (c16, d16) = (c + 2, d)\n        val (c17, d17) = (c, d + 2)\n        val (c18, d18) = (c - 2, d + 2)\n        val (c19, d19) = (c + 2, d - 2)\n        val (c20, d20) = (c + 2, d + 2)\n        val (c21, d21) = (c - 2, d - 2)\n        val (c22, d22) = (c - 3, d + 1)\n        val (c23, d23) = (c + 1, d - 3)\n        val (c24, d24) =",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n            k += 1\n        }\n        var result = 0L\n        for (l <- 0 until k) {\n            if (l == k - i - 1) {\n                result |= (1L << l)\n            } else if (l < k - i - 1) {\n                result |= (1L << l)\n            }\n        }\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                j = i\n            }\n            i += 1\n            n >>= 1\n        }\n        N & ~(1 << j)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n = n >> 1\n        }\n        var m = (1 << i) + (1 << (j - 1)) - 1\n        if (m == N) m = (1 << i) + (1 << (j - 2)) - 1\n        m",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                break\n            }\n        }\n        return N - (1 << i)",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        return N - (1 << count)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var result = 0L\n        for (k <- 0 until i) result = (result << 1) + 1\n        result <<= j\n        result",
    "        var n = N\n        var count = 0\n        while (n != 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        if (count == 1) return N - 1\n        var i = 0\n        while ((N & (1 << i)) == 0) i += 1\n        var j = i + 1\n        while ((N & (1 << j)) != 0) j += 1\n        return N - (1 << i) + (1 << j)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i == 0) return 0\n        var result = 0L\n        for (k <- 0 until i) {\n            result = result * 2 + 1\n        }\n        for (k <- 0 until j - 1) {\n            result = result * 2\n        }\n        return result",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        (N >> count) << count",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var result = N\n        result &= ~((1 << i) - 1)\n        result |= (1 << (i - 1)) - 1\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i > j) return N - (1 << i)\n        else return N - (1 << j)",
    "        var n = N\n        var count = 0\n        while (n % 2 == 0) {\n            n /= 2\n            count += 1\n        }\n        if (count == 0) return N - 1\n        var result = N\n        for (i <- 1 to count) {\n            result /= 2\n            result *= 2\n            result += 1\n        }\n        return result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                i = j\n            }\n            j += 1\n            n >>= 1\n        }\n        return N - (1 << i)",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                if ((n & 2) == 0) {\n                    n = n - 1\n                    return n\n                }\n                else {\n                    n = n + 1\n                    return n\n                }\n            }\n            n = n >> 1\n        }\n        return 0",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1 << (i + j)) - 1",
    "        val n = N.toString\n        val n1 = n.substring(0, n.length - 1) + (n.last.asDigit - 1).toString\n        val n2 = n.substring(0, n.length - 1) + (n.last.asDigit + 1).toString\n        val n1l = n1.toLong\n        val n2l = n2.toLong\n        if (n1l > 0 && abs(n1l - N) < abs(n2l - N)) n1l else n2l",
    "        var n = N\n        var count = 0\n        while (n % 2 == 0) {\n            n /= 2\n            count += 1\n        }\n        if (count == 0) return N - 1\n        var result = N\n        for (i <- 1 to count) {\n            result /= 2\n            result *= 2\n            result += 1\n        }\n        return result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        N - (1 << count)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        var res = N & ((1 << (i + j)) - 1)\n        res |= (1 << (i - 1)) - 1\n        res",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        (1L << (i + j)) - 1",
    "        val n = N.toString\n        val l = n.length\n        val s = n.toCharArray\n        var i = l - 2\n        while (i >= 0 && s(i) >= s(i + 1)) i -= 1\n        if (i < 0) return -1\n        var j = l - 1\n        while (j > i && s(j) <= s(i)) j -= 1\n        val t = s(i)\n        s(i) = s(j)\n        s(j) = t\n        val a = s.slice(0, i + 1)\n        val b = s.slice(i + 1, l).sorted\n        (a ++ b).mkString.toLong",
    "        val s = N.toString\n        val n = s.length\n        var i = n - 1\n        while (i > 0 && s(i) >= s(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (s(j) >= s(i - 1)) j -= 1\n        val sb = new StringBuilder(s)\n        sb(i - 1) = s(j)\n        sb(j) = s(i - 1)\n        val s2 = sb.toString.substring(0, i) + sb.toString.substring(i).sorted\n        s2.toLong",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        if (count == 1) return N - 1\n        var i = 0\n        while (i < 63) {\n            if (((N >> i) & 1) == 1) {\n                var j = i + 1\n                while (j < 63) {\n                    if (((N >> j) & 1) == 0) {\n                        var result = N\n                        result ^= (1L << i)\n                        result ^= (1L << j)\n                        return result\n                    }\n                    j += 1\n                }\n            }\n            i += 1\n        }\n        return N",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                if ((n & 2) == 0) {\n                    return n - 1\n                }\n                else {\n                    return n + 1\n                }\n            }\n            n >>= 1\n        }\n        return 0",
    "        var n = N\n        var bit = 0\n        while (n > 0) {\n            if ((n & 1) == 0) bit += 1\n            n >>= 1\n        }\n        N - (1 << bit)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        val n = N.toBinaryString\n        val n1 = n.substring(0, n.length - 1) + \"1\"\n        val n2 = n.substring(0, n.length - 1) + \"0\"\n        val n1Int = Integer.parseInt(n1, 2)\n        val n2Int = Integer.parseInt(n2, 2)\n        val diff1 = abs(N - n1Int)\n        val diff2 = abs(N - n2Int)\n        if (diff1 < diff2) n1Int else n2Int",
    "        var n = N\n        var i = 0\n        while (n != 0) {\n            if ((n & 1) == 1) {\n                if ((n & 2) == 0) {\n                    return N - (1 << i)\n                }\n            }\n            i += 1\n            n >>= 1\n        }\n        -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        else return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if (n % 10 == 0) {\n                n /= 10\n                i += 1\n            }\n            else {\n                n -= 1\n                i += 1\n            }\n        }\n        N - i",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        if (count == 1) N - 1\n        else {\n            var i = 0\n            while ((N & (1 << i)) == 0) i += 1\n            N ^ (1 << i)\n        }",
    "        def closestNum(N : Long, i : Long) : Long = {\n            if (i == 0) N\n            else if (N % i == 0) i\n            else closestNum(N, i - 1)\n        }\n        closestNum(N, N - 1)",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            }\n            else {\n                n = n >> 1\n                i += 1\n                break\n            }\n        }\n        var result = N - (1 << i)\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        while (n > 0) {\n            if (n % 2 == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n /= 2\n        }\n        if (i == 0) return 0\n        var result = 0L\n        for (k <- 0 until i) {\n            result += pow(2, k).toLong\n        }\n        for (l <- 0 until j) {\n            result += pow(2, i + l).toLong\n        }\n        result",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            }\n            else {\n                n = n >> 1\n                i += 1\n                break\n            }\n        }\n        return N - (1 << i)",
    "        val n = N.toString\n        val l = n.length\n        val s = n.substring(0, l - 1)\n        val last = n.substring(l - 1, l)\n        val lastInt = last.toInt\n        val sInt = s.toInt\n        if (lastInt == 0) {\n            if (sInt == 0) return -1\n            else return sInt - 1\n        }\n        else {\n            val sInt = s.toInt\n            val newLast = lastInt - 1\n            val newLastStr = newLast.toString\n            val newLastStrLen = newLastStr.length\n            val newLastStrLenDiff = l - newLastStrLen - 1\n            val newLastStrLenDiffStr = \"9\" * newLastStrLenDiff\n            val newLastStrLenDiffStrInt = newLastStrLenDiffStr.toInt\n            val newNum = sInt - 1 + newLastStrLenDiffStrInt\n            return newNum\n        }",
    "        var n = N\n        var i = 0\n        var j = 0\n        var result = 0L\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            result = result << 1\n            result += (n & 1)\n            n = n >> 1\n        }\n        result = result >> 1\n        result = result << (i + 1)\n        result += (1L << i) - 1\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        val s = N.toString\n        val l = s.length\n        val mid = l / 2\n        val left = s.substring(0, mid)\n        val right = s.substring(mid, l)\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        val leftNum1 = leftNum - 1\n        val rightNum1 = rightNum - 1\n        val leftNum1Str = leftNum1.toString\n        val rightNum1Str = rightNum1.toString\n        val leftNum1StrLen = leftNum1Str.length\n        val rightNum1StrLen = rightNum1Str.length\n        val leftNum1StrLenDiff = mid - leftNum1StrLen\n        val rightNum1StrLenDiff = mid - rightNum1StrLen\n        val leftNum1StrLenDiffStr = \"9\" * leftNum1StrLenDiff\n        val rightNum1StrLenDiffStr = \"9\" * rightNum1StrLenDiff\n        val leftNum1StrLenDiffStrNum = leftNum1StrLenDiffStr.toLong\n        val rightNum1StrLenDiffStrNum = rightNum1StrLenDiffStr.toLong\n        val leftNum1StrLenDiffStrNum1 = leftNum1StrLenDiffStrNum - 1\n        val rightNum1StrLenDiffStrNum1 = rightNum1StrLenDiffStrNum - 1\n        val leftNum1StrLenDiffStrNum1Str = leftNum1StrLenDiffStrNum1.toString\n        val rightNum1StrLenDiffStrNum1Str = rightNum1StrLenDiffStrNum1.toString\n        val leftNum1StrLenDiffStrNum1StrLen = leftNum1StrLenDiffStrNum1Str.length\n        val rightNum1StrLenDiffStrNum1StrLen = rightNum1StrLenDiffStrNum1Str.length\n        val leftNum1StrLenDiffStrNum1StrLenDiff = leftNum1StrLenDiff - leftNum1StrLenDiffStrNum1StrLen\n        val rightNum1StrLenDiffStrNum1StrLenDiff = rightNum1StrLenDiff - rightNum1StrLenDiffStrNum1StrLen\n        val leftNum1StrLenDiffStrNum1StrLenDiffStr = \"9",
    "        val s = N.toString\n        val n = s.length\n        val m = s.toCharArray\n        var i = n - 1\n        while (i > 0 && m(i) >= m(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (m(j) >= m(i - 1)) j -= 1\n        val tmp = m(i - 1)\n        m(i - 1) = m(j)\n        m(j) = tmp\n        j = n - 1\n        while (i < j) {\n            val tmp = m(i)\n            m(i) = m(j)\n            m(j) = tmp\n            i += 1\n            j -= 1\n        }\n        m.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var res = 0L\n        while (n > 0) {\n            if (n % 2 == 1) {\n                if (i == 0) {\n                    i = 1\n                    j = k\n                } else if (i == 1) {\n                    i = 2\n                    l = k\n                } else {\n                    i = 3\n                    m = k\n                }\n            }\n            k += 1\n            n /= 2\n        }\n        if (i == 0) res = 0\n        else if (i == 1) res = (1L << j) - 1\n        else if (i == 2) res = (1L << j) + (1L << l) - 1\n        else res = (1L << j) + (1L << l) + (1L << m) - 1\n        res",
    "        val n = N.toBinaryString\n        val n1 = n.substring(0, n.length - 1) + \"1\"\n        val n2 = n.substring(0, n.length - 1) + \"0\"\n        val n1b = BigInt(n1, 2)\n        val n2b = BigInt(n2, 2)\n        if (n1b - N < N - n2b) n1b else n2b",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                count += 1\n            }\n            n >>= 1\n        }\n        if (count == 1) return N\n        var i = 0\n        while (i < 63) {\n            if (((N >> i) & 1) == 1) {\n                return N - (1L << i)\n            }\n            i += 1\n        }\n        return 0",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                return N - (1L << i)\n            }\n        }\n        -1",
    "        val s = N.toString\n        val n = s.length\n        val res = new StringBuilder\n        var i = 0\n        while (i < n - 1) {\n            if (s(i) > s(i + 1)) {\n                res.append(s(i) - 1)\n                for (j <- i + 1 until n) res.append('9')\n                return res.toString.toLong\n            }\n            else res.append(s(i))\n            i += 1\n        }\n        res.append(s(n - 1))\n        res.toString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                j = i\n            }\n            i += 1\n            n >>= 1\n        }\n        return N & ~((1 << (j + 1)) - 1)",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if (n % 2 == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n /= 2\n        }\n        if (i > j) {\n            k = j\n            j = i\n            i = k\n        }\n        var m = 0\n        while (j > 0) {\n            m = m * 2 + 1\n            j -= 1\n        }\n        while (i > 0) {\n            m = m * 2\n            i -= 1\n        }\n        m",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        var res = N\n        res &= ~((1 << (i + j)) - 1)\n        res |= (1 << (i + j - 1)) - 1\n        return res",
    "        var n = N\n        var bit = 0\n        while (n > 0) {\n            if ((n & 1) == 0) bit += 1\n            n >>= 1\n        }\n        (N >> bit) << bit",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                j = i\n            } else {\n                k = i\n            }\n            i += 1\n            n >>= 1\n        }\n        return N & ~((1 << (k + 1)) - 1) | (1 << k) | ((1 << (k - 1)) - 1)",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var result = 0L\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                if (i > 0) {\n                    result |= (1 << i)\n                    result |= (1 << (i - 1))\n                    result |= (1 << j)\n                    result |= (1 << k)\n                    return result\n                }\n                else {\n                    j = i\n                    k = i\n                }\n            }\n            else {\n                if (i > 0) k = i\n            }\n            i += 1\n            n >>= 1\n        }\n        0",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i = k\n            } else {\n                j = k\n            }\n            n >>= 1\n            k += 1\n        }\n        var result = N\n        result &= ~(1 << j)\n        result |= (1 << i)\n        result",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i - 1) <= a(i)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val temp = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = temp\n        j = n - 1\n        while (i < j) {\n            val temp = a(i)\n            a(i) = a(j)\n            a(j) = temp\n            i += 1\n            j -= 1\n        }\n        return a.mkString.toLong",
    "        val s = N.toString\n        val l = s.length\n        val a = s.toCharArray\n        var i = l - 1\n        while (i > 0) {\n            if (a(i) < a(i - 1)) {\n                val t = a(i)\n                a(i) = a(i - 1)\n                a(i - 1) = t\n                return a.mkString.toLong\n            }\n            i -= 1\n        }\n        return -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var count = 0\n        while (n % 2 == 0) {\n            n /= 2\n            count += 1\n        }\n        if (count == 0) return N - 1\n        else if (count == 1) return N / 2\n        else {\n            var m = n\n            var count2 = 0\n            while (m % 2 == 0) {\n                m /= 2\n                count2 += 1\n            }\n            if (count2 == 1) return N - pow(2, count).toLong\n            else return N - pow(2, count - 1).toLong\n        }",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var count = 0\n        while (n % 2 == 0) {\n            n /= 2\n            count += 1\n        }\n        if (count == 0) {\n            return N - 1\n        }\n        var result = N\n        for (i <- 0 to count) {\n            result -= pow(2, i).toLong\n        }\n        return result",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i) >= a(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val t = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = t\n        j = n - 1\n        while (i < j) {\n            val t = a(i)\n            a(i) = a(j)\n            a(j) = t\n            i += 1\n            j -= 1\n        }\n        return a.mkString.toLong",
    "        val binary = N.toBinaryString\n        val index = binary.indexOf('1', 1)\n        val prefix = binary.substring(0, index)\n        val suffix = binary.substring(index)\n        val newSuffix = suffix.replaceFirst(\"1\", \"0\")\n        val newBinary = prefix + newSuffix\n        val newNum = BigInt(newBinary, 2)\n        newNum.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return (1 << (i + j)) - 1",
    "        val s = N.toString\n        val n = s.length\n        val l = s.last\n        if (l == '0') {\n            val m = s.substring(0, n - 1)\n            m.toLong\n        } else {\n            val m = s.substring(0, n - 1) + (l.asDigit - 1).toString\n            m.toLong\n        }",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        if (i == 0) return -1\n        var m = 1L\n        for (k <- 0 until i + j - 1) {\n            m <<= 1\n        }\n        m |= 1\n        for (k <- 0 until j - 1) {\n            m <<= 1\n            m |= 1\n        }\n        m",
    "        val digits = N.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val (left, right) = digits.partition(x => x < sorted.head)\n        val (left1, right1) = right.partition(x => x < sorted.tail.head)\n        val (left2, right2) = right1.partition(x => x < sorted.tail.tail.head)\n        val (left3, right3) = right2.partition(x => x < sorted.tail.tail.tail.head)\n        val (left4, right4) = right3.partition(x => x < sorted.tail.tail.tail.tail.head)\n        val (left5, right5) = right4.partition(x => x < sorted.tail.tail.tail.tail.tail.head)\n        val (left6, right6) = right5.partition(x => x < sorted.tail.tail.tail.tail.tail.tail.head)\n        val (left7, right7) = right6.partition(x => x < sorted.tail.tail.tail.tail.tail.tail.tail.head)\n        val (left8, right8) = right7.partition(x => x < sorted.tail.tail.tail.tail.tail.tail.tail.tail.head)\n        val (left9, right9) = right8.partition(x => x < sorted.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n        val (left10, right10) = right9.partition(x => x < sorted.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n        val (left11, right11) = right10.partition(x => x < sorted.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n        val (left12, right12) = right11.partition(x => x < sorted.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n        val (left13",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if (n % 10 == 0) count += 1\n            n /= 10\n        }\n        N - count",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                i += 1\n                break\n            }\n        }\n        return N - (1 << i)",
    "        val s = N.toString\n        val n = s.length\n        val m = s.toCharArray\n        var i = n - 1\n        while (i > 0 && m(i) >= m(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (m(j) >= m(i - 1)) j -= 1\n        val t = m(i - 1)\n        m(i - 1) = m(j)\n        m(j) = t\n        j = n - 1\n        while (i < j) {\n            val t = m(i)\n            m(i) = m(j)\n            m(j) = t\n            i += 1\n            j -= 1\n        }\n        return m.mkString.toLong",
    "        val s = N.toString\n        val n = s.length\n        val m = (0 until n).map(i => s(i) - '0').toArray\n        var i = n - 1\n        while (i > 0 && m(i) >= m(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (m(j) >= m(i - 1)) j -= 1\n        val temp = m(i - 1)\n        m(i - 1) = m(j)\n        m(j) = temp\n        j = n - 1\n        while (i < j) {\n            val temp = m(i)\n            m(i) = m(j)\n            m(j) = temp\n            i += 1\n            j -= 1\n        }\n        m.mkString.toLong",
    "        val s = N.toString\n        val l = s.length\n        var i = l - 1\n        while (i >= 0 && s(i) == '0') i -= 1\n        if (i == -1) return -1\n        val sb = new StringBuilder\n        sb.append(s.substring(0, i))\n        sb.append(s(i) - 1)\n        for (j <- i + 1 until l) sb.append('9')\n        sb.toString.toLong",
    "        val s = N.toString\n        val l = s.length\n        val d = s(l - 1).toString.toInt\n        if (d == 0) {\n            return N - 1\n        }\n        val d1 = s(l - 2).toString.toInt\n        if (d1 == 0) {\n            return N - d\n        }\n        val d2 = s(l - 3).toString.toInt\n        if (d2 == 0) {\n            return N - d - d1\n        }\n        val d3 = s(l - 4).toString.toInt\n        if (d3 == 0) {\n            return N - d - d1 - d2\n        }\n        val d4 = s(l - 5).toString.toInt\n        if (d4 == 0) {\n            return N - d - d1 - d2 - d3\n        }\n        val d5 = s(l - 6).toString.toInt\n        if (d5 == 0) {\n            return N - d - d1 - d2 - d3 - d4\n        }\n        val d6 = s(l - 7).toString.toInt\n        if (d6 == 0) {\n            return N - d - d1 - d2 - d3 - d4 - d5\n        }\n        val d7 = s(l - 8).toString.toInt\n        if (d7 == 0) {\n            return N - d - d1 - d2 - d3 - d4 - d5 - d6\n        }\n        val d8 = s(l - 9).toString.toInt\n        if (d8 == 0) {\n            return N - d - d1 - d2 - d3 - d4 - d5 - d6 - d7\n        }\n        val d9 = s(l - 10).toString.toInt\n        if (d9 == 0) {\n            return N - d - d1 - d2 - d3 - d4 - d5 - d6 - d7 - d8\n        }\n        val d10 = s(l - 11).toString.toInt\n        if (d10 == 0) {\n           ",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var k = i + j\n        var res = 0L\n        while (k > 0) {\n            if (j > 0) {\n                res |= 1 << (k - 1)\n                j -= 1\n            }\n            k -= 1\n        }\n        res",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                count += 1\n            }\n            n >>= 1\n        }\n        if (count == 1) {\n            return N\n        }\n        var m = N\n        while (m > 0) {\n            if ((m & 1) == 1) {\n                m >>= 1\n                break\n            }\n            m >>= 1\n        }\n        var result = N\n        while (m > 0) {\n            if ((m & 1) == 1) {\n                result -= 1\n            }\n            result >>= 1\n            m >>= 1\n        }\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n                j = 0\n            } else {\n                j += 1\n                i = 0\n            }\n            if (i >= 3) {\n                k = 1\n                l = 0\n            } else if (j >= 3) {\n                l = 1\n                k = 0\n            }\n            if (k == 1) {\n                n = n & ~(1 << (i + j - 3))\n                n = n | (1 << (i + j - 2))\n                n = n | (1 << (i + j - 1))\n                n = n | (1 << (i + j))\n                return n\n            } else if (l == 1) {\n                n = n & ~(1 << (i + j - 3))\n                n = n | (1 << (i + j - 2))\n                n = n | (1 << (i + j - 1))\n                return n\n            }\n            n = n >> 1\n        }\n        return -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        if (j == 0) return 0\n        val x = pow(2, i + j).toLong\n        val y = pow(2, i + j - 1).toLong\n        if (N - y < x - N) y else x",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n -= 1\n                n |= (1 << i)\n                return n\n            }\n            n >>= 1\n            i += 1\n        }\n        return -1",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i - 1) <= a(i)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val temp = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = temp\n        j = n - 1\n        while (i < j) {\n            val temp = a(i)\n            a(i) = a(j)\n            a(j) = temp\n            i += 1\n            j -= 1\n        }\n        return a.mkString.toLong",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                if ((n & 2) == 0) {\n                    return N - (1 << i)\n                }\n            }\n            i += 1\n            n >>= 1\n        }\n        -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        var k = 0\n        while (k < i) {\n            N += pow(2, k).toLong\n            k += 1\n        }\n        k = 1\n        while (k <= j) {\n            N -= pow(2, k).toLong\n            k += 1\n        }\n        N",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var k = i + j\n        var res = 0L\n        while (k > 0) {\n            res = (res << 1) + 1\n            k -= 1\n        }\n        res <<= i\n        res",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var result = N\n        result &= ~((1 << i) - 1)\n        result |= (1 << (i - 1)) - 1\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        var res = 0L\n        for (k <- 0 until i) res = (res << 1) + 1\n        res <<= j\n        res",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1 << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i > j) {\n            var k = 0\n            var m = N\n            while (m > 0) {\n                if (m % 2 == 0) {\n                    k += 1\n                    if (k == i) return N - pow(2, i).toLong\n                }\n                m /= 2\n            }\n        }\n        else {\n            var k = 0\n            var m = N\n            while (m > 0) {\n                if (m % 2 == 1) {\n                    k += 1\n                    if (k == j) return N + pow(2, j - 1).toLong\n                }\n                m /= 2\n            }\n        }\n        return -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        var k = 0\n        while (k < i) {\n            N += pow(2, k).toLong\n            k += 1\n        }\n        while (k < j) {\n            N -= pow(2, k).toLong\n            k += 1\n        }\n        N",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            }\n            n >>= 1\n        }\n        return N & ((1 << i) - 1)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n /= 2\n        }\n        return pow(2, i + j - 1).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return 0\n        else return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        val n = N.toString\n        val nl = n.length\n        val nl2 = nl / 2\n        val nl3 = nl - nl2\n        val n1 = n.substring(0, nl2)\n        val n2 = n.substring(nl2, nl)\n        val n1i = n1.toInt\n        val n2i = n2.toInt\n        if (n1i == 0) return -1\n        if (n2i == 0) return n1i * pow(10, nl2).toLong - 1\n        val n1i2 = n1i - 1\n        val n2i2 = pow(10, nl3).toInt - 1\n        val n1s = n1i2.toString\n        val n2s = n2i2.toString\n        val n1s2 = n1s.reverse\n        val n2s2 = n2s.reverse\n        val n1s3 = n1s2 + n2s2\n        n1s3.toLong",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        N - (1 << count)",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i - 1) <= a(i)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val t = a(j)\n        a(j) = a(i - 1)\n        a(i - 1) = t\n        j = n - 1\n        while (i < j) {\n            val t = a(i)\n            a(i) = a(j)\n            a(j) = t\n            i += 1\n            j -= 1\n        }\n        a.mkString.toLong",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if (n % 2 == 0) {\n                i += 1\n                n /= 2\n            } else {\n                n -= 1\n                break\n            }\n        }\n        return pow(2, i).toLong",
    "        val s = N.toString\n        val l = s.length\n        val m = s.toList.map(_.toString.toInt).toArray\n        var i = l - 1\n        while (i > 0 && m(i) >= m(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = l - 1\n        while (m(j) >= m(i - 1)) j -= 1\n        val t = m(i - 1)\n        m(i - 1) = m(j)\n        m(j) = t\n        val r = m.slice(0, i).mkString(\"\").toLong\n        val q = m.slice(i, l).sorted.mkString(\"\").toLong\n        r * pow(10, l - i).toLong + q",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                count += 1\n            }\n            n >>= 1\n        }\n        if (count == 1) {\n            return N - 1\n        }\n        var i = 0\n        while (i < 63) {\n            if (((N >> i) & 1) == 1) {\n                break\n            }\n            i += 1\n        }\n        var j = i + 1\n        while (j < 63) {\n            if (((N >> j) & 1) == 0) {\n                break\n            }\n            j += 1\n        }\n        var result = N\n        result &= ~(1L << i)\n        result |= (1L << j)\n        result",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n -= 1\n                n |= (1 << i)\n                return n\n            }\n            n >>= 1\n            i += 1\n        }\n        -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var k = i + j\n        var m = 1L << k\n        m -= 1\n        m ^ ((1L << j) - 1)",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i) >= a(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val t = a(j)\n        a(j) = a(i - 1)\n        a(i - 1) = t\n        j = n - 1\n        while (i < j) {\n            val t = a(i)\n            a(i) = a(j)\n            a(j) = t\n            i += 1\n            j -= 1\n        }\n        a.mkString.toLong",
    "        val n = N.toBinaryString\n        val n1 = n.substring(0, n.length - 1)\n        val n2 = n.substring(0, n.length - 2) + \"1\"\n        val n3 = n.substring(0, n.length - 2) + \"0\"\n        val n4 = n.substring(0, n.length - 2) + \"1\" + \"0\" * (n.length - n4.length)\n        val n5 = n.substring(0, n.length - 2) + \"0\" + \"1\" * (n.length - n5.length)\n        val n6 = n.substring(0, n.length - 2) + \"1\" + \"1\" * (n.length - n6.length)\n        val n7 = n.substring(0, n.length - 2) + \"0\" + \"0\" * (n.length - n7.length)\n        val n8 = n.substring(0, n.length - 2) + \"1\" + \"0\" * (n.length - n8.length)\n        val n9 = n.substring(0, n.length - 2) + \"0\" + \"1\" * (n.length - n9.length)\n        val n10 = n.substring(0, n.length - 2) + \"1\" + \"1\" * (n.length - n10.length)\n        val n11 = n.substring(0, n.length - 2) + \"0\" + \"0\" * (n.length - n11.length)\n        val n12 = n.substring(0, n.length - 2) + \"1\" + \"0\" * (n.length - n12.length)\n        val n13 = n.substring(0, n.length - 2) + \"0\" + \"1\" * (n.length - n13.length)\n        val n14 = n.substring(0, n.length - 2) + \"1\" + \"1\" * (n.length - n14.length)\n        val n15 = n.substring(0, n.length - 2",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        var k = i + j\n        var result = 0L\n        while (k > 0) {\n            if (k == i + 1) {\n                result = (result << 1) | 1\n            } else {\n                result = (result << 1) | 0\n            }\n            k -= 1\n        }\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        var res = 0L\n        for (k <- 0 until i) res = (res << 1) | 1\n        for (k <- 0 until j - 1) res = (res << 1) | 0\n        res",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return ((1L << i) + (1L << (j - 1)) - 1)",
    "        var n = N\n        var i = 0\n        var j = 0\n        var result = 0L\n        var found = false\n        while (n != 0) {\n            if (n % 2 == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n /= 2\n        }\n        if (i == 0) return 0\n        n = N\n        while (n != 0) {\n            if (n % 2 == 0) {\n                result = result * 2 + 1\n                i -= 1\n            } else {\n                result = result * 2\n                j -= 1\n            }\n            if (i == 0 && j == 1) {\n                found = true\n                break\n            }\n            n /= 2\n        }\n        if (found) result\n        else 0",
    "        var n = N\n        var count = 0\n        while (n != 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        if (count == 1) return N - 1\n        var i = 0\n        while (i < 63) {\n            if (((N >> i) & 1) == 1) {\n                var j = i + 1\n                while (j < 63) {\n                    if (((N >> j) & 1) == 0) {\n                        var result = N\n                        result -= (1L << i)\n                        result += (1L << j)\n                        return result\n                    }\n                    j += 1\n                }\n            }\n            i += 1\n        }\n        return -1",
    "        val s = N.toString\n        val n = s.length\n        val l = s.last.toString.toInt\n        if (l == 0) return N - 1\n        if (l == 1) {\n            if (n == 1) return 0\n            else {\n                val s2 = s.substring(0, n - 1)\n                return s2.toLong * pow(10, n - 1).toLong + 9\n            }\n        }\n        val s2 = s.substring(0, n - 1)\n        val s3 = (s2.toLong * pow(10, n - 1).toLong + (l - 1)).toString\n        return s3.toLong",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        return N - (1 << count)",
    "        val s = N.toString\n        val l = s.length\n        val a = s.toCharArray\n        var i = l - 2\n        while (i >= 0 && a(i) >= a(i + 1)) i -= 1\n        if (i < 0) return -1\n        var j = l - 1\n        while (a(j) <= a(i)) j -= 1\n        val t = a(i)\n        a(i) = a(j)\n        a(j) = t\n        val b = a.slice(i + 1, l).sorted\n        val c = a.slice(0, i + 1) ++ b\n        c.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (j == 0) return 0\n        val k = pow(2, i + j - 1).toLong\n        return k + (k - 1)",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            n >>= 1\n        }\n        N - (1 << i)",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if (n % 10 == 0) i += 1\n            n /= 10\n        }\n        N - i",
    "        val n = N.toString\n        val l = n.length\n        val a = n.toCharArray\n        var i = l - 1\n        while (i > 0 && a(i) >= a(i - 1)) i -= 1\n        if (i == 0) return N - 1\n        var j = l - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val t = a(j)\n        a(j) = a(i - 1)\n        a(i - 1) = t\n        val b = a.slice(i, l).sorted\n        val c = a.slice(0, i) ++ b\n        c.mkString.toLong",
    "        val n = N.toString\n        val l = n.length\n        val s = n.toCharArray\n        var i = l - 1\n        while (i > 0 && s(i) <= s(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = l - 1\n        while (s(j) >= s(i - 1)) j -= 1\n        val t = s(i - 1)\n        s(i - 1) = s(j)\n        s(j) = t\n        j = l - 1\n        while (i < j) {\n            val t = s(i)\n            s(i) = s(j)\n            s(j) = t\n            i += 1\n            j -= 1\n        }\n        s.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i = k\n            } else {\n                j = k\n            }\n            n >>= 1\n            k += 1\n        }\n        var result = N\n        result &= ~(1 << i)\n        result |= (1 << j)\n        result",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                count += 1\n            }\n            n = n >> 1\n        }\n        if (count == 1) return N\n        var result = 0L\n        var i = 0\n        while (i < 64) {\n            if ((N & (1L << i)) != 0) {\n                result |= (1L << i)\n                count -= 1\n            }\n            if (count == 1) return result\n            i += 1\n        }\n        return -1",
    "        val s = N.toString\n        val n = s.length\n        val m = s.toList.map(x => x.toString.toInt)\n        val p = m.zipWithIndex.filter(x => x._1 > m(x._2 + 1))\n        if (p.length == 0) return -1\n        val k = p.maxBy(x => x._1)._2\n        val l = m.slice(k + 1, n).min\n        val t = m.slice(0, k) :+ l\n        val u = m.slice(k + 1, n).filter(x => x != l)\n        val v = t ++ u.sorted\n        v.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (pow(2, i + 1).toLong - 1) << (j - 1)",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if (n % 10 == 0) count += 1\n            n /= 10\n        }\n        N - count",
    "        var n = N\n        var count = 0\n        while (n != 0) {\n            if ((n & 1) == 0) {\n                count += 1\n            }\n            n = n >> 1\n        }\n        return N - pow(2, count).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                j = i\n            }\n            i += 1\n            n >>= 1\n        }\n        return N & ((1 << j) - 1)",
    "        val n = N.toString\n        val n_len = n.length\n        val n_arr = n.toCharArray\n        var i = n_len - 1\n        while (i > 0 && n_arr(i) <= n_arr(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n_len - 1\n        while (n_arr(j) >= n_arr(i - 1)) j -= 1\n        val temp = n_arr(i - 1)\n        n_arr(i - 1) = n_arr(j)\n        n_arr(j) = temp\n        j = n_len - 1\n        while (i < j) {\n            val temp = n_arr(i)\n            n_arr(i) = n_arr(j)\n            n_arr(j) = temp\n            i += 1\n            j -= 1\n        }\n        n_arr.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        while (n != 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        if (i == 0) {\n            return 0\n        }\n        n = N\n        while (n != 0) {\n            if ((n & 1) == 0) {\n                k += 1\n            } else {\n                l += 1\n            }\n            if (k == i - 1 && l == j) {\n                m = 1\n            }\n            if (m == 1) {\n                if ((n & 1) == 0) {\n                    return n\n                }\n            }\n            n >>= 1\n        }\n        return 0",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        if (count == 1) return N - 1\n        var i = 0\n        while (i < 63) {\n            if (((N >> i) & 1) == 1) {\n                var j = i + 1\n                while (j < 63 && ((N >> j) & 1) == 1) j += 1\n                return N - (1L << i) + (1L << (j - 1))\n            }\n            i += 1\n        }\n        return 0",
    "        val s = N.toString\n        var i = s.length - 1\n        while (i > 0 && s(i) >= s(i - 1)) i -= 1\n        if (i == 0) return -1\n        val j = s.length - 1\n        while (s(j) >= s(i - 1)) j -= 1\n        val sb = new StringBuilder\n        sb.append(s.substring(0, i - 1))\n        sb.append(s(j))\n        sb.append(s.substring(i, j))\n        sb.append(s(i - 1))\n        sb.append(s.substring(j + 1))\n        sb.toString.toLong",
    "        val s = N.toString\n        val l = s.length\n        val c = s(l - 1)\n        if (c == '0') return N - 1\n        var i = l - 2\n        while (i >= 0 && s(i) == c) i -= 1\n        if (i == -1) return N - 1\n        val sb = new StringBuilder\n        for (j <- 0 to i) sb.append(s(j))\n        sb.append(c)\n        for (j <- i + 1 until l) sb.append('9')\n        sb.toString.toLong",
    "        val s = N.toString\n        val n = s.length\n        val l = s.substring(0, n - 1).toLong\n        val r = s.substring(n - 1, n).toLong\n        if (r == 0) l - 1\n        else if (r == 1) l\n        else l + 1",
    "        val s = N.toString\n        val len = s.length\n        val last = s.last\n        if (last == '0') {\n            val res = s.substring(0, len - 1) + \"9\"\n            return res.toLong\n        }\n        val res = s.substring(0, len - 1) + (last.toInt - 1).toString\n        return res.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var m = 1L << i\n        m |= (1L << (i - 1)) - 1\n        m",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            n >>= 1\n        }\n        N - (1 << i)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i > j) {\n            var k = 0\n            while (k < i) {\n                N += pow(2, k).toLong\n                k += 1\n            }\n            return N\n        }\n        else {\n            var k = 0\n            while (k < j) {\n                N -= pow(2, k).toLong\n                k += 1\n            }\n            return N\n        }",
    "        val digits = N.toString.toList.map(_.asDigit)\n        val len = digits.length\n        var i = len - 1\n        while (i > 0) {\n            if (digits(i) > digits(i - 1)) {\n                val min = digits.slice(i, len).min\n                val minIndex = digits.slice(i, len).indexOf(min) + i\n                val temp = digits(i - 1)\n                digits(i - 1) = digits(minIndex)\n                digits(minIndex) = temp\n                val result = digits.slice(0, i) ++ digits.slice(i, len).sorted\n                return result.mkString.toLong\n            }\n            i -= 1\n        }\n        -1",
    "        var n = N\n        var count = 0\n        while (n != 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        if (count == 1) return N\n        var m = N\n        var i = 0\n        while (m != 0) {\n            if ((m & 1) == 1) {\n                m >>= 1\n                i += 1\n            } else {\n                m >>= 1\n                i += 1\n            }\n        }\n        return N - (1 << i)",
    "        val s = N.toString\n        val l = s.length\n        val d = s.last.toString.toInt\n        if (d == 0) return N - 1\n        if (d == 1) {\n            val i = s.indexOf(\"1\")\n            if (i == 0) return N - 1\n            else {\n                val (a, b) = s.splitAt(i)\n                return (a + \"9\" * (l - i - 1)).toLong\n            }\n        }\n        val (a, b) = s.splitAt(l - 1)\n        return (a + (d - 1).toString).toLong",
    "        var n = N\n        var i = 0\n        while (n != 0) {\n            if ((n & 1) == 1) {\n                if ((n & 2) == 0) {\n                    return n - 1\n                }\n                else {\n                    n += 1\n                    i += 1\n                }\n            }\n            n >>= 1\n        }\n        return N - pow(2, i).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        val m = (1 << (i + j)) - 1\n        val k = (1 << (i - 1)) - 1\n        m - k",
    "        val s = N.toString\n        val l = s.length\n        val d = s(l - 1).toString.toInt\n        if (d == 0) {\n            val r = s.substring(0, l - 1)\n            return r.toLong\n        }\n        val r = s.substring(0, l - 1) + (d - 1).toString\n        return r.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                i = j\n            }\n            j += 1\n            n >>= 1\n        }\n        N & ~(1 << i)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i == 0) return -1\n        return pow(2, i + j).toLong - 1",
    "        var n = N\n        var a = 0\n        var b = 0\n        while (n > 0) {\n            if (n % 2 == 0) a += 1\n            else b += 1\n            n /= 2\n        }\n        return pow(2, a).toLong + pow(2, b - 1).toLong - 1",
    "        val s = N.toString\n        val n = s.length\n        val p = pow(10, n - 1).toLong\n        val d = s(0).toString.toInt\n        if (d == 1) {\n            val m = s.substring(1).toInt\n            val t = m + 1\n            val tt = t.toString\n            val ttt = \"1\" + \"0\" * (n - tt.length - 1) + tt\n            ttt.toLong\n        } else {\n            val t = (d - 1).toString\n            val tt = \"1\" + \"0\" * (n - t.length - 1) + t\n            tt.toLong\n        }"
  ]
}