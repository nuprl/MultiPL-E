{
  "name": "mbpp_222_check_type",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    def checkType(test_tuple : Any) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkType((Any((5l, 6l, 7l, 3l, 5l, 6l)))) == (true));\n    assert(checkType((Any((1l, 2l, \"4\")))) == (false));\n    assert(checkType((Any((3l, 2l, 1l, 4l, 5l)))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_length) {\n            if (tuple_type_list(0) != tuple_type_list(i)) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : Int, y : Int, z : String) => false\n            case (x : Int, y : String, z : Int) => false\n            case (x : Int, y : String, z : String) => false\n            case (x : String, y : Int, z : Int) => false\n            case (x : String, y : Int, z : String) => false\n            case (x : String, y : String, z : Int) => false\n            case (x : String, y : String, z : String) => true\n        }",
    "        test_tuple match {\n            case (t1, t2) => t1.getClass == t2.getClass\n            case (t1, t2, t3) => t1.getClass == t2.getClass && t1.getClass == t3.getClass\n            case (t1, t2, t3, t4) => t1.getClass == t2.getClass && t1.getClass == t3.getClass && t1.getClass == t4.getClass\n            case (t1, t2, t3, t4, t5) => t1.getClass == t2.getClass && t1.getClass == t3.getClass && t1.getClass == t4.getClass && t1.getClass == t5.getClass\n            case (t1, t2, t3, t4, t5, t6) => t1.getClass == t2.getClass && t1.getClass == t3.getClass && t1.getClass == t4.getClass && t1.getClass == t5.getClass && t1.getClass == t6.getClass\n            case (t1, t2, t3, t4, t5, t6, t7) => t1.getClass == t2.getClass && t1.getClass == t3.getClass && t1.getClass == t4.getClass && t1.getClass == t5.getClass && t1.getClass == t6.getClass && t1.getClass == t7.getClass\n            case (t1, t2, t3, t4, t5, t6, t7, t8) => t1.getClass == t2.getClass && t1.getClass == t3.getClass && t1.getClass == t4.getClass && t1.getClass == t5.getClass && t1.getClass == t6.getClass && t1.getClass == t7.getClass && t1.getClass == t8.getClass\n            case (t1, t2, t3, t4, t5, t6, t7, t8, t9) => t1.",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- test_tuple.productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        for (i <- type_list) {\n            if (i != type_list(0)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_last_list_length - 1) {\n            if (tuple_type_list_last_last_list(i) != tuple_type_list_last_last_list(i + 1)) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        var flag = true\n        var type_of_first = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 to tuple_type_list_length - 1) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        test_tuple_type match {\n            case \"scala.Tuple1\" => true\n            case \"scala.Tuple2\" => {\n                val tuple = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n                val first_type = tuple._1.getClass.getName\n                val second_type = tuple._2.getClass.getName\n                if (first_type == second_type) true else false\n            }\n            case \"scala.Tuple3\" => {\n                val tuple = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n                val first_type = tuple._1.getClass.getName\n                val second_type = tuple._2.getClass.getName\n                val third_type = tuple._3.getClass.getName\n                if (first_type == second_type && first_type == third_type) true else false\n            }\n            case \"scala.Tuple4\" => {\n                val tuple = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val first_type = tuple._1.getClass.getName\n                val second_type = tuple._2.getClass.getName\n                val third_type = tuple._3.getClass.getName\n                val fourth_type = tuple._4.getClass.getName\n                if (first_type == second_type && first_type == third_type && first_type == fourth_type) true else false\n            }\n            case \"scala.Tuple5\" => {\n                val tuple = test_tuple.asInstanceOf[Tuple5[Any, Any, Any, Any, Any]]\n                val first_type = tuple._1.getClass.getName\n                val second_type = tuple._2.getClass.getName\n                val third_type = tuple._3.getClass.getName\n                val fourth_type = tuple._4.getClass.getName\n                val fifth_type = tuple._5.getClass.getName\n                if (first_type == second_type && first_type",
    "        val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val type_list = tuple_list.map(x => x.getClass.getSimpleName)\n        val type_set = type_list.toSet\n        if (type_set.size == 1) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        val test_tuple_type = test_tuple.getClass.getName\n        test_tuple_type match {\n            case \"scala.Tuple2\" => {\n                val first_element = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n                val second_element = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n                val first_element_type = first_element._1.getClass.getName\n                val second_element_type = second_element._2.getClass.getName\n                if (first_element_type == second_element_type) {\n                    true\n                } else {\n                    false\n                }\n            }\n            case \"scala.Tuple3\" => {\n                val first_element = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n                val second_element = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n                val third_element = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n                val first_element_type = first_element._1.getClass.getName\n                val second_element_type = second_element._2.getClass.getName\n                val third_element_type = third_element._3.getClass.getName\n                if (first_element_type == second_element_type && second_element_type == third_element_type) {\n                    true\n                } else {\n                    false\n                }\n            }\n            case \"scala.Tuple4\" => {\n                val first_element = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val second_element = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val third_element = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val fourth_element = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val first_element_type = first_element._1.getClass.getName\n                val second_",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass.getName)\n        if (test_tuple_list_type.distinct.length == 1) true else false",
    "        val tuple_type = test_tuple.getClass.getName\n        tuple_type match {\n            case \"scala.Tuple2\" => {\n                val test_tuple_1 = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n                val test_tuple_2 = (test_tuple_1._1, test_tuple_1._2)\n                val test_tuple_3 = (test_tuple_1._1.getClass.getName, test_tuple_1._2.getClass.getName)\n                if (test_tuple_3._1 == test_tuple_3._2) true else false\n            }\n            case \"scala.Tuple3\" => {\n                val test_tuple_1 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n                val test_tuple_2 = (test_tuple_1._1, test_tuple_1._2, test_tuple_1._3)\n                val test_tuple_3 = (test_tuple_1._1.getClass.getName, test_tuple_1._2.getClass.getName, test_tuple_1._3.getClass.getName)\n                if (test_tuple_3._1 == test_tuple_3._2 && test_tuple_3._2 == test_tuple_3._3) true else false\n            }\n            case \"scala.Tuple4\" => {\n                val test_tuple_1 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val test_tuple_2 = (test_tuple_1._1, test_tuple_1._2, test_tuple_1._3, test_tuple_1._4)\n                val test_tuple_3 = (test_tuple_1._1.getClass.getName, test_tuple_1._2.getClass.getName, test_tuple_1._3.getClass.getName, test_tuple_1._4.getClass.getName)\n                if (test_",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 to tuple_type_list_length - 1) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        if (tuple_type_list_length == 1) {\n            return true\n        }\n        else {\n            val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n            val tuple_type_list_last_length = tuple_type_list_last.length\n            val tuple_type_list_last_new = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n            val tuple_type_list_last_new_length = tuple_type_list_last_new.length\n            val tuple_type_list_last_new_new = tuple_type_list_last_new.substring(0, tuple_type_list_last_new_length - 1)\n            if (tuple_type_list_last_new_new == \"java.lang.Integer\") {\n                return true\n            }\n            else {\n                return false\n            }\n        }",
    "        val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val type_list = tuple_list.map(x => x.getClass)\n        val type_set = type_list.toSet\n        if (type_set.size == 1) true else false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val t = test_tuple.asInstanceOf[Product]\n        val len = t.productArity\n        var flag = true\n        for (i <- 0 until len) {\n            if (t.productElement(i).getClass != t.productElement(0).getClass) {\n                flag = false\n            }\n        }\n        flag",
    "        test_tuple match {\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case _ => false\n        }"
  ]
}