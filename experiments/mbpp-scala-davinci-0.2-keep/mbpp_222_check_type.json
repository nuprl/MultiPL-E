{
  "name": "mbpp_222_check_type",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    def checkType(test_tuple : Any) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkType((Any((5l, 6l, 7l, 3l, 5l, 6l)))) == (true));\n    assert(checkType((Any((1l, 2l, \"4\")))) == (false));\n    assert(checkType((Any((3l, 2l, 1l, 4l, 5l)))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_length) {\n            if (tuple_type_list(0) != tuple_type_list(i)) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : Int, y : Int, z : String) => false\n            case (x : Int, y : String, z : Int) => false\n            case (x : Int, y : String, z : String) => false\n            case (x : String, y : Int, z : Int) => false\n            case (x : String, y : Int, z : String) => false\n            case (x : String, y : String, z : Int) => false\n            case (x : String, y : String, z : String) => true\n        }",
    "        test_tuple match {\n            case (t1, t2) => t1.getClass == t2.getClass\n            case (t1, t2, t3) => t1.getClass == t2.getClass && t1.getClass == t3.getClass\n            case (t1, t2, t3, t4) => t1.getClass == t2.getClass && t1.getClass == t3.getClass && t1.getClass == t4.getClass\n            case (t1, t2, t3, t4, t5) => t1.getClass == t2.getClass && t1.getClass == t3.getClass && t1.getClass == t4.getClass && t1.getClass == t5.getClass\n            case (t1, t2, t3, t4, t5, t6) => t1.getClass == t2.getClass && t1.getClass == t3.getClass && t1.getClass == t4.getClass && t1.getClass == t5.getClass && t1.getClass == t6.getClass\n            case (t1, t2, t3, t4, t5, t6, t7) => t1.getClass == t2.getClass && t1.getClass == t3.getClass && t1.getClass == t4.getClass && t1.getClass == t5.getClass && t1.getClass == t6.getClass && t1.getClass == t7.getClass\n            case (t1, t2, t3, t4, t5, t6, t7, t8) => t1.getClass == t2.getClass && t1.getClass == t3.getClass && t1.getClass == t4.getClass && t1.getClass == t5.getClass && t1.getClass == t6.getClass && t1.getClass == t7.getClass && t1.getClass == t8.getClass\n            case (t1, t2, t3, t4, t5, t6, t7, t8, t9) => t1.",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- test_tuple.productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        for (i <- type_list) {\n            if (i != type_list(0)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_last_list_length - 1) {\n            if (tuple_type_list_last_last_list(i) != tuple_type_list_last_last_list(i + 1)) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        var flag = true\n        var type_of_first = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 to tuple_type_list_length - 1) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        test_tuple_type match {\n            case \"scala.Tuple1\" => true\n            case \"scala.Tuple2\" => {\n                val tuple = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n                val first_type = tuple._1.getClass.getName\n                val second_type = tuple._2.getClass.getName\n                if (first_type == second_type) true else false\n            }\n            case \"scala.Tuple3\" => {\n                val tuple = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n                val first_type = tuple._1.getClass.getName\n                val second_type = tuple._2.getClass.getName\n                val third_type = tuple._3.getClass.getName\n                if (first_type == second_type && first_type == third_type) true else false\n            }\n            case \"scala.Tuple4\" => {\n                val tuple = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val first_type = tuple._1.getClass.getName\n                val second_type = tuple._2.getClass.getName\n                val third_type = tuple._3.getClass.getName\n                val fourth_type = tuple._4.getClass.getName\n                if (first_type == second_type && first_type == third_type && first_type == fourth_type) true else false\n            }\n            case \"scala.Tuple5\" => {\n                val tuple = test_tuple.asInstanceOf[Tuple5[Any, Any, Any, Any, Any]]\n                val first_type = tuple._1.getClass.getName\n                val second_type = tuple._2.getClass.getName\n                val third_type = tuple._3.getClass.getName\n                val fourth_type = tuple._4.getClass.getName\n                val fifth_type = tuple._5.getClass.getName\n                if (first_type == second_type && first_type",
    "        val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val type_list = tuple_list.map(x => x.getClass.getSimpleName)\n        val type_set = type_list.toSet\n        if (type_set.size == 1) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        val test_tuple_type = test_tuple.getClass.getName\n        test_tuple_type match {\n            case \"scala.Tuple2\" => {\n                val first_element = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n                val second_element = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n                val first_element_type = first_element._1.getClass.getName\n                val second_element_type = second_element._2.getClass.getName\n                if (first_element_type == second_element_type) {\n                    true\n                } else {\n                    false\n                }\n            }\n            case \"scala.Tuple3\" => {\n                val first_element = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n                val second_element = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n                val third_element = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n                val first_element_type = first_element._1.getClass.getName\n                val second_element_type = second_element._2.getClass.getName\n                val third_element_type = third_element._3.getClass.getName\n                if (first_element_type == second_element_type && second_element_type == third_element_type) {\n                    true\n                } else {\n                    false\n                }\n            }\n            case \"scala.Tuple4\" => {\n                val first_element = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val second_element = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val third_element = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val fourth_element = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val first_element_type = first_element._1.getClass.getName\n                val second_",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass.getName)\n        if (test_tuple_list_type.distinct.length == 1) true else false",
    "        val tuple_type = test_tuple.getClass.getName\n        tuple_type match {\n            case \"scala.Tuple2\" => {\n                val test_tuple_1 = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n                val test_tuple_2 = (test_tuple_1._1, test_tuple_1._2)\n                val test_tuple_3 = (test_tuple_1._1.getClass.getName, test_tuple_1._2.getClass.getName)\n                if (test_tuple_3._1 == test_tuple_3._2) true else false\n            }\n            case \"scala.Tuple3\" => {\n                val test_tuple_1 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n                val test_tuple_2 = (test_tuple_1._1, test_tuple_1._2, test_tuple_1._3)\n                val test_tuple_3 = (test_tuple_1._1.getClass.getName, test_tuple_1._2.getClass.getName, test_tuple_1._3.getClass.getName)\n                if (test_tuple_3._1 == test_tuple_3._2 && test_tuple_3._2 == test_tuple_3._3) true else false\n            }\n            case \"scala.Tuple4\" => {\n                val test_tuple_1 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n                val test_tuple_2 = (test_tuple_1._1, test_tuple_1._2, test_tuple_1._3, test_tuple_1._4)\n                val test_tuple_3 = (test_tuple_1._1.getClass.getName, test_tuple_1._2.getClass.getName, test_tuple_1._3.getClass.getName, test_tuple_1._4.getClass.getName)\n                if (test_",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 to tuple_type_list_length - 1) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        if (tuple_type_list_length == 1) {\n            return true\n        }\n        else {\n            val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n            val tuple_type_list_last_length = tuple_type_list_last.length\n            val tuple_type_list_last_new = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n            val tuple_type_list_last_new_length = tuple_type_list_last_new.length\n            val tuple_type_list_last_new_new = tuple_type_list_last_new.substring(0, tuple_type_list_last_new_length - 1)\n            if (tuple_type_list_last_new_new == \"java.lang.Integer\") {\n                return true\n            }\n            else {\n                return false\n            }\n        }",
    "        val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val type_list = tuple_list.map(x => x.getClass)\n        val type_set = type_list.toSet\n        if (type_set.size == 1) true else false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val t = test_tuple.asInstanceOf[Product]\n        val len = t.productArity\n        var flag = true\n        for (i <- 0 until len) {\n            if (t.productElement(i).getClass != t.productElement(0).getClass) {\n                flag = false\n            }\n        }\n        flag",
    "        test_tuple match {\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case _ => false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type == \"scala.Tuple2\") {\n            val tuple_type_1 = test_tuple.asInstanceOf[Tuple2[Any, Any]]._1.getClass.getName\n            val tuple_type_2 = test_tuple.asInstanceOf[Tuple2[Any, Any]]._2.getClass.getName\n            if (tuple_type_1 == tuple_type_2) true\n            else false\n        }\n        else if (tuple_type == \"scala.Tuple3\") {\n            val tuple_type_1 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._1.getClass.getName\n            val tuple_type_2 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._2.getClass.getName\n            val tuple_type_3 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._3.getClass.getName\n            if (tuple_type_1 == tuple_type_2 && tuple_type_2 == tuple_type_3) true\n            else false\n        }\n        else if (tuple_type == \"scala.Tuple4\") {\n            val tuple_type_1 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._1.getClass.getName\n            val tuple_type_2 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._2.getClass.getName\n            val tuple_type_3 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._3.getClass.getName\n            val tuple_type_4 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._4.getClass.getName\n            if (tuple_type_1 == tuple_type_2 && tuple_type_2 == tuple_type_3 && tuple_type_3 == tuple_type_4",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 1) {\n            return true\n        }\n        val type_list = new ArrayBuffer[String]()\n        for (i <- 1 until tuple_type_list_size) {\n            val type_name = tuple_type_list(i).split(\"\\\\]\")(0)\n            type_list += type_name\n        }\n        val type_list_set = type_list.toSet\n        if (type_list_set.size == 1) {\n            return true\n        }\n        return false",
    "        var flag = true\n        var data_type = test_tuple.getClass.getName\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass.getName != data_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_len = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_len - 1)\n        val tuple_type_list_last_len = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_len - 1)\n        if (tuple_type_list_last_last == \"java.lang.Integer\") {\n            return true\n        }\n        else {\n            return false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_array = tuple_type.split(\"\\\\[\")\n        val tuple_type_array_length = tuple_type_array.length\n        val tuple_type_array_last = tuple_type_array(tuple_type_array_length - 1)\n        val tuple_type_array_last_length = tuple_type_array_last.length\n        val tuple_type_array_last_substring = tuple_type_array_last.substring(0, tuple_type_array_last_length - 1)\n        val tuple_type_array_last_substring_array = tuple_type_array_last_substring.split(\",\")\n        val tuple_type_array_last_substring_array_length = tuple_type_array_last_substring_array.length\n        val tuple_type_array_last_substring_array_first = tuple_type_array_last_substring_array(0)\n        for (i <- 1 until tuple_type_array_last_substring_array_length) {\n            if (tuple_type_array_last_substring_array(i) != tuple_type_array_last_substring_array_first) {\n                return false\n            }\n        }\n        return true",
    "        var flag = true\n        var temp = test_tuple.asInstanceOf[Product].productIterator.toList\n        var temp_type = temp(0).getClass\n        for (i <- temp) {\n            if (i.getClass != temp_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_size - 1)\n        val tuple_type_list_last_size = tuple_type_list_last.size\n        val tuple_type_list_last_new = tuple_type_list_last.slice(0, tuple_type_list_last_size - 1)\n        val tuple_type_list_last_new_list = tuple_type_list_last_new.split(\",\")\n        val tuple_type_list_last_new_list_size = tuple_type_list_last_new_list.size\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_new_list_size - 1) {\n            if (tuple_type_list_last_new_list(i) != tuple_type_list_last_new_list(i + 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        test_tuple match {\n            case (x, y) => x.isInstanceOf[Int] && y.isInstanceOf[Int]\n            case (x, y, z) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int]\n            case (x, y, z, a) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && a.isInstanceOf[Int]\n            case (x, y, z, a, b) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && a.isInstanceOf[Int] && b.isInstanceOf[Int]\n            case (x, y, z, a, b, c) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && a.isInstanceOf[Int] && b.isInstanceOf[Int] && c.isInstanceOf[Int]\n            case (x, y, z, a, b, c, d) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && a.isInstanceOf[Int] && b.isInstanceOf[Int] && c.isInstanceOf[Int] && d.isInstanceOf[Int]\n            case (x, y, z, a, b, c, d, e) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && a.isInstanceOf[Int] && b.isInstanceOf[Int] && c.isInstanceOf[Int] && d.isInstanceOf[Int] && e.isInstanceOf[Int]\n            case (x, y, z, a, b, c, d, e, f) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && a.isInstanceOf[Int] && b.isInstanceOf[Int] && c.isInstanceOf[Int] && d.isInstanceOf[Int] && e.isInstanceOf",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var result = true\n        for (i <- 1 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                result = false\n            }\n        }\n        return result",
    "        val test_tuple_type = test_tuple.getClass.getSimpleName\n        if (test_tuple_type == \"Tuple2\") {\n            val tuple_type = test_tuple.asInstanceOf[Tuple2[Any, Any]]._1.getClass.getSimpleName\n            if (tuple_type == test_tuple.asInstanceOf[Tuple2[Any, Any]]._2.getClass.getSimpleName) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else if (test_tuple_type == \"Tuple3\") {\n            val tuple_type = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._1.getClass.getSimpleName\n            if (tuple_type == test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._2.getClass.getSimpleName && tuple_type == test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._3.getClass.getSimpleName) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else if (test_tuple_type == \"Tuple4\") {\n            val tuple_type = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._1.getClass.getSimpleName\n            if (tuple_type == test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._2.getClass.getSimpleName && tuple_type == test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._3.getClass.getSimpleName && tuple_type == test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._4.getClass.getSimpleName) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else if (test_tuple_type == \"Tuple5\") {\n            val tuple_type = test_tuple.asInstanceOf[Tuple5[Any, Any",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_size - 1)\n        val tuple_type_list_last_size = tuple_type_list_last.size\n        val tuple_type_list_last_trim = tuple_type_list_last.substring(0, tuple_type_list_last_size - 1)\n        val tuple_type_list_last_trim_list = tuple_type_list_last_trim.split(\",\")\n        val tuple_type_list_last_trim_list_size = tuple_type_list_last_trim_list.size\n        var check = true\n        for (i <- 0 until tuple_type_list_last_trim_list_size - 1) {\n            if (tuple_type_list_last_trim_list(i) != tuple_type_list_last_trim_list(i + 1)) {\n                check = false\n            }\n        }\n        return check",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_size = test_tuple.asInstanceOf[Product].productArity\n        for (i <- 0 until tuple_size) {\n            if (test_tuple.productElement(i).getClass.getName != tuple_type) {\n                return false\n            }\n        }\n        return true",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var check = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                check = false\n            }\n        }\n        return check",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : String, y : String, z : String) => true\n            case (x : Double, y : Double, z : Double) => true\n            case _ => false\n        }",
    "        var flag = true\n        var i = 0\n        var type_of_first = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        while (i < test_tuple.asInstanceOf[Product].productArity && flag) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        val tuple = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n        if (tuple._1.isInstanceOf[Int] && tuple._2.isInstanceOf[Int] && tuple._3.isInstanceOf[Int])\n            return true\n        else\n            return false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\").toList\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 1) {\n            return true\n        }\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_size - 1)\n        val tuple_type_list_last_size = tuple_type_list_last.size\n        val tuple_type_list_last_sub = tuple_type_list_last.substring(0, tuple_type_list_last_size - 1)\n        if (tuple_type_list_last_sub == tuple_type_list(0)) {\n            return true\n        }\n        return false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        val tuple_type_list_last_last_list_last = tuple_type_list_last_last_list(tuple_type_list_last_last_list_length - 1)\n        val tuple_type_list_last_last_list_last_list = tuple_type_list_last_last_list_last.split(\"\\\\.\")\n        val tuple_type_list_last_last_list_last_list_length = tuple_type_list_last_last_list_last_list.length\n        val tuple_type_list_last_last_list_last_list_last = tuple_type_list_last_last_list_last_list(tuple_type_list_last_last_list_last_list_length - 1)\n        val tuple_type_list_last_last_list_last_list_last_list = tuple_type_list_last_last_list_last_list_last.split(\"\\\\$\")\n        val tuple_type_list_last_last_list_last_list_last_list_length = tuple_type_list_last_last_list_last_list_last_list.length\n        val tuple_type_list_last_last_list_last_list_last_list_last = tuple_type_list_last_last_list_last_list_",
    "        val tuple_type = test_tuple.getClass.toString\n        val tuple_type_split = tuple_type.split(\"\\\\[\")\n        val tuple_type_final = tuple_type_split(1).split(\"\\\\]\")(0)\n        val tuple_type_final_split = tuple_type_final.split(\",\")\n        val tuple_type_final_split_length = tuple_type_final_split.length\n        var flag = true\n        for (i <- 0 until tuple_type_final_split_length) {\n            if (tuple_type_final_split(i) != tuple_type_final_split(0)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n        val first_type = tuple._1.getClass.getName\n        val second_type = tuple._2.getClass.getName\n        val third_type = tuple._3.getClass.getName\n        if (first_type == second_type && second_type == third_type) true\n        else false",
    "        var flag = true\n        var type_of_element = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 0 until test_tuple.asInstanceOf[Product].productArity) {\n            if (type_of_element != test_tuple.asInstanceOf[Product].productElement(i).getClass) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_trim = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_trim_list = tuple_type_list_last_trim.split(\",\")\n        val tuple_type_list_last_trim_list_length = tuple_type_list_last_trim_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_trim_list_length - 1) {\n            if (tuple_type_list_last_trim_list(i) != tuple_type_list_last_trim_list(i + 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case _ => false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            var i = 0\n            var flag = true\n            while (i < tuple_length && flag) {\n                val element = test_tuple.asInstanceOf[Product].productElement(i)\n                val element_type = element.getClass.getName\n                if (element_type.contains(\"Tuple\")) {\n                    flag = checkType(element)\n                } else {\n                    if (i == 0) {\n                        flag = true\n                    } else {\n                        flag = (element_type == test_tuple.asInstanceOf[Product].productElement(0).getClass.getName)\n                    }\n                }\n                i += 1\n            }\n            flag\n        } else {\n            true\n        }",
    "        val tuple_types = test_tuple.asInstanceOf[Product].productIterator.toList.map(x => x.getClass.getSimpleName)\n        val unique_types = tuple_types.distinct\n        if (unique_types.length == 1) true else false",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        for (i <- type_list.indices) {\n            if (type_list(i) != type_list(0)) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var temp_type = test_tuple.getClass.toString\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass.toString != temp_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_split = tuple_type.split(\"\\\\[\")\n        val tuple_type_final = tuple_type_split(1).split(\"\\\\]\")(0)\n        val tuple_type_final_split = tuple_type_final.split(\",\")\n        val tuple_type_final_split_set = tuple_type_final_split.toSet\n        if (tuple_type_final_split_set.size == 1) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_length = tuple_type_list_last_last.length\n        val tuple_type_list_last_last_last = tuple_type_list_last_last.substring(0, tuple_type_list_last_last_length - 1)\n        val tuple_type_list_last_last_last_length = tuple_type_list_last_last_last.length\n        val tuple_type_list_last_last_last_last = tuple_type_list_last_last_last.substring(0, tuple_type_list_last_last_last_length - 1)\n        val tuple_type_list_last_last_last_last_length = tuple_type_list_last_last_last_last.length\n        val tuple_type_list_last_last_last_last_last = tuple_type_list_last_last_last_last.substring(0, tuple_type_list_last_last_last_last_length - 1)\n        val tuple_type_list_last_last_last_last_last_length = tuple_type_list_last_last_last_last_last.length\n        val tuple_type_list_last_last_last_last_last_last = tuple_type_list_last_last_last_last_last.substring(0, tuple_type_list_last_last_last_last_last_length - 1)\n        val tuple_type_list_last_last_last_last_last_last_length = tuple_type_list_last_",
    "        var flag = true\n        for(i <- 0 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if(test_tuple.asInstanceOf[Product].productElement(i).getClass != test_tuple.asInstanceOf[Product].productElement(0).getClass) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_final = tuple_type_list(1).split(\"\\\\]\")\n        val tuple_type_final = tuple_type_list_final(0)\n        val tuple_type_final_list = tuple_type_final.split(\",\")\n        val tuple_type_final_list_final = tuple_type_final_list.map(x => x.trim)\n        val tuple_type_final_list_final_set = tuple_type_final_list_final.toSet\n        if (tuple_type_final_list_final_set.size == 1) {\n            return true\n        } else {\n            return false\n        }",
    "        val tuple = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n        val first_type = tuple._1.getClass.getName\n        val second_type = tuple._2.getClass.getName\n        val third_type = tuple._3.getClass.getName\n        if (first_type == second_type && second_type == third_type) {\n            return true\n        } else {\n            return false\n        }",
    "        var flag = true\n        var temp = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != temp) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass.getName)\n        val test_tuple_list_type_set = test_tuple_list_type.toSet\n        if (test_tuple_list_type_set.size == 1) true else false",
    "        var result = true\n        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.toString\n        }\n        for (i <- 0 until type_list.length - 1) {\n            if (type_list(i) != type_list(i + 1)) {\n                result = false\n            }\n        }\n        return result",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_split = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_split_2 = test_tuple_type_split(1).split(\"\\\\]\")\n        val test_tuple_type_split_3 = test_tuple_type_split_2(0).split(\",\")\n        val test_tuple_type_split_4 = test_tuple_type_split_3.map(x => x.trim)\n        val test_tuple_type_split_5 = test_tuple_type_split_4.map(x => x.split(\"\\\\.\")(1))\n        val test_tuple_type_split_6 = test_tuple_type_split_5.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_split_7 = test_tuple_type_split_6.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_split_8 = test_tuple_type_split_7.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_split_9 = test_tuple_type_split_8.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_split_10 = test_tuple_type_split_9.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_split_11 = test_tuple_type_split_10.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_split_12 = test_tuple_type_split_11.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_split_13 = test_tuple_type_split_12.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_split_14 = test_tuple_type_split_",
    "        var flag = true\n        var data_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 0 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != data_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type == \"scala.Tuple2\") {\n            val t = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n            if (t._1.getClass.getName == t._2.getClass.getName) true\n            else false\n        }\n        else if (tuple_type == \"scala.Tuple3\") {\n            val t = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n            if (t._1.getClass.getName == t._2.getClass.getName && t._1.getClass.getName == t._3.getClass.getName) true\n            else false\n        }\n        else if (tuple_type == \"scala.Tuple4\") {\n            val t = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n            if (t._1.getClass.getName == t._2.getClass.getName && t._1.getClass.getName == t._3.getClass.getName && t._1.getClass.getName == t._4.getClass.getName) true\n            else false\n        }\n        else if (tuple_type == \"scala.Tuple5\") {\n            val t = test_tuple.asInstanceOf[Tuple5[Any, Any, Any, Any, Any]]\n            if (t._1.getClass.getName == t._2.getClass.getName && t._1.getClass.getName == t._3.getClass.getName && t._1.getClass.getName == t._4.getClass.getName && t._1.getClass.getName == t._5.getClass.getName) true\n            else false\n        }\n        else if (tuple_type == \"scala.Tuple6\") {\n            val t = test_tuple.asInstanceOf[Tuple6[Any, Any, Any, Any, Any, Any]]\n            if (t._1.getClass.getName == t._2.getClass.getName",
    "        var result = true\n        var first_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != first_type) {\n                result = false\n            }\n        }\n        return result",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            val tuple_elements = test_tuple.asInstanceOf[Product].productIterator\n            var element_type = tuple_elements.next.getClass.getName\n            for (i <- 1 until tuple_length) {\n                if (element_type != tuple_elements.next.getClass.getName) {\n                    return false\n                }\n            }\n            return true\n        }\n        else {\n            return false\n        }",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            var i = 0\n            var flag = true\n            while (i < tuple_length) {\n                val element_type = test_tuple.asInstanceOf[Product].productElement(i).getClass.getName\n                if (element_type != tuple_type) {\n                    flag = false\n                }\n                i += 1\n            }\n            flag\n        } else {\n            false\n        }",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        for (i <- type_list.indices) {\n            if (type_list(i) != type_list(0)) {\n                flag = false\n            }\n        }\n        flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_split = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_split_2 = test_tuple_type_split(1).split(\"\\\\]\")\n        val test_tuple_type_final = test_tuple_type_split_2(0)\n        val test_tuple_type_final_split = test_tuple_type_final.split(\"\\\\.\")\n        val test_tuple_type_final_split_2 = test_tuple_type_final_split(1)\n        if (test_tuple_type_final_split_2 == \"Int\") {\n            true\n        } else {\n            false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")(1).split(\"\\\\]\")(0).split(\",\")\n        val tuple_type_set = tuple_type_list.toSet\n        if (tuple_type_set.size == 1) {\n            return true\n        }\n        return false",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_length = test_tuple_type_list.length\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_length - 1)\n        val test_tuple_type_list_last_list = test_tuple_type_list_last.split(\"\\\\]\")\n        val test_tuple_type_list_last_list_first = test_tuple_type_list_last_list(0)\n        val test_tuple_type_list_last_list_first_list = test_tuple_type_list_last_list_first.split(\"\\\\.\")\n        val test_tuple_type_list_last_list_first_list_length = test_tuple_type_list_last_list_first_list.length\n        val test_tuple_type_list_last_list_first_list_last = test_tuple_type_list_last_list_first_list(test_tuple_type_list_last_list_first_list_length - 1)\n        val test_tuple_type_list_last_list_first_list_last_list = test_tuple_type_list_last_list_first_list_last.split(\"\\\\$\")\n        val test_tuple_type_list_last_list_first_list_last_list_length = test_tuple_type_list_last_list_first_list_last_list.length\n        val test_tuple_type_list_last_list_first_list_last_list_last = test_tuple_type_list_last_list_first_list_last_list(test_tuple_type_list_last_list_first_list_last_list_length - 1)\n        val test_tuple_type_list_last_list_first_list_last_list_last_list = test_tuple_type_list",
    "        var flag = true\n        var i = 0\n        while (i < test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != test_tuple.asInstanceOf[Product].productElement(0).getClass) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_array = tuple_type.split(\"\\\\[\")\n        val tuple_type_array_size = tuple_type_array.size\n        if (tuple_type_array_size == 1) {\n            return true\n        }\n        else {\n            val tuple_type_array_last = tuple_type_array(tuple_type_array_size - 1)\n            val tuple_type_array_last_array = tuple_type_array_last.split(\"\\\\]\")\n            val tuple_type_array_last_array_size = tuple_type_array_last_array.size\n            if (tuple_type_array_last_array_size == 1) {\n                return true\n            }\n            else {\n                val tuple_type_array_last_array_last = tuple_type_array_last_array(tuple_type_array_last_array_size - 1)\n                val tuple_type_array_last_array_last_array = tuple_type_array_last_array_last.split(\"\\\\$\")\n                val tuple_type_array_last_array_last_array_size = tuple_type_array_last_array_last_array.size\n                if (tuple_type_array_last_array_last_array_size == 1) {\n                    return true\n                }\n                else {\n                    val tuple_type_array_last_array_last_array_last = tuple_type_array_last_array_last_array(tuple_type_array_last_array_last_array_size - 1)\n                    val tuple_type_array_last_array_last_array_last_array = tuple_type_array_last_array_last_array_last.split(\"\\\\.\")\n                    val tuple_type_array_last_array_last_array_last_array_size = tuple_type_array_last_array_last_array_last_array.size\n                    if (tuple_type_array_last_array_last_array_last_array_size == 1) {\n                        return true\n                    }\n                    else {\n                        val tuple",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            val tuple_elements = test_tuple.asInstanceOf[Product].productIterator\n            val tuple_element_types = new ArrayBuffer[String]\n            for (i <- 0 until tuple_length) {\n                tuple_element_types += tuple_elements.next.getClass.getName\n            }\n            if (tuple_element_types.distinct.length == 1) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else {\n            return false\n        }",
    "        test_tuple match {\n            case (a, b) => {\n                if (a.getClass == b.getClass) true\n                else false\n            }\n            case (a, b, c) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass) true\n                else false\n            }\n            case (a, b, c, d) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass) true\n                else false\n            }\n            case (a, b, c, d, e) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass) true\n                else false\n            }\n            case (a, b, c, d, e, f) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass) true\n                else false\n            }\n            case (a, b, c, d, e, f, g) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass) true\n                else false\n            }\n            case (a, b, c, d, e, f, g, h) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass) true\n                else false\n            }\n            case (a, b, c, d, e, f, g, h, i) => {\n                if (",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        if (test_tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_size - 1)\n            val test_tuple_type_list_last_list = test_tuple_type_list_last.split(\"\\\\]\")\n            val test_tuple_type_list_last_list_size = test_tuple_type_list_last_list.size\n            if (test_tuple_type_list_last_list_size == 1) {\n                return true\n            }\n            else {\n                val test_tuple_type_list_last_list_last = test_tuple_type_list_last_list(test_tuple_type_list_last_list_size - 1)\n                if (test_tuple_type_list_last_list_last == \"\") {\n                    return true\n                }\n                else {\n                    return false\n                }\n            }\n        }",
    "        val t = test_tuple.asInstanceOf[Product]\n        val types = t.productIterator.toList.map(_.getClass)\n        types.distinct.length == 1",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_size = test_tuple.asInstanceOf[Product].productArity\n            var flag = true\n            for (i <- 0 until tuple_size) {\n                if (test_tuple.productElement(i).getClass.getName != test_tuple.productElement(0).getClass.getName) {\n                    flag = false\n                    return flag\n                }\n            }\n            return flag\n        }\n        else {\n            return false\n        }",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && a.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass && a.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass && a.getClass == e.getClass && a.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass && a.getClass == e.getClass && a.getClass == f.getClass && a.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass && a.getClass == e.getClass && a.getClass == f.getClass && a.getClass == g.getClass && a.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass && a.getClass == e.getClass && a.getClass == f.getClass && a.getClass == g.getClass && a.getClass == h.getClass && a.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        var flag = true\n        var type_of_first = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        var flag = true\n        for(i <- 0 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if(test_tuple.asInstanceOf[Product].productElement(i).getClass != test_tuple.asInstanceOf[Product].productElement(0).getClass) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n            val tuple_type_list = tuple_list.map(x => x.getClass.getName)\n            val tuple_type_set = tuple_type_list.toSet\n            if (tuple_type_set.size == 1) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else {\n            return false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_length = tuple_type_list_last_last.length\n        val tuple_type_list_last_last_last = tuple_type_list_last_last.substring(0, tuple_type_list_last_last_length - 1)\n        val tuple_type_list_last_last_last_length = tuple_type_list_last_last_last.length\n        val tuple_type_list_last_last_last_last = tuple_type_list_last_last_last.substring(0, tuple_type_list_last_last_last_length - 1)\n        val tuple_type_list_last_last_last_last_length = tuple_type_list_last_last_last_last.length\n        val tuple_type_list_last_last_last_last_last = tuple_type_list_last_last_last_last.substring(0, tuple_type_list_last_last_last_last_length - 1)\n        val tuple_type_list_last_last_last_last_last_length = tuple_type_list_last_last_last_last_last.length\n        val tuple_type_list_last_last_last_last_last_last = tuple_type_list_last_last_last_last_last.substring(0, tuple_type_list_last_last_last_last_last_length - 1)\n        val tuple_type_list_last_last_last_last_last_last_length = tuple_type_list_last_",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_last_list_length - 1) {\n            if (tuple_type_list_last_last_list(i) != tuple_type_list_last_last_list(i + 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        var type_set = Set[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_set += i.getClass.getName\n        }\n        return type_set.size == 1",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_array = tuple_type.split(\"\\\\[\")\n        val tuple_type_array_length = tuple_type_array.length\n        val tuple_type_array_last = tuple_type_array(tuple_type_array_length - 1)\n        val tuple_type_array_last_array = tuple_type_array_last.split(\"\\\\]\")\n        val tuple_type_array_last_array_first = tuple_type_array_last_array(0)\n        val tuple_type_array_last_array_first_array = tuple_type_array_last_array_first.split(\",\")\n        val tuple_type_array_last_array_first_array_length = tuple_type_array_last_array_first_array.length\n        val tuple_type_array_last_array_first_array_first = tuple_type_array_last_array_first_array(0)\n        var flag = true\n        for (i <- 0 until tuple_type_array_last_array_first_array_length) {\n            if (tuple_type_array_last_array_first_array_first != tuple_type_array_last_array_first_array(i)) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case _ => false\n        }",
    "        var result = true\n        var data_type = test_tuple.getClass.getName\n        for (i <- 0 to test_tuple.productArity - 1) {\n            if (test_tuple.productElement(i).getClass.getName != data_type) {\n                result = false\n            }\n        }\n        return result",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        return false",
    "        var flag = true\n        var i = 0\n        var type_list = List[String]()\n        for (i <- 0 to test_tuple.productArity - 1) {\n            type_list = type_list :+ test_tuple.productElement(i).getClass.getName\n        }\n        type_list.foreach(x => if (x != type_list(0)) flag = false)\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.String\", \"java.lang.Double\")\n        if (tuple_type_list.contains(tuple_type)) {\n            true\n        } else {\n            false\n        }",
    "        var result = true\n        var type_list = List[Any]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = i.getClass :: type_list\n        }\n        for (i <- type_list) {\n            if (i != type_list(0)) {\n                result = false\n            }\n        }\n        return result",
    "        var flag = true\n        var type_of_first = test_tuple.getClass.getTypeName\n        for(i <- 0 to test_tuple.productArity - 1) {\n            if(test_tuple.productElement(i).getClass.getTypeName != type_of_first) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        var check = true\n        for (i <- 0 until tuple_type_list_last_last_list_length - 1) {\n            if (tuple_type_list_last_last_list(i) != tuple_type_list_last_last_list(i + 1)) {\n                check = false\n            }\n        }\n        return check",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_last_list_length - 1) {\n            if (tuple_type_list_last_last_list(i) != tuple_type_list_last_last_list(i + 1)) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        var flag = true\n        for (i <- 1 until tuple_type_list_size) {\n            if (tuple_type_list(i) != tuple_type_list(i-1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- 0 until test_tuple.productArity) {\n            type_list = type_list :+ test_tuple.productElement(i).getClass.getName\n        }\n        for (i <- 0 until type_list.length - 1) {\n            if (type_list(i) != type_list(i + 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        var flag = true\n        for(i <- 0 until test_tuple.asInstanceOf[Product].productArity) {\n            if(test_tuple.asInstanceOf[Product].productElement(i).getClass != test_tuple.asInstanceOf[Product].productElement(0).getClass) {\n                flag = false\n            }\n        }\n        flag",
    "        var flag = true\n        var data_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 0 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != data_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_type = test_tuple_list.map(x => x.getClass)\n        val test_tuple_type_set = test_tuple_type.toSet\n        if (test_tuple_type_set.size == 1) true else false",
    "        var flag = true\n        for(i <- 0 until test_tuple.productArity) {\n            if(test_tuple.productElement(i).getClass != test_tuple.productElement(0).getClass) {\n                flag = false\n            }\n        }\n        return flag",
    "        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        type_list.distinct.length == 1",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_trim = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_trim_list = tuple_type_list_last_trim.split(\",\")\n        val tuple_type_list_last_trim_list_length = tuple_type_list_last_trim_list.length\n        val tuple_type_list_last_trim_list_first = tuple_type_list_last_trim_list(0)\n        for (i <- 1 to tuple_type_list_last_trim_list_length - 1) {\n            if (tuple_type_list_last_trim_list_first != tuple_type_list_last_trim_list(i)) {\n                return false\n            }\n        }\n        return true",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 to tuple_type_list_length - 1) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_length = tuple_type.length\n        val tuple_type_length_minus_1 = tuple_type_length - 1\n        val tuple_type_length_minus_2 = tuple_type_length - 2\n        val tuple_type_length_minus_3 = tuple_type_length - 3\n        val tuple_type_length_minus_4 = tuple_type_length - 4\n        val tuple_type_length_minus_5 = tuple_type_length - 5\n        val tuple_type_length_minus_6 = tuple_type_length - 6\n        val tuple_type_length_minus_7 = tuple_type_length - 7\n        val tuple_type_length_minus_8 = tuple_type_length - 8\n        val tuple_type_length_minus_9 = tuple_type_length - 9\n        val tuple_type_length_minus_10 = tuple_type_length - 10\n        val tuple_type_length_minus_11 = tuple_type_length - 11\n        val tuple_type_length_minus_12 = tuple_type_length - 12\n        val tuple_type_length_minus_13 = tuple_type_length - 13\n        val tuple_type_length_minus_14 = tuple_type_length - 14\n        val tuple_type_length_minus_15 = tuple_type_length - 15\n        val tuple_type_length_minus_16 = tuple_type_length - 16\n        val tuple_type_length_minus_17 = tuple_type_length - 17\n        val tuple_type_length_minus_18 = tuple_type_length - 18\n        val tuple_type_length_minus_19 = tuple_type_length - 19\n        val tuple_type_length_minus_20 = tuple_type_length - 20\n        val tuple_type_length_minus_21 = tuple_type_length - 21\n        val tuple_type_length_minus_22 = tuple_type_length - 22\n        val tuple_type_length_minus_23 = tuple_type_length - 23\n        val tuple_type_length_minus_24 = tuple_type_length - 24\n",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n            val tuple_type_list = tuple_list.map(x => x.getClass.getName)\n            val tuple_type_set = tuple_type_list.toSet\n            if (tuple_type_set.size == 1) {\n                true\n            } else {\n                false\n            }\n        } else {\n            false\n        }",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : Double, y : Double, z : Double) => true\n            case (x : String, y : String, z : String) => true\n            case _ => false\n        }",
    "        var flag = true\n        var type_of_first = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass)\n        val test_tuple_list_type_set = test_tuple_list_type.toSet\n        if (test_tuple_list_type_set.size == 1) true else false",
    "        var flag = true\n        var i = 0\n        while (i < test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass != test_tuple.productElement(0).getClass) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- 0 until test_tuple.productArity) {\n            type_list = type_list :+ test_tuple.productElement(i).getClass.toString\n        }\n        for (i <- 0 until type_list.length - 1) {\n            if (type_list(i) != type_list(i + 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && a.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass && a.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass && a.getClass == e.getClass && a.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass && a.getClass == e.getClass && a.getClass == f.getClass && a.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass && a.getClass == e.getClass && a.getClass == f.getClass && a.getClass == g.getClass && a.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && a.getClass == c.getClass && a.getClass == d.getClass && a.getClass == e.getClass && a.getClass == f.getClass && a.getClass == g.getClass && a.getClass == h.getClass && a.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var flag = true\n        var type_of_first_element = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first_element) {\n                flag = false\n            }\n        }\n        return flag",
    "        var result = true\n        var first_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (first_type != test_tuple.asInstanceOf[Product].productElement(i).getClass) {\n                result = false\n            }\n        }\n        return result",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, w) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass\n            case (x, y, z, w, v) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass && w.getClass == v.getClass\n            case (x, y, z, w, v, u) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass && w.getClass == v.getClass && v.getClass == u.getClass\n            case (x, y, z, w, v, u, t) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass && w.getClass == v.getClass && v.getClass == u.getClass && u.getClass == t.getClass\n            case (x, y, z, w, v, u, t, s) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass && w.getClass == v.getClass && v.getClass == u.getClass && u.getClass == t.getClass && t.getClass == s.getClass\n            case (x, y, z, w, v, u, t, s, r) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass && w.getClass == v.getClass && v.getClass == u.getClass && u.getClass == t.getClass && t.getClass == s.getClass && s.getClass == r.getClass\n            case (x, y, z, w, v, u, t, s, r, q)",
    "        var result = true\n        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.toString\n        }\n        for (i <- type_list) {\n            if (i != type_list(0)) {\n                result = false\n            }\n        }\n        return result",
    "        val tuple_type = test_tuple.getClass.getName\n        if(tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            var i = 0\n            var type_check = true\n            while(i < tuple_length) {\n                val element_type = test_tuple.asInstanceOf[Product].productElement(i).getClass.getName\n                if(element_type != tuple_type) {\n                    type_check = false\n                    return type_check\n                }\n                i += 1\n            }\n            return type_check\n        }\n        else {\n            return false\n        }",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : Double, y : Double, z : Double) => true\n            case (x : String, y : String, z : String) => true\n            case (x : Char, y : Char, z : Char) => true\n            case _ => false\n        }",
    "        test_tuple match {\n            case (x, y) => {\n                if (x.getClass == y.getClass) true\n                else false\n            }\n            case (x, y, z) => {\n                if (x.getClass == y.getClass && x.getClass == z.getClass) true\n                else false\n            }\n            case (x, y, z, a) => {\n                if (x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass) true\n                else false\n            }\n            case (x, y, z, a, b) => {\n                if (x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c) => {\n                if (x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c, d) => {\n                if (x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass && x.getClass == d.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c, d, e) => {\n                if (x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass && x.getClass == d.getClass && x.getClass == e.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c, d, e, f) => {\n                if (",
    "        test_tuple match {\n            case (x, y) => {\n                if (x.getClass == y.getClass) true\n                else false\n            }\n            case (x, y, z) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass) true\n                else false\n            }\n            case (x, y, z, a) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass) true\n                else false\n            }\n            case (x, y, z, a, b) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c, d) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c, d, e) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c, d, e, f) => {\n                if (",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(i-1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_length = test_tuple_type_list.length\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_length - 1)\n        val test_tuple_type_list_last_length = test_tuple_type_list_last.length\n        val test_tuple_type_list_last_last = test_tuple_type_list_last.substring(0, test_tuple_type_list_last_length - 1)\n        val test_tuple_type_list_last_last_list = test_tuple_type_list_last_last.split(\",\")\n        val test_tuple_type_list_last_last_list_length = test_tuple_type_list_last_last_list.length\n        var flag = true\n        for (i <- 0 until test_tuple_type_list_last_last_list_length - 1) {\n            if (test_tuple_type_list_last_last_list(i) != test_tuple_type_list_last_last_list(i + 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        for (i <- type_list) {\n            if (i != type_list(0)) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        val test_tuple_type_list_size_minus_one = test_tuple_type_list_size - 1\n        val test_tuple_type_list_size_minus_two = test_tuple_type_list_size - 2\n        val test_tuple_type_list_size_minus_three = test_tuple_type_list_size - 3\n        val test_tuple_type_list_size_minus_four = test_tuple_type_list_size - 4\n        if (test_tuple_type_list_size == 2) {\n            if (test_tuple_type_list(test_tuple_type_list_size_minus_one) == \"Ljava.lang.String;\") {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else if (test_tuple_type_list_size == 3) {\n            if (test_tuple_type_list(test_tuple_type_list_size_minus_one) == \"Ljava.lang.String;\") {\n                return true\n            }\n            else if (test_tuple_type_list(test_tuple_type_list_size_minus_two) == \"Ljava.lang.String;\") {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else if (test_tuple_type_list_size == 4) {\n            if (test_tuple_type_list(test_tuple_type_list_size_minus_one) == \"Ljava.lang.String;\") {\n                return true\n            }\n            else if (test_tuple_type_list(test_tuple_type_list_size_minus_two) == \"Ljava.lang.String;\") {\n                return true\n            }\n            else if (test_t",
    "        test_tuple match {\n            case (x, y) => {\n                if (x.getClass == y.getClass) true\n                else false\n            }\n            case _ => false\n        }",
    "        val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val type_list = tuple_list.map(x => x.getClass)\n        val type_set = type_list.toSet\n        if (type_set.size == 1) true\n        else false",
    "        var flag = true\n        var i = 0\n        var prev_type = test_tuple.asInstanceOf[Product].productElement(i).getClass\n        for(i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if(test_tuple.asInstanceOf[Product].productElement(i).getClass != prev_type) {\n                flag = false\n                return flag\n            }\n        }\n        flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_size - 1)\n        val test_tuple_type_list_last_split = test_tuple_type_list_last.split(\"\\\\]\")\n        val test_tuple_type_list_last_split_first = test_tuple_type_list_last_split(0)\n        val test_tuple_type_list_last_split_first_split = test_tuple_type_list_last_split_first.split(\"\\\\.\")\n        val test_tuple_type_list_last_split_first_split_last = test_tuple_type_list_last_split_first_split(test_tuple_type_list_last_split_first_split.size - 1)\n        val test_tuple_type_list_last_split_first_split_last_split = test_tuple_type_list_last_split_first_split_last.split(\"\\\\$\")\n        val test_tuple_type_list_last_split_first_split_last_split_last = test_tuple_type_list_last_split_first_split_last_split(test_tuple_type_list_last_split_first_split_last_split.size - 1)\n        val test_tuple_type_list_last_split_first_split_last_split_last_split = test_tuple_type_list_last_split_first_split_last_split_last.split(\"\\\\@\")\n        val test_tuple_type_list_last_split_first_split_last_split_last_split_last = test_tuple_type_list_last_split_first_split_last_split_last_split(test_tuple_type_list_last_split_",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_length = test_tuple_type_list.length\n        if (test_tuple_type_list_length == 1) {\n            return true\n        }\n        else {\n            val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_length - 1)\n            val test_tuple_type_list_last_split = test_tuple_type_list_last.split(\"\\\\]\")\n            val test_tuple_type_list_last_split_first = test_tuple_type_list_last_split(0)\n            if (test_tuple_type_list_last_split_first == \"Ljava.lang.Object;\") {\n                return false\n            }\n            else {\n                return true\n            }\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_split = tuple_type.split(\"\\\\[\")\n        val tuple_type_final = tuple_type_split(1).split(\"\\\\]\")(0)\n        if (tuple_type_final == \"Ljava.lang.Object;\") {\n            return false\n        }\n        else {\n            return true\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\", \"java.lang.Boolean\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var result = true\n        var first_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != first_type) {\n                result = false\n                return result\n            }\n        }\n        return result",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            var flag = true\n            for (i <- 0 until tuple_length) {\n                if (test_tuple.productElement(i).getClass.getName != test_tuple.productElement(0).getClass.getName) {\n                    flag = false\n                }\n            }\n            flag\n        } else {\n            false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        var result = true\n        for (i <- 1 until tuple_type_list_size) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                result = false\n            }\n        }\n        return result",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_split = tuple_type.split(\"\\\\[\")\n        val tuple_type_final = tuple_type_split(1).split(\"\\\\]\")(0)\n        if (tuple_type_final.contains(\"String\")) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var flag = true\n        var i = 0\n        while (i < test_tuple.productArity && flag) {\n            if (test_tuple.productElement(i).getClass != test_tuple.productElement(0).getClass) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        if (test_tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val test_tuple_type_list_1 = test_tuple_type_list(1).split(\"\\\\]\")\n            val test_tuple_type_list_1_size = test_tuple_type_list_1.size\n            if (test_tuple_type_list_1_size == 1) {\n                return true\n            }\n            else {\n                val test_tuple_type_list_1_0 = test_tuple_type_list_1(0)\n                val test_tuple_type_list_1_0_list = test_tuple_type_list_1_0.split(\"\\\\.\")\n                val test_tuple_type_list_1_0_list_size = test_tuple_type_list_1_0_list.size\n                if (test_tuple_type_list_1_0_list_size == 1) {\n                    return true\n                }\n                else {\n                    val test_tuple_type_list_1_0_list_1 = test_tuple_type_list_1_0_list(1)\n                    val test_tuple_type_list_1_0_list_1_list = test_tuple_type_list_1_0_list_1.split(\"\\\\$\")\n                    val test_tuple_type_list_1_0_list_1_list_size = test_tuple_type_list_1_0_list_1_list.size\n                    if (test_tuple_type_list_1_0_list_1_list_size == 1) {\n                        return true\n                    }\n                    else {\n                        val test_tuple_type_list_1_0_list_1_list_1 = test_t",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, w) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass\n            case (x, y, z, w, v) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass && w.getClass == v.getClass\n            case (x, y, z, w, v, u) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass && w.getClass == v.getClass && v.getClass == u.getClass\n            case (x, y, z, w, v, u, t) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass && w.getClass == v.getClass && v.getClass == u.getClass && u.getClass == t.getClass\n            case (x, y, z, w, v, u, t, s) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass && w.getClass == v.getClass && v.getClass == u.getClass && u.getClass == t.getClass && t.getClass == s.getClass\n            case (x, y, z, w, v, u, t, s, r) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == w.getClass && w.getClass == v.getClass && v.getClass == u.getClass && u.getClass == t.getClass && t.getClass == s.getClass && s.getClass == r.getClass\n            case (x, y, z, w, v, u, t, s, r, q)",
    "        var flag = true\n        var i = 0\n        var prev_type = test_tuple.asInstanceOf[Product].productElement(i).getClass.getName\n        while(i < test_tuple.productArity) {\n            if(test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != prev_type) {\n                flag = false\n            }\n            i += 1\n        }\n        flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_array = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_array_length = test_tuple_type_array.length\n        val test_tuple_type_array_last_element = test_tuple_type_array(test_tuple_type_array_length - 1)\n        val test_tuple_type_array_last_element_length = test_tuple_type_array_last_element.length\n        val test_tuple_type_array_last_element_last_character = test_tuple_type_array_last_element(test_tuple_type_array_last_element_length - 1)\n        if (test_tuple_type_array_last_element_last_character == ']') {\n            val test_tuple_type_array_last_element_without_last_character = test_tuple_type_array_last_element.substring(0, test_tuple_type_array_last_element_length - 1)\n            val test_tuple_type_array_last_element_without_last_character_length = test_tuple_type_array_last_element_without_last_character.length\n            val test_tuple_type_array_last_element_without_last_character_last_character = test_tuple_type_array_last_element_without_last_character(test_tuple_type_array_last_element_without_last_character_length - 1)\n            if (test_tuple_type_array_last_element_without_last_character_last_character == '$') {\n                val test_tuple_type_array_last_element_without_last_character_without_last_character = test_tuple_type_array_last_element_without_last_character.substring(0, test_tuple_type_array_last_element_without_last_character_length - 1)\n                val test_tuple_type_array_last_element_without_last_character_without_",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_size = test_tuple.productArity\n        var flag = true\n        for (i <- 0 until tuple_size) {\n            if (test_tuple.productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        val tuple_type = test_tuple.getClass.getSimpleName\n        if (tuple_type == \"Tuple1\") {\n            return true\n        }\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        val tuple_array = test_tuple.asInstanceOf[Product].productIterator.toArray\n        for (i <- 0 until tuple_length) {\n            if (tuple_array(i).getClass.getSimpleName != tuple_type) {\n                return false\n            }\n        }\n        return true",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        val tuple_type = test_tuple.getClass.getName.split(\"\\\\.\").last\n        if (tuple_type == \"Tuple1\") {\n            return true\n        }\n        val tuple_length = test_tuple.productArity\n        val tuple_elements = test_tuple.productIterator\n        var type_list = List[String]()\n        for (i <- 0 until tuple_length) {\n            type_list = type_list :+ tuple_elements.next.getClass.getName.split(\"\\\\.\").last\n        }\n        val type_set = type_list.toSet\n        if (type_set.size == 1) {\n            return true\n        }\n        return false",
    "        val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val type_list = tuple_list.map(x => x.getClass)\n        val unique_type_list = type_list.distinct\n        if (unique_type_list.length == 1) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var flag : Boolean = true\n        var first_type : String = test_tuple.getClass.getSimpleName\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass.getSimpleName != first_type) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) true\n        else false",
    "        var flag = true\n        var i = 0\n        var test_type = test_tuple.asInstanceOf[Product].productElement(0).getClass.toString\n        while (i < test_tuple.asInstanceOf[Product].productArity && flag) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.toString != test_type) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val first_type = test_tuple.getClass.getName\n        val test_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        test_list.forall(x => x.getClass.getName == first_type)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val tuple_type_list_last = tuple_type_list(tuple_type_list_size - 1)\n            val tuple_type_list_last_list = tuple_type_list_last.split(\"\\\\]\")\n            val tuple_type_list_last_list_size = tuple_type_list_last_list.size\n            if (tuple_type_list_last_list_size == 1) {\n                return true\n            }\n            else {\n                val tuple_type_list_last_list_last = tuple_type_list_last_list(tuple_type_list_last_list_size - 1)\n                if (tuple_type_list_last_list_last == \"\") {\n                    return true\n                }\n                else {\n                    return false\n                }\n            }\n        }",
    "        val tuple = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n        val type_list = List(tuple._1.getClass.getName, tuple._2.getClass.getName, tuple._3.getClass.getName)\n        return type_list.distinct.length == 1",
    "        var flag = true\n        var data_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 0 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != data_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var type_name = test_tuple.getClass.getName\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass.getName != type_name) {\n                flag = false\n            }\n        }\n        flag",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass)\n        val test_tuple_list_type_set = test_tuple_list_type.toSet\n        return test_tuple_list_type_set.size == 1",
    "        val first_type = test_tuple.getClass.getName\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass.getName != first_type) {\n                return false\n            }\n        }\n        return true",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        if (test_tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_size - 1)\n            val test_tuple_type_list_last_list = test_tuple_type_list_last.split(\"\\\\]\")\n            val test_tuple_type_list_last_list_size = test_tuple_type_list_last_list.size\n            if (test_tuple_type_list_last_list_size == 1) {\n                return true\n            }\n            else {\n                val test_tuple_type_list_last_list_last = test_tuple_type_list_last_list(test_tuple_type_list_last_list_size - 1)\n                if (test_tuple_type_list_last_list_last == \"\") {\n                    return true\n                }\n                else {\n                    return false\n                }\n            }\n        }",
    "        var flag = true\n        var temp = test_tuple.asInstanceOf[Product].productIterator.next.getClass\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass != temp) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_new = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_new_list = tuple_type_list_last_new.split(\",\")\n        val tuple_type_list_last_new_list_length = tuple_type_list_last_new_list.length\n        val tuple_type_list_last_new_list_first = tuple_type_list_last_new_list(0)\n        var flag = true\n        for (i <- 1 to tuple_type_list_last_new_list_length - 1) {\n            if (tuple_type_list_last_new_list(i) != tuple_type_list_last_new_list_first) {\n                flag = false\n            }\n        }\n        return flag",
    "        val t = test_tuple.asInstanceOf[Product]\n        val types = t.productIterator.toList.map(x => x.getClass)\n        types.distinct.size == 1",
    "        var flag = true\n        var type_of_first_element = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first_element) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_len = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_len - 1)\n        val tuple_type_list_last_len = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_len - 1)\n        if (tuple_type_list_last_last == \"java.lang.String\") {\n            return true\n        }\n        else {\n            return false\n        }",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass)\n        val test_tuple_list_type_set = test_tuple_list_type.toSet\n        if (test_tuple_list_type_set.size == 1) true\n        else false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n                return flag\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            val tuple_elements = test_tuple.asInstanceOf[Product].productIterator\n            var element_type = tuple_elements.next.getClass.getName\n            for (i <- 1 until tuple_length) {\n                if (element_type != tuple_elements.next.getClass.getName) return false\n            }\n            return true\n        }\n        else return false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        var result = true\n        var first_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != first_type) {\n                result = false\n            }\n        }\n        return result",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_1 = tuple_type_list(1).split(\"\\\\]\")\n        val tuple_type_list_2 = tuple_type_list_1(0).split(\",\")\n        val tuple_type_list_3 = tuple_type_list_2.map(x => x.trim)\n        val tuple_type_list_4 = tuple_type_list_3.map(x => x.split(\"\\\\.\"))\n        val tuple_type_list_5 = tuple_type_list_4.map(x => x(x.length - 1))\n        val tuple_type_list_6 = tuple_type_list_5.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_7 = tuple_type_list_6.map(x => x(x.length - 1))\n        val tuple_type_list_8 = tuple_type_list_7.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_9 = tuple_type_list_8.map(x => x(x.length - 1))\n        val tuple_type_list_10 = tuple_type_list_9.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_11 = tuple_type_list_10.map(x => x(x.length - 1))\n        val tuple_type_list_12 = tuple_type_list_11.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_13 = tuple_type_list_12.map(x => x(x.length - 1))\n        val tuple_type_list_14 = tuple_type_list_13.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_15 = tuple_type_list_14.map(x => x(x.length - 1))\n        val tuple_type_list_16 = tuple_type_list_15.map(x => x.split(\"\\\\$\"))\n        val tuple",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.String\", \"java.lang.Integer\", \"java.lang.Double\", \"java.lang.Boolean\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var flag = true\n        val tuple_type = test_tuple.getClass.getName\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_array = tuple_type.split(\"\\\\[\")\n        val tuple_type_array_length = tuple_type_array.length\n        if (tuple_type_array_length == 1) {\n            return true\n        }\n        else {\n            val tuple_type_array_last = tuple_type_array(tuple_type_array_length - 1)\n            val tuple_type_array_last_array = tuple_type_array_last.split(\"\\\\]\")\n            val tuple_type_array_last_array_first = tuple_type_array_last_array(0)\n            val tuple_type_array_last_array_first_array = tuple_type_array_last_array_first.split(\"\\\\.\")\n            val tuple_type_array_last_array_first_array_length = tuple_type_array_last_array_first_array.length\n            val tuple_type_array_last_array_first_array_last = tuple_type_array_last_array_first_array(tuple_type_array_last_array_first_array_length - 1)\n            val tuple_type_array_last_array_first_array_last_array = tuple_type_array_last_array_first_array_last.split(\"\\\\$\")\n            val tuple_type_array_last_array_first_array_last_array_length = tuple_type_array_last_array_first_array_last_array.length\n            val tuple_type_array_last_array_first_array_last_array_last = tuple_type_array_last_array_first_array_last_array(tuple_type_array_last_array_first_array_last_array_length - 1)\n            val tuple_type_array_last_array_first_array_last_array_last_array = tuple_type_array_last_array_first_array_last_array_last.split(\"\\\\$\")\n            val tuple_type_array_last_array_first_array_last_array_last_array_length = tuple_type_array_last",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        if (tuple_type_list_length == 1) {\n            return true\n        }\n        for (i <- 1 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(i-1)) {\n                return false\n            }\n        }\n        return true",
    "        var flag = true\n        var i = 0\n        var type_ref = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        while (i < test_tuple.asInstanceOf[Product].productArity && flag) {\n            if (type_ref != test_tuple.asInstanceOf[Product].productElement(i).getClass) {\n                flag = false\n            }\n            i += 1\n        }\n        flag",
    "        val test_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_type = test_list(0).getClass\n        for (i <- test_list) {\n            if (i.getClass != test_type) {\n                return false\n            }\n        }\n        return true",
    "        val test_tuple_type = test_tuple.getClass.getName\n        if (test_tuple_type == \"scala.Tuple2\") {\n            val t1 = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.getName\n            if (t1_type == t2_type) true\n            else false\n        }\n        else if (test_tuple_type == \"scala.Tuple3\") {\n            val t1 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.getName\n            val t3_type = t1._3.getClass.getName\n            if (t1_type == t2_type && t2_type == t3_type) true\n            else false\n        }\n        else if (test_tuple_type == \"scala.Tuple4\") {\n            val t1 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.getName\n            val t3_type = t1._3.getClass.getName\n            val t4_type = t1._4.getClass.getName\n            if (t1_type == t2_type && t2_type == t3_type && t3_type == t4_type) true\n            else false\n        }\n        else if (test_tuple_type == \"scala.Tuple5\") {\n            val t1 = test_tuple.asInstanceOf[Tuple5[Any, Any, Any, Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.getName\n            val t3_type = t1._",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        return false",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type == \"scala.Tuple2\") {\n            val tuple_type_1 = test_tuple.asInstanceOf[Tuple2[Any, Any]]._1.getClass.getName\n            val tuple_type_2 = test_tuple.asInstanceOf[Tuple2[Any, Any]]._2.getClass.getName\n            if (tuple_type_1 == tuple_type_2) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else if (tuple_type == \"scala.Tuple3\") {\n            val tuple_type_1 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._1.getClass.getName\n            val tuple_type_2 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._2.getClass.getName\n            val tuple_type_3 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._3.getClass.getName\n            if (tuple_type_1 == tuple_type_2 && tuple_type_2 == tuple_type_3) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else if (tuple_type == \"scala.Tuple4\") {\n            val tuple_type_1 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._1.getClass.getName\n            val tuple_type_2 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._2.getClass.getName\n            val tuple_type_3 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._3.getClass.getName\n            val tuple_type_4 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._4.getClass.getName\n            if (tuple_type_1 == tuple",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_name = tuple_type.substring(tuple_type.indexOf(\"[\") + 1, tuple_type.indexOf(\";\"))\n        val tuple_type_name_short = tuple_type_name.substring(tuple_type_name.lastIndexOf(\".\") + 1)\n        val tuple_type_name_short_short = tuple_type_name_short.substring(0, 1).toLowerCase + tuple_type_name_short.substring(1)\n        val tuple_type_name_short_short_short = tuple_type_name_short_short.substring(0, tuple_type_name_short_short.length - 1)\n        val tuple_type_name_short_short_short_short = tuple_type_name_short_short_short.substring(0, 1).toUpperCase + tuple_type_name_short_short_short.substring(1)\n        val tuple_type_name_short_short_short_short_short = tuple_type_name_short_short_short_short + \"s\"\n        val tuple_type_name_short_short_short_short_short_short = tuple_type_name_short_short_short_short_short.substring(0, 1).toLowerCase + tuple_type_name_short_short_short_short_short.substring(1)\n        val tuple_type_name_short_short_short_short_short_short_short = tuple_type_name_short_short_short_short_short_short.substring(0, tuple_type_name_short_short_short_short_short_short.length - 1)\n        val tuple_type_name_short_short_short_short_short_short_short_short = tuple_type_name_short_short_short_short_short_short_short.substring(0, 1).toUpperCase + tuple_type_name_short_short_short_short_short_short_short.substring(1)\n        val tuple_type_name_short_short_short_short_short_short",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        for (i <- type_list) {\n            if (i != type_list(0)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n        if (tuple._1.isInstanceOf[Int] && tuple._2.isInstanceOf[Int] && tuple._3.isInstanceOf[Int])\n            return true\n        else\n            return false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\", \"java.lang.Boolean\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        return false",
    "        var flag = true\n        var temp = test_tuple.asInstanceOf[Product].productIterator.toList\n        var temp_type = temp(0).getClass\n        for (i <- 1 until temp.length) {\n            if (temp(i).getClass != temp_type) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        var flag = true\n        var prev_type = test_tuple.getClass.getName\n        for (i <- 0 to test_tuple.productArity - 1) {\n            if (test_tuple.productElement(i).getClass.getName != prev_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_split = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_split_2 = test_tuple_type_split(1).split(\"\\\\]\")\n        val test_tuple_type_split_3 = test_tuple_type_split_2(0).split(\",\")\n        var flag = true\n        for (i <- 0 until test_tuple_type_split_3.length) {\n            if (test_tuple_type_split_3(i) != test_tuple_type_split_3(0)) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag"
  ]
}