{
  "name": "mbpp_120_max_product_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    def maxProductTuple(list1 : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxProductTuple((List[Long]((2l, 7l), (2l, 6l), (1l, 8l), (4l, 9l)))) == (36l));\n    assert(maxProductTuple((List[Long]((10l, 20l), (15l, 2l), (5l, 10l)))) == (200l));\n    assert(maxProductTuple((List[Long]((11l, 44l), (10l, 15l), (20l, 5l), (12l, 9l)))) == (484l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list3.zip(list2)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => (x(0) * x(1)).abs)\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2 zip list3\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.reduce(_ * _))\n        list3.max",
    "        var max = Long.MinValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        list4.map(x => x._1 * x._2).max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val prod = abs(list1(i) * list1(j))\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                max = max(max, list1(i) * list1(j))\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list3.zip(list2)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.reduce(_ * _))\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => (x(0), x(1), x(0) * x(1)))\n        list3.maxBy(x => x._3)._3",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val prod = list1(i) * list1(j)\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list = list1.sorted\n        val n = list.length\n        val max1 = list(n - 1) * list(n - 2)\n        val max2 = list(0) * list(1)\n        max(max1, max2)",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.size) {\n            for (j <- i + 1 until list1.size) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1)).max\n        list3",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list3.zip(list2)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val prod = abs(list1(i) * list1(j))\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list = list1.sorted\n        val max = list.last\n        val min = list.head\n        val max2 = list.init.last\n        val min2 = list.tail.head\n        max(max * max2, min * min2)",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        list4.map(x => x._1 * x._2).max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                max = max max abs(list1(i) * list1(j))\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = Long.MinValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                max = max(max, list1(i) * list1(j))\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 to list1.length - 1) {\n            for (j <- i + 1 to list1.length - 1) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list3.zip(list2)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list = list1.map(x => x.abs)\n        val list2 = list.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        val list2 = list1.sorted\n        val max = list2.last\n        val min = list2.head\n        max * min",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        val list5 = list4.sorted\n        list5.last",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list3.zip(list2)\n        list4.map(x => x._1 * x._2).max",
    "        var maxProduct : Long = 0\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list = list1.sortWith(_ < _)\n        val n = list.size\n        val max1 = list(n - 1) * list(n - 2)\n        val max2 = list(0) * list(1)\n        if (max1 > max2) max1 else max2",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                max = max(max, list1(i) * list1(j))\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val max1 = list2.last * list2(list2.length - 2)\n        val max2 = list2.head * list2(1)\n        max(max1, max2)",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list2 = list1.map(x => x * x)\n        val list3 = list1.zip(list2)\n        val list4 = list3.map(x => x._1 * x._2)\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        val list5 = list4.sorted\n        list5.last",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        return max",
    "        val list2 = list1.map(x => (x, x * x))\n        val list3 = list2.combinations(2).toList\n        val list4 = list3.map(x => (x(0)._1 * x(1)._1, x(0)._2 * x(1)._2))\n        val list5 = list4.map(x => (x._1, x._2, abs(x._1 - x._2)))\n        val list6 = list5.sortBy(x => x._3)\n        list6(0)._1",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.map(x => (x, x * x))\n        val list3 = list2.combinations(2).toList\n        val list4 = list3.map(x => (x(0)._1 * x(1)._1, x(0)._2 * x(1)._2))\n        val list5 = list4.filter(x => x._1 > 0 && x._2 > 0)\n        if (list5.length == 0) 0 else list5.maxBy(x => x._1)._1",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                max = max(max, list1(i) * list1(j))\n            }\n        }\n        return max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        val list4 = list3.filter(x => x > 0)\n        if (list4.isEmpty) 0 else list4.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                max = max(max, abs(list1(i) * list1(j)))\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list3.zip(list2)\n        list4.map(x => x._1 * x._2).max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 to list1.length - 1) {\n            for (j <- i + 1 to list1.length - 1) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.map(x => (x, x * x))\n        val list3 = list2.combinations(2).toList\n        val list4 = list3.map(x => (x(0)._1 * x(1)._1, x(0)._2 * x(1)._2))\n        val list5 = list4.map(x => if (x._1 > 0) x._1 else x._2)\n        list5.max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list3.zip(list2)\n        list4.map(x => x._1 * x._2).max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var maxProduct : Long = 0\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = Long.MinValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        return maxProduct",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        return maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        list4.map(x => x._1 * x._2).max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val prod = abs(list1(i) * list1(j))\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                maxProduct = max(maxProduct, list1(i) * list1(j))\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = Long.MinValue\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        return max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list3.zip(list2)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.map(x => (x, x * x))\n        val list3 = list2.combinations(2).map(x => (x(0)._1 * x(1)._1, x(0)._2 * x(1)._2)).toList\n        val list4 = list3.sortWith((x, y) => x._2 > y._2)\n        list4(0)._1",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val prod = abs(list1(i) * list1(j))\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                max = max(max, list1(i) * list1(j))\n            }\n        }\n        return max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max"
  ]
}