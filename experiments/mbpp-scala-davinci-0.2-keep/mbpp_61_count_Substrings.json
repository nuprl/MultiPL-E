{
  "name": "mbpp_61_count_Substrings",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count the number of substrings with the sum of digits equal to their length.\n    def countSubstrings(s : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSubstrings((\"112112\")) == (6l));\n    assert(countSubstrings((\"111\")) == (6l));\n    assert(countSubstrings((\"1101112\")) == (12l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                var sum = 0\n                for (k <- i until j) {\n                    sum += s(k).toInt - '0'.toInt\n                }\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (sumDigits(s.substring(i, j + 1)) == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.toString.toInt).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var result = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) result += 1\n            }\n        }\n        result",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n; j <- 1 to i) {\n            dp(i)(j) = dp(i - 1)(j) + dp(i - 1)(j - 1)\n            if (j == s(i - 1) - '0') dp(i)(j) += 1\n        }\n        dp(n).sum",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i to s.length - 1) {\n                if (s.substring(i, j + 1).map(x => x.asDigit).sum == s.substring(i, j + 1).length) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(c => c - '0').sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                var sum = 0\n                for (k <- i to j) {\n                    sum += s(k).asDigit\n                }\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n; j <- 1 to n) {\n            dp(i)(j) = dp(i - 1)(j) + dp(i - 1)(j - 1)\n        }\n        var result = 0L\n        for (i <- 1 to n) {\n            var sum = 0\n            for (j <- i to n) {\n                sum += s(j - 1) - '0'\n                if (sum == j - i + 1) result += 1\n            }\n        }\n        result",
    "        var count : Long = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.toString.toInt).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        return count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                val sum = sub.map(x => x.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                var sum = 0\n                for (k <- i to j) {\n                    sum += s(k).asDigit\n                }\n                if (sum == (j - i + 1)) count += 1\n            }\n        }\n        return count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.toCharArray.map(x => x.toString.toInt).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.toCharArray.map(x => x.toString.toInt).sum) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        return count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(i) = 1\n        for (i <- 0 to n) {\n            for (j <- i + 1 to n) {\n                val sum = s.substring(i, j).map(_.toString.toInt).sum\n                if (sum == j - i) dp(i)(j) = dp(i)(j - 1) + 1\n                else dp(i)(j) = dp(i)(j - 1)\n            }\n        }\n        dp(0)(n)",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x - '0').sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(c => c - '0').sum == j - i) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.toString.toInt).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                val sum = sub.map(x => x.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(c => c.toInt - '0'.toInt).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(x => x.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).asDigit\n                if (sum == (j - i + 1)) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var ans = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) ans += 1\n            }\n        }\n        ans",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(x => x.asDigit).sum == (j - i + 1)) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(c => c - '0').sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, 10)\n        for (i <- 0 until 10) dp(0)(i) = 1\n        for (i <- 1 to n) {\n            for (j <- 0 until 10) {\n                dp(i)(j) = dp(i - 1)(j)\n                if (i - 1 >= 0 && j - (s(i - 1) - '0') >= 0) dp(i)(j) += dp(i - 1)(j - (s(i - 1) - '0'))\n            }\n        }\n        var result = 0L\n        for (i <- 1 to n) result += dp(i)(i)\n        result",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(c => c.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            var sum = 0\n            for (j <- i to 1 by -1) {\n                sum += s(j - 1) - '0'\n                if (sum == i - j + 1) dp(i) += 1\n            }\n        }\n        dp(n)",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i to s.length - 1) {\n                var sum = 0\n                for (k <- i to j) {\n                    sum += s(k).asDigit\n                }\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == (j - i + 1)) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            var sum = 0\n            for (j <- i to n - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == (j - i + 1)) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.toString.toInt).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(_.asDigit).sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val sum = s.substring(i, j + 1).map(x => (x - '0').toInt).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(x => x.toString.toInt).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, 10)\n        for (i <- 0 until n) {\n            for (j <- 0 until 10) {\n                dp(i + 1)(j) = dp(i)(j)\n            }\n            dp(i + 1)(s(i) - '0') += 1\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n + 1) {\n                var sum = 0\n                for (k <- 0 until 10) {\n                    sum += dp(j)(k) - dp(i)(k)\n                }\n                if (sum == j - i) ans += 1\n            }\n        }\n        ans",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                var sum = 0\n                for (k <- i to j - 1) {\n                    sum += s(k).toInt - '0'.toInt\n                }\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i to s.length - 1) {\n                if (s.substring(i, j + 1).map(x => x.toInt - '0'.toInt).sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(c => c.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).asDigit\n                if (sum == (j - i + 1)) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(c => c.asDigit).sum == s.substring(i, j).length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == s.substring(i, j).length) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                val sum = s.substring(i, j + 1).map(_.asDigit).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.toCharArray.map(x => x.toString.toInt).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == s.substring(i, j).length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.toString.toInt).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i to s.length - 1) {\n                if (s.substring(i, j + 1).map(c => c.toString.toInt).sum == s.substring(i, j + 1).length) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i to s.length - 1) {\n                val sum = s.substring(i, j + 1).map(x => x.toInt - '0'.toInt).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                var sum = 0\n                for (k <- i to j) {\n                    sum += s(k).toInt - '0'.toInt\n                }\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                val sum = sub.map(x => x.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(i) = 1\n        for (i <- 0 to n - 1) dp(i)(i + 1) = 1\n        for (i <- 0 to n - 2) dp(i)(i + 2) = if (s(i) == s(i + 1)) 2 else 1\n        for (i <- 0 to n - 3) {\n            for (j <- i + 3 to n) {\n                if (s(i) == s(j - 1)) dp(i)(j) = dp(i + 1)(j - 1) + dp(i)(j - 1)\n                else dp(i)(j) = dp(i)(j - 1)\n            }\n        }\n        var result = 0L\n        for (i <- 0 to n - 1) {\n            val sum = s.substring(i).map(x => x - '0').sum\n            if (sum == s.substring(i).length) result += dp(i)(n)\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0L\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(_.asDigit).sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(x => x.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                var sum = 0\n                for (k <- i until j) {\n                    sum += s(k).asDigit\n                }\n                if (sum == j - i) count += 1\n            }\n        }\n        return count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            var sum = 0\n            for (j <- i to 1 by -1) {\n                sum += s(j - 1) - '0'\n                if (sum == i - j + 1) dp(i) += 1\n            }\n        }\n        dp(n)",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                val sum = sub.map(x => x.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                val sum = s.substring(i - 1, j).map(_.asDigit).sum\n                if (sum == j - i + 1) dp(i)(j) = 1\n                dp(i)(j) += dp(i)(j - 1)\n            }\n        }\n        dp(n).sum",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == (j - i)) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                dp(i)(j) = dp(i)(j - 1)\n                if (s(i - 1) != '0') dp(i)(j) += dp(i - 1)(j - 1)\n            }\n        }\n        var result = 0L\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                if (i.toString.map(x => x.asDigit).sum == j - i + 1) result += dp(j)(j - i + 1)\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                val sub = s.substring(i, j + 1)\n                if (sub.map(_.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(x => x - '0').sum == sub.length) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                val sub = s.substring(i, j + 1)\n                if (sub.map(x => x.asDigit).sum == sub.length) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to i) {\n                val sum = s.substring(i - j, i).map(c => c - '0').sum\n                if (sum == j) dp(i)(j) = dp(i - j)(0) + dp(i - j)(j)\n                else dp(i)(j) = dp(i - j)(j)\n            }\n        }\n        dp(n).sum",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = s(i).toInt - '0'\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                dp(i)(j) = dp(i)(j - 1) + dp(j)(j)\n            }\n        }\n        var res = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (dp(i)(j) == j - i + 1) res += 1\n            }\n        }\n        res",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(c => c.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 until n) {\n            dp(i)(i) = s(i) - '0'\n            for (j <- i + 1 until n) {\n                dp(i)(j) = dp(i)(j - 1) + s(j) - '0'\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (dp(i)(j) == j - i + 1) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                val sum = sub.map(x => x.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == (j - i + 1)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = s(i).asDigit\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(i)(j) = dp(i)(j - 1) + s(j).asDigit\n            }\n        }\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (dp(i)(j) == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(i) = 1\n        for (i <- 0 to n - 1) dp(i)(i + 1) = 1\n        for (i <- 2 to n) {\n            for (j <- 0 to n - i) {\n                val k = j + i\n                dp(j)(k) = dp(j + 1)(k) + dp(j)(k - 1) - dp(j + 1)(k - 1)\n                if (s(j) == s(k - 1)) dp(j)(k) += 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 to n) {\n            for (j <- i to n) {\n                if (i == j) result += dp(i)(j)\n                else result += dp(i)(j) * (dp(i)(j) - 1) / 2\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(x => x.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                val sum = s.substring(i, j + 1).map(_.asDigit).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(x => x.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            var sum = 0\n            for (j <- i to n - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 until s.length + 1) {\n                val sum = s.substring(i, j).map(c => c.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 to n) {\n                dp(i)(j) = dp(i)(j - 1) + dp(i + 1)(j) - dp(i + 1)(j - 1)\n                if (s(i) == s(j - 1)) dp(i)(j) += 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 to n) {\n            for (j <- i + 1 to n) {\n                if (dp(i)(j) == j - i) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                var sum = 0\n                for (k <- i to j) {\n                    sum += s(k).asDigit\n                }\n                if (sum == (j - i + 1)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += (s(j) - '0')\n                if (sum == (j - i + 1)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.toString.toInt).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x - '0').sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                var sum = 0\n                for (k <- i to j) {\n                    sum += s(k).toInt - '0'.toInt\n                }\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count"
  ]
}