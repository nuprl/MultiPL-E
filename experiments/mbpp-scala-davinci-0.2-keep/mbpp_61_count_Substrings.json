{
  "name": "mbpp_61_count_Substrings",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count the number of substrings with the sum of digits equal to their length.\n    def countSubstrings(s : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSubstrings((\"112112\")) == (6l));\n    assert(countSubstrings((\"111\")) == (6l));\n    assert(countSubstrings((\"1101112\")) == (12l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                var sum = 0\n                for (k <- i until j) {\n                    sum += s(k).toInt - '0'.toInt\n                }\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (sumDigits(s.substring(i, j + 1)) == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.toString.toInt).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var result = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) result += 1\n            }\n        }\n        result",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n; j <- 1 to i) {\n            dp(i)(j) = dp(i - 1)(j) + dp(i - 1)(j - 1)\n            if (j == s(i - 1) - '0') dp(i)(j) += 1\n        }\n        dp(n).sum",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i to s.length - 1) {\n                if (s.substring(i, j + 1).map(x => x.asDigit).sum == s.substring(i, j + 1).length) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(c => c - '0').sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                var sum = 0\n                for (k <- i to j) {\n                    sum += s(k).asDigit\n                }\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count"
  ]
}