{
  "name": "mbpp_119_search",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) arr(start)\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else search(arr, start, mid)\n                }\n                else {\n                    if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        else if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        else {\n            val mid = arr.length / 2\n            if (arr(mid) == arr(mid - 1)) search(arr.slice(0, mid))\n            else if (arr(mid) == arr(mid + 1)) search(arr.slice(mid + 1, arr.length))\n            else arr(mid)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7jgahncf.scala:16)\n\tat Problem.main(tmp7jgahncf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2u6_pz8w.scala:20)\n\tat Problem.main(tmp2u6_pz8w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, arr.length))\n            else return search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphy25rseg.scala:23)\n\tat Problem.main(tmphy25rseg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(n - 1) != arr(n - 2)) return arr(n - 1)\n        var left = 1\n        var right = n - 2\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 2\n                else right = mid - 2\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        var i = 0\n        while (i < n - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(n - 1) != arr(n - 2)) return arr(n - 1)\n        var left = 1\n        var right = n - 2\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (n == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = n / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, n))\n            else search(arr.slice(mid, n))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplfb7dy07.scala:21)\n\tat Problem.main(tmplfb7dy07.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n            else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n            else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 1\n        var high = arr.length - 2\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) low = mid + 1\n            else high = mid - 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(n - 1) != arr(n - 2)) return arr(n - 1)\n        var left = 1\n        var right = n - 2\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid - 1)) right = mid - 2\n                else left = mid + 2\n            } else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (m == 0) {\n                if (arr(m) != arr(m + 1)) return arr(m)\n                else l = m + 1\n            } else if (m == arr.length - 1) {\n                if (arr(m) != arr(m - 1)) return arr(m)\n                else r = m - 1\n            } else {\n                if (arr(m) != arr(m - 1) && arr(m) != arr(m + 1)) return arr(m)\n                else if (arr(m) == arr(m - 1)) l = m + 1\n                else r = m - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuz39hzab.scala:25)\n\tat Problem.main(tmpuz39hzab.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var start = 0\n        var end = arr.length - 1\n        while (start <= end) {\n            val mid = (start + end) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) end = mid - 2\n                else start = mid + 1\n            }\n            else {\n                if (mid % 2 == 0) start = mid + 2\n                else end = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n            else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n            else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) i += 2\n            else return arr(i)\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var l = 0\n        var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) != arr(m - 1) && arr(m) != arr(m + 1)) return arr(m)\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) l = m + 1\n                else r = m - 1\n            } else {\n                if (arr(m) == arr(m - 1)) l = m + 1\n                else r = m - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 1)\n                }\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123440,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptca8e2qh.scala:28)\n\tat Problem.main(tmptca8e2qh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) i += 2\n            else return arr(i)\n        }\n        return arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else {\n                if ((end - mid) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 1, arr.length - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = -1\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ntaekj2.scala:10:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    result = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ntaekj2.scala:15:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    result = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ntaekj2.scala:20:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    result = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], i : Int) : Long = {\n            if (i == arr.length) -1\n            else if (i == arr.length - 1) arr(i)\n            else if (arr(i) == arr(i + 1)) search(arr, i + 2)\n            else arr(i)\n        }\n        search(arr, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n            else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n            else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpldrkwxie.scala:23)\n\tat Problem.main(tmpldrkwxie.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, arr.length))\n            else return search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphy25rseg.scala:23)\n\tat Problem.main(tmphy25rseg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while(i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) {\n                i += 2\n            } else {\n                return arr(i)\n            }\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 0\n        var high = arr.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - 1) % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n            else {\n                if (mid % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- arr) {\n            if (map(i) == 1) return i\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) result = arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) result = arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) result = arr(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) l = m + 2\n                else r = m\n            } else {\n                if (arr(m) == arr(m - 1)) l = m + 1\n                else r = m - 1\n            }\n        }\n        arr(l)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            }\n            else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            }\n            else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) l = m + 2\n                else r = m - 1\n            } else {\n                if (arr(m) == arr(m - 1)) l = m + 1\n                else r = m - 1\n            }\n        }\n        return arr(l)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmphnu8lx3o.scala:11)\n\tat Problem$.main(tmphnu8lx3o.scala:21)\n\tat Problem.main(tmphnu8lx3o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0 && arr(i) != arr(i + 1)) return arr(i)\n            else if (i == arr.length - 1 && arr(i) != arr(i - 1)) return arr(i)\n            else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmp379xmbo0.scala:10)\n\tat Problem$.main(tmp379xmbo0.scala:16)\n\tat Problem.main(tmp379xmbo0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if (mid % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            var mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var index = 0\n        while (index < arr.length - 1) {\n            if (arr(index) != arr(index + 1)) return arr(index)\n            index += 2\n        }\n        arr(index)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while(i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if (mid % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 0\n        var high = arr.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - low + 1) % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n            else {\n                if ((high - mid + 1) % 2 == 0) high = mid - 1\n                else low = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 1\n        var high = arr.length - 2\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - low) % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n            else {\n                if ((high - mid) % 2 == 0) high = mid - 1\n                else low = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr.head\n        if (arr.length == 2) return if (arr(0) == arr(1)) -1 else arr(0)\n        val mid = arr.length / 2\n        if (arr(mid - 1) == arr(mid)) {\n            if ((mid - 1) % 2 == 0) search(arr.slice(0, mid - 1))\n            else search(arr.slice(mid + 1, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(mid + 2, arr.length))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwmahh11h.scala:20)\n\tat Problem.main(tmpwmahh11h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        var l = 0\n        var r = n - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) l = m + 2\n                else r = m\n            } else {\n                if (arr(m) == arr(m - 1)) l = m + 1\n                else r = m - 1\n            }\n        }\n        arr(l)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) == arr(m - 1)) {\n                if ((m - l) % 2 == 0) r = m - 2\n                else l = m + 1\n            }\n            else if (arr(m) == arr(m + 1)) {\n                if ((r - m) % 2 == 0) l = m + 2\n                else r = m - 1\n            }\n            else return arr(m)\n        }\n        return arr(l)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            val mid = low + (high - low) / 2\n            if (mid == 0 || arr(mid) != arr(mid - 1) && mid == n - 1 || arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) low = mid + 2\n                else high = mid - 2\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) low = mid + 1\n                else high = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgjlk_cca.scala:25)\n\tat Problem.main(tmpgjlk_cca.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 1\n        var high = arr.length - 2\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid - 1)) low = mid + 1\n                else high = mid - 1\n            } else {\n                if (arr(mid) == arr(mid + 1)) low = mid + 1\n                else high = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else arr(1)\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzpg0yqm7.scala:20)\n\tat Problem.main(tmpzpg0yqm7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) i += 2\n            else return arr(i)\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) i += 2\n            else return arr(i)\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        arr.filter(x => arr.count(_ == x) == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) -1 else arr(0)\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqhxwfgu9.scala:20)\n\tat Problem.main(tmpqhxwfgu9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Long, right : Long) : Long = {\n            if (left == right) return arr(left.toInt)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid.toInt) == arr(mid.toInt + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid.toInt) == arr(mid.toInt - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123461,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], index : Int) : Long = {\n            if (index == arr.length - 1) return arr(index)\n            if (arr(index) != arr(index + 1)) return arr(index)\n            search(arr, index + 2)\n        }\n        search(arr, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        arr.foldLeft((0L, 0L))((acc, x) => {\n            if (acc._1 == 0) (x, 0)\n            else if (acc._1 == x) (0, 0)\n            else (acc._1, x)\n        })._1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123461,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) != arr(m - 1) && arr(m) != arr(m + 1)) return arr(m)\n            if (arr(m) == arr(m - 1)) {\n                if (m % 2 == 0) l = m + 1\n                else r = m - 1\n            }\n            else {\n                if (m % 2 == 0) r = m - 1\n                else l = m + 1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123461,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0; var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n            else {\n                if (mid % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123461,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        var i = 0\n        while (i < n - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123461,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], i : Int) : Long = {\n            if (i == arr.length - 1) arr(i)\n            else if (arr(i) == arr(i + 1)) search(arr, i + 2)\n            else arr(i)\n        }\n        search(arr, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (n == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = n / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, n))\n            else return search(arr.slice(mid, n))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjjb_a1cd.scala:24)\n\tat Problem.main(tmpjjb_a1cd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        var left = 0\n        var right = n - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 2\n                else right = mid\n            } else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        arr(left)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) arr(0)\n        else if (arr(0) != arr(1)) arr(0)\n        else if (arr(arr.length - 1) != arr(arr.length - 2)) arr(arr.length - 1)\n        else {\n            val mid = arr.length / 2\n            if (arr(mid) == arr(mid - 1)) search(arr.slice(mid, arr.length))\n            else if (arr(mid) == arr(mid + 1)) search(arr.slice(0, mid))\n            else arr(mid)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 1\n        var high = arr.length - 2\n        while (low <= high) {\n            val mid = low + (high - low) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - 1) % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n            else {\n                if (mid % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var index = 0\n        while (index < arr.length - 1) {\n            if (arr(index) != arr(index + 1)) return arr(index)\n            index += 2\n        }\n        arr(index)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        var i = 0\n        while (i < n - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.size == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.size - 1) != arr(arr.size - 2)) return arr(arr.size - 1)\n        var l = 0\n        var r = arr.size - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) != arr(m - 1) && arr(m) != arr(m + 1)) return arr(m)\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) l = m + 1\n                else r = m - 1\n            } else {\n                if (arr(m) == arr(m - 1)) l = m + 1\n                else r = m - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var start = 0\n        var end = arr.length - 1\n        while (start < end) {\n            val mid = (start + end) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) start = mid + 1\n                else end = mid - 1\n            } else if (arr(mid) == arr(mid + 1)) {\n                if ((end - mid) % 2 == 0) end = mid - 1\n                else start = mid + 1\n            } else return arr(mid)\n        }\n        return arr(start)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmp7bhwglk4.scala:10)\n\tat Problem$.main(tmp7bhwglk4.scala:21)\n\tat Problem.main(tmp7bhwglk4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(n - 1) != arr(n - 2)) return arr(n - 1)\n        var l = 0\n        var r = n - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) != arr(m - 1) && arr(m) != arr(m + 1)) return arr(m)\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) l = m + 1\n                else r = m - 1\n            } else {\n                if (arr(m) == arr(m - 1)) l = m + 1\n                else r = m - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while(i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var i = 1\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        var low = 0\n        var high = n - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (mid == 0 || mid == n - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - 1) % 2 == 0) low = mid + 1\n                else high = mid - 2\n            }\n            else {\n                if (mid % 2 == 0) low = mid + 2\n                else high = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (n == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = n / 2\n        if (arr(mid) == arr(mid - 1)) search(arr.slice(0, mid))\n        else if (arr(mid) == arr(mid + 1)) search(arr.slice(mid + 1, n))\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnoz01or_.scala:15)\n\tat Problem.main(tmpnoz01or_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 1\n        var right = arr.length - 2\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) left = mid + 1\n                else right = mid - 1\n            } else {\n                if (mid % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid - 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbsvw7i7x.scala:19)\n\tat Problem.main(tmpbsvw7i7x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) i += 2\n            else return arr(i)\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if (mid % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        search(arr.slice(1, arr.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) return search(arr, start, mid - 2)\n            else return search(arr, mid + 2, end)\n        }\n        search(arr, 1, arr.length - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(n - 1) != arr(n - 2)) return arr(n - 1)\n        var i = 1\n        while (i < n - 1) {\n            if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = -1\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ntaekj2.scala:10:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    result = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ntaekj2.scala:15:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    result = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ntaekj2.scala:20:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    result = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = -1\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ntaekj2.scala:10:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    result = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ntaekj2.scala:15:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    result = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ntaekj2.scala:20:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    result = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(n - 1) != arr(n - 2)) return arr(n - 1)\n        var i = 1\n        while (i < n - 1) {\n            if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr.last\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - l) % 2 == 0) r = mid - 2\n                else l = mid + 1\n            } else if (arr(mid) == arr(mid + 1)) {\n                if ((r - mid) % 2 == 0) l = mid + 2\n                else r = mid - 1\n            } else return arr(mid)\n        }\n        arr(l)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 0\n        var high = arr.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - 1) % 2 == 0) high = mid - 2\n                else low = mid + 1\n            }\n            else {\n                if (mid % 2 == 0) low = mid + 2\n                else high = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            } else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123461,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var start = 0\n        var end = arr.length - 1\n        while (start <= end) {\n            val mid = (start + end) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) end = mid - 2\n                else start = mid + 1\n            }\n            else {\n                if (mid % 2 == 0) start = mid + 2\n                else end = mid - 1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        search(arr.slice(1, arr.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            } else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l == r) return arr(l)\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                else search(arr, l, m)\n            } else {\n                if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                else search(arr, l, m - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(n - 1) != arr(n - 2)) return arr(n - 1)\n        var l = 0\n        var r = n - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) != arr(m - 1) && arr(m) != arr(m + 1)) return arr(m)\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) l = m + 1\n                else r = m - 1\n            }\n            else {\n                if (arr(m) == arr(m - 1)) l = m + 1\n                else r = m - 1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid - 1))\n            else return search(arr.slice(mid + 1, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 2, arr.length))\n            else return search(arr.slice(0, mid))\n        }\n        else return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 1\n        var high = arr.length - 2\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - low + 1) % 2 == 0) low = mid + 1\n                else high = mid - 1\n            } else {\n                if ((high - mid + 1) % 2 == 0) high = mid - 1\n                else low = mid + 1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0 && arr(i) != arr(i + 1)) return arr(i)\n            else if (i == arr.length - 1 && arr(i) != arr(i - 1)) return arr(i)\n            else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmp379xmbo0.scala:10)\n\tat Problem$.main(tmp379xmbo0.scala:16)\n\tat Problem.main(tmp379xmbo0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) {\n                i += 2\n            } else {\n                return arr(i)\n            }\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        val mid = n / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (n % 2 == 0) search(arr.slice(mid + 1, n))\n            else search(arr.slice(mid, n))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (n % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmpsvm4nuug.scala:13)\n\tat Problem$.main(tmpsvm4nuug.scala:20)\n\tat Problem.main(tmpsvm4nuug.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0 && arr(i) != arr(i + 1)) {\n                result = arr(i)\n                return result\n            } else if (i == arr.length - 1 && arr(i) != arr(i - 1)) {\n                result = arr(i)\n                return result\n            } else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                result = arr(i)\n                return result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$$anonfun$1(tmpvun7po_3.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.search(tmpvun7po_3.scala:18)\n\tat Problem$.main(tmpvun7po_3.scala:22)\n\tat Problem.main(tmpvun7po_3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) result = arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) result = arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) result = arr(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while(i < arr.length - 1) {\n            if(arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            }\n            else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            }\n            else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) == arr(m - 1)) {\n                if ((m - l) % 2 == 0) r = m - 2\n                else l = m + 1\n            }\n            else if (arr(m) == arr(m + 1)) {\n                if ((r - m) % 2 == 0) l = m + 2\n                else r = m - 1\n            }\n            else return arr(m)\n        }\n        return arr(l)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 1\n        var high = arr.length - 2\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - 1) % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n            else {\n                if (mid % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        arr.groupBy(identity).filter(x => x._2.length == 1).keys.toList.head\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) i += 2\n            else return arr(i)\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        search(arr.slice(1, arr.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) i += 2\n            else return arr(i)\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}