{
  "name": "mbpp_62_smallest_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft(min)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 1) xs.head\n        else min(xs.head, smallestNum(xs.tail))\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 1) xs(0)\n        else min(xs(0), smallestNum(xs.tail))\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft(min)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.isEmpty) throw new Exception(\"Empty list\")\n        else xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (i <- 1 until xs.length) {\n            if (xs(i) < min) min = xs(i)\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.isEmpty) 0\n        else xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 0) {\n            return 0\n        }\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) {\n                min = x\n            }\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.foldLeft(Long.MaxValue)((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var smallest = xs(0)\n        for (x <- xs) {\n            if (x < smallest) smallest = x\n        }\n        smallest\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (i <- 1 to xs.length - 1) {\n            if (xs(i) < min) min = xs(i)\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 1) xs(0)\n        else min(xs(0), smallestNum(xs.tail))\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.foldLeft(Long.MaxValue)((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var smallest = xs(0)\n        for (x <- xs) {\n            if (x < smallest) smallest = x\n        }\n        smallest\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) if (x < min) min = x\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.foldLeft(Long.MaxValue)((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.isEmpty) 0\n        else xs.reduceLeft(_ min _)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft(_ min _)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft(min)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => min(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 1) xs(0)\n        else min(xs(0), smallestNum(xs.tail))\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.foldLeft(Long.MaxValue)((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 0)\n            return 0\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min)\n                min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs.head\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (i <- 1 until xs.length) {\n            if (xs(i) < min) min = xs(i)\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 1) xs.head\n        else min(xs.head, smallestNum(xs.tail))\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (i <- 1 until xs.length) {\n            if (xs(i) < min) min = xs(i)\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 0) throw new Exception(\"Empty List\")\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 0) return 0\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft(_ min _)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var smallest = xs(0)\n        for (x <- xs) {\n            if (x < smallest) smallest = x\n        }\n        smallest\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft(_ min _)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var smallest = xs(0)\n        for (x <- xs) {\n            if (x < smallest) smallest = x\n        }\n        smallest\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.foldLeft(Long.MaxValue)((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var smallest = xs(0)\n        for (x <- xs) {\n            if (x < smallest) smallest = x\n        }\n        smallest\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 1) xs(0)\n        else min(xs(0), smallestNum(xs.tail))\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var smallest : Long = xs(0)\n        for (x <- xs) {\n            if (x < smallest) smallest = x\n        }\n        smallest\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) if (x < min) min = x\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 0) 0\n        else xs.reduceLeft(_ min _)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((a, b) => if (a < b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) {\n                min = x\n            }\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (i <- 1 until xs.length) {\n            if (xs(i) < min) min = xs(i)\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        if (xs.length == 0) return 0\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft(min)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft(_ min _)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.reduceLeft((x, y) => if (x < y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        xs.min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = Long.MaxValue\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (i <- 1 until xs.length) {\n            if (xs(i) < min) min = xs(i)\n        }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1666124213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n        var min = xs(0)\n        for (x <- xs) {\n            if (x < min) min = x\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n",
      "timestamp": 1665510668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}