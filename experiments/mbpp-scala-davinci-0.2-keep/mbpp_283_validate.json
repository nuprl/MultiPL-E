{
  "name": "mbpp_283_validate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val digits = n.toString.map(_.asDigit)\n        val freq = new Array[Int](10)\n        for (d <- digits) freq(d) += 1\n        for (i <- 0 until 10) if (freq(i) > i) return false\n        return true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(x => x.toString.toInt).toList\n        val freq = digits.groupBy(x => x).map(x => (x._1, x._2.length)).toList\n        val freq2 = freq.map(x => (x._1, x._2 <= x._1))\n        freq2.forall(x => x._2)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(x => x.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(x => counts(x) <= x)",
    "        val s = n.toString\n        val m = new HashMap[Char, Int]\n        for (c <- s) {\n            if (m.contains(c)) m(c) += 1\n            else m(c) = 1\n        }\n        for (c <- s) {\n            if (m(c) > c.toString.toInt) return false\n        }\n        return true",
    "        var freq = Array.fill(10)(0)\n        var m = n\n        while (m > 0) {\n            freq(m % 10) += 1\n            m /= 10\n        }\n        for (i <- 0 to 9) {\n            if (freq(i) > i) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        frequency.forall(x => x._2 <= x._1)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toSet\n        digits.forall(digit => digits.count(_ == digit) <= digit)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        frequency.forall(x => x._1 >= x._2)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.toString.toInt)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val m = n.toString.map(_.asDigit).groupBy(identity).mapValues(_.size)\n        m.forall(x => x._1 >= x._2)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(freq(_) <= _)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(digit => freq(digit) <= digit)",
    "        val digits = n.toString.map(_.asDigit)\n        val digitCounts = digits.groupBy(identity).mapValues(_.size)\n        digitCounts.forall(x => x._2 <= x._1)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        frequency.forall(x => x._1 >= x._2)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val count = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => count(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(x => x.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(x => freq(x) <= x)",
    "        val digits = n.toString.map(x => x.asDigit)\n        val frequency = digits.groupBy(x => x).map(x => (x._1, x._2.length))\n        digits.forall(x => frequency(x) <= x)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(frequency(_) <= _)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val frequencies = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => frequencies(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => frequency(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.toString.toInt).groupBy(identity).mapValues(_.size)\n        digits.forall(x => x._2 <= x._1)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val counts = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            counts(m % 10) += 1\n            m /= 10\n        }\n        for (i <- 0 until 10) {\n            if (counts(i) > i) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(c => c.toString.toInt).toList\n        val digitCounts = digits.groupBy(identity).mapValues(_.size)\n        digitCounts.forall(x => x._1 >= x._2)",
    "        val digits = n.toString.map(_.toString.toInt)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(c => c.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val digitFreq = digits.groupBy(identity).mapValues(_.size)\n        digitFreq.forall(x => x._1 >= x._2)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        freq.forall(x => x._1 >= x._2)",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        freq.forall(x => x._1 >= x._2)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val digitCounts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(digit => digitCounts(digit) <= digit)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        digits.forall(d => digits.count(_ == d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(frequency(_) <= _)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(x => x.asDigit)\n        val freq = digits.groupBy(x => x).map(x => (x._1, x._2.length))\n        digits.forall(x => freq(x) <= x)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val d = n.toString.map(_.asDigit)\n        val f = d.groupBy(identity).mapValues(_.size)\n        d.forall(f(_) <= _)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val digitCounts = digits.groupBy(identity).mapValues(_.size)\n        digitCounts.forall(x => x._1 >= x._2)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.toString.toInt)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.length)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        for (digit <- digits) {\n            if (freq(digit) > digit) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val m = n.toString.groupBy(identity).mapValues(_.size)\n        m.forall(x => x._2 <= x._1.asDigit)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        freq.forall(x => x._1 >= x._2)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        frequency.forall(x => x._2 <= x._1)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        frequency.forall(x => x._2 <= x._1)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val s = n.toString\n        val m = new HashMap[Char, Int]\n        for (c <- s) {\n            if (m.contains(c)) m(c) += 1 else m(c) = 1\n        }\n        for (c <- s) {\n            if (m(c) > c.toString.toInt) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        freq.forall(x => x._2 <= x._1)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(freq(_) <= _)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        frequency.forall(x => x._2 <= x._1)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val digitCounts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(digit => digitCounts(digit) <= digit)",
    "        val freq = Array.fill(10)(0)\n        var n2 = n\n        while (n2 > 0) {\n            val d = n2 % 10\n            freq(d) += 1\n            n2 /= 10\n        }\n        for (i <- 1 to 9) {\n            if (freq(i) > i) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freqs = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freqs(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.length)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val frequency = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            val d = m % 10\n            frequency(d) += 1\n            m /= 10\n        }\n        for (i <- 0 to 9) {\n            if (frequency(i) > i) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val m = n.toString.groupBy(identity).mapValues(_.size).withDefaultValue(0)\n        for (i <- 0 to 9) {\n            if (m(i.toString) > i) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val s = n.toString\n        val m = new HashMap[Char, Int]\n        for (c <- s) {\n            if (m.contains(c)) m(c) += 1\n            else m(c) = 1\n        }\n        for (c <- s) {\n            if (m(c) > c.asDigit) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        digits.map(x => digits.count(_ == x)).zip(digits).forall(x => x._1 <= x._2)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(frequency(_) <= _)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.length)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.toCharArray.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)"
  ]
}