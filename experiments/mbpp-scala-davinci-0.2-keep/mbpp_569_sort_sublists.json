{
  "name": "mbpp_569_sort_sublists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1.map(x => x.sorted)",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sortWith((x, y) => x < y))",
    "        list1.map(list2 => list2.sorted)",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sortWith(_.length < _.length))",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sorted)",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sorted)",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sorted)",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sortWith((x, y) => x < y))",
    "        list1.map(x => x.sortWith(_ < _))",
    "        list1.map(x => x.sorted)"
  ]
}