{
  "name": "mbpp_629_Split",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find even numbers from a list of numbers.\n    def Split(list : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Split((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](2l.toLong, 4l.toLong))));\n    assert(Split((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 0l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))));\n    assert(Split((List[Long](8l.toLong, 12l.toLong, 15l.toLong, 19l.toLong))).equals((List[Long](8l.toLong, 12l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var evenList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evenList = evenList :+ i\n            }\n        }\n        return evenList",
    "        var evenList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evenList = evenList :+ i\n            }\n        }\n        return evenList",
    "        var evenList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evenList = evenList :+ i\n            }\n        }\n        return evenList",
    "        var evens = List[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evens = evens :+ i\n            }\n        }\n        evens",
    "        var evens = List[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evens = evens :+ i\n            }\n        }\n        return evens",
    "        var evenList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evenList = evenList :+ i\n            }\n        }\n        evenList",
    "        var even = List[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                even = even :+ i\n            }\n        }\n        return even",
    "        var evens = List[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evens = evens :+ i\n            }\n        }\n        return evens",
    "        var evens = List[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evens = evens :+ i\n            }\n        }\n        return evens",
    "        var evenList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evenList = evenList :+ i\n            }\n        }\n        return evenList",
    "        var evenList = List[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evenList = evenList :+ i\n            }\n        }\n        evenList",
    "        var evenList = List[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evenList = evenList :+ i\n            }\n        }\n        return evenList",
    "        var evens = List[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evens = evens :+ i\n            }\n        }\n        evens",
    "        var even : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 0) even = even :+ i\n        }\n        return even",
    "        var evens = List[Long]()\n        for(i <- list) {\n            if(i % 2 == 0) {\n                evens = evens :+ i\n            }\n        }\n        evens",
    "        var evenList : List[Long] = List()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evenList = evenList :+ i\n            }\n        }\n        return evenList",
    "        var evenList = List[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evenList = evenList :+ i\n            }\n        }\n        evenList",
    "        var even = List[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                even = even :+ i\n            }\n        }\n        even",
    "        var evenList = new ListBuffer[Long]()\n        for (i <- list) {\n            if (i % 2 == 0) {\n                evenList += i\n            }\n        }\n        return evenList.toList",
    "        var evens = List[Long]()\n        for (num <- list) {\n            if (num % 2 == 0) {\n                evens = num :: evens\n            }\n        }\n        return evens"
  ]
}