{
  "name": "mbpp_238_number_of_substrings",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count the number of non-empty substrings of a given string.\n    def numberOfSubstrings(str : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(numberOfSubstrings((\"abc\")) == (6l));\n    assert(numberOfSubstrings((\"abcd\")) == (10l));\n    assert(numberOfSubstrings((\"abcde\")) == (15l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        return (n * (n + 1)) / 2",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        if (n == 0) return 0\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) == str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (1 to n).map(i => n - i + 1).sum",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        if (n == 0) return 0\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val result = (n * (n + 1)) / 2\n        result",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) {\n            for (j <- 0 to n) {\n                if (i == 0 || j == 0) dp(i)(j) = 0\n                else if (str(i - 1) == str(j - 1) && i != j) dp(i)(j) = 1 + dp(i - 1)(j - 1)\n                else dp(i)(j) = max(dp(i - 1)(j), dp(i)(j - 1))\n            }\n        }\n        val result = n * (n + 1) / 2 - dp(n)(n)\n        result",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n + 1)\n        dp(0) = 0\n        for (i <- 1 to n) {\n            dp(i) = dp(i - 1) + i\n        }\n        dp(n)",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        n * (n + 1) / 2",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) == str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var cnt = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                cnt += 1\n            }\n        }\n        cnt",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) == str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i to str.length - 1) {\n                if (str(i) != ' ') {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        if (n == 0) return 0\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        val result = (n * (n + 1)) / 2\n        result",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) == str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        if (n == 0) return 0\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) == str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1) != \"\") count += 1\n            }\n        }\n        return count",
    "        var n = str.length\n        var result = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) result += 1\n            }\n        }\n        result",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        (1 to str.length).map(i => str.length - i + 1).sum",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 to n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        //return (str.length * (str.length + 1)) / 2\n        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        val result = n * (n + 1) / 2\n        result",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        val result = (n * (n + 1)) / 2\n        result",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        str.length * (str.length + 1) / 2",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        n * (n + 1) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i to str.length - 1) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        // O(n^2)\n        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i to str.length - 1) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        val n = str.length\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) == str(j)) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        n * (n + 1) / 2",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        str.length * (str.length + 1) / 2",
    "        val n = str.length\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) == str(j)) result += 1\n            }\n        }\n        result",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(i)(j) = dp(i)(j - 1) + dp(i + 1)(j) - dp(i + 1)(j - 1)\n                if (str(i) == str(j)) dp(i)(j) += 1\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) == str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) result += 1\n            }\n        }\n        result",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) == str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i to str.length - 1) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                dp(i)(j) = if (i == j) 1 else dp(i)(j - 1) + 1\n            }\n        }\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                sum += dp(i)(j)\n            }\n        }\n        sum",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i+1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (1 to n).map(i => n - i + 1).sum",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length)\n            for (j <- i + 1 to str.length)\n                count += 1\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        return (n * (n + 1)) / 2",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = (i + 1) * (n - i)\n        }\n        result.sum",
    "        val n = str.length\n        var total = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) total += 1\n            }\n        }\n        total",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i to str.length - 1) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (1 to n).map(i => n - i + 1).sum",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        // O(n^2)\n        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count"
  ]
}