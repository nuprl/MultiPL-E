{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1) {\n            if (i == 0) {\n                temp += list(i)\n            } else if (list(i) == list(i - 1)) {\n                temp += list(i)\n            } else {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else {\n                if (list(i) == list(i - 1)) temp += list(i)\n                else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        var prev = list(0)\n        temp += list(0)\n        for (i <- 1 until list.length) {\n            if (list(i) == prev) {\n                temp += list(i)\n            } else {\n                result += temp.toList\n                temp.clear\n                temp += list(i)\n            }\n            prev = list(i)\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = ListBuffer[Any]()\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else {\n                if (list(i) == list(i - 1)) temp += list(i)\n                else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else {\n                if (list(i) == list(i - 1)) temp += list(i)\n                else {\n                    result += temp.toList\n                    temp = ListBuffer[Any]()\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list.head\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = list(i)\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var current = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                current += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    current += list(i)\n                } else {\n                    result += current.toList\n                    current.clear\n                    current += list(i)\n                }\n            }\n        }\n        result += current.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var temp = list(0)\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == temp) {\n                count += 1\n            } else {\n                list2 += List(temp, count)\n                temp = list(i)\n                count = 1\n            }\n        }\n        list2 += List(temp, count)\n        list2.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            }\n            else if (list(i) == list(i - 1)) {\n                temp += list(i)\n            }\n            else {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = ListBuffer[List[Any]]()\n        var list3 = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                list3 = list(i) :: list3\n            } else {\n                if (list(i) == list(i - 1)) {\n                    list3 = list(i) :: list3\n                } else {\n                    list2 += list3.reverse\n                    list3 = List[Any]()\n                    list3 = list(i) :: list3\n                }\n            }\n        }\n        list2 += list3.reverse\n        list2.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        if (list.isEmpty) Nil\n        else {\n            val (packed, next) = list.span(_ == list.head)\n            if (next == Nil) List(packed)\n            else packed :: packConsecutiveDuplicates(next)\n        }",
    "        var list2 = List[Any]()\n        var temp = List[Any]()\n        for (i <- 0 until list1.length) {\n            if (i == 0) {\n                temp = List(list1(i))\n            } else {\n                if (list1(i) == list1(i - 1)) {\n                    temp = temp :+ list1(i)\n                } else {\n                    list2 = list2 :+ temp\n                    temp = List(list1(i))\n                }\n            }\n        }\n        list2 = list2 :+ temp\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        val list = list1.asInstanceOf[List[Any]]\n        if (list.isEmpty) Nil\n        else {\n            val (packed, next) = list span {_ == list.head}\n            if (next == Nil) List(packed)\n            else packed :: packConsecutiveDuplicates(next)\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (list3.length == 0) list3 += list(i)\n            else if (list3(0) == list(i)) list3 += list(i)\n            else {\n                list2 += list3\n                list3 = ListBuffer[Any]()\n                list3 += list(i)\n            }\n        }\n        list2 += list3\n        list2.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list.head\n        var count = 0\n        for (i <- list) {\n            if (i == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = i\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        var last = list(0)\n        for (i <- list) {\n            if (i == last) {\n                temp += i\n            } else {\n                result += temp.toList\n                temp.clear\n                temp += i\n                last = i\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        var list = list1.asInstanceOf[List[Any]]\n        var list2 = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        while (i < list.length) {\n            if (temp.length == 0) {\n                temp = temp :+ list(i)\n            }\n            else {\n                if (list(i) == temp(0)) {\n                    temp = temp :+ list(i)\n                }\n                else {\n                    list2 = list2 :+ temp\n                    temp = List[Any]()\n                    temp = temp :+ list(i)\n                }\n            }\n            i += 1\n        }\n        list2 = list2 :+ temp\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (first, rest) = list1.span(_ == head)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp.clear\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        val list = list1.asInstanceOf[List[Any]]\n        val packedList = new ListBuffer[Any]\n        var currentElement = list(0)\n        var currentList = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (list(i) == currentElement) {\n                currentList += list(i)\n            } else {\n                packedList += currentList\n                currentElement = list(i)\n                currentList = new ListBuffer[Any]\n                currentList += list(i)\n            }\n        }\n        packedList += currentList\n        packedList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list(0)\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = list(i)\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList",
    "        var list = list1.asInstanceOf[List[Any]]\n        var result = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = ListBuffer[Any]()\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list.head\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = list(i)\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else {\n                if (list(i) == list(i - 1)) temp += list(i)\n                else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]()\n        var temp = new ListBuffer[Any]()\n        var prev = list(0)\n        for (i <- list) {\n            if (i == prev) {\n                temp += i\n            } else {\n                result += temp.toList\n                temp.clear()\n                temp += i\n                prev = i\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            }\n            else if (list(i) == list(i - 1)) {\n                temp += list(i)\n            }\n            else {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        for (i <- 0 until list1.length) {\n            if (i == 0) {\n                list2 += list1(i)\n            } else {\n                if (list1(i) == list1(i - 1)) {\n                    list2 += list1(i)\n                } else {\n                    list3 += list2\n                    list2 = ListBuffer[Any]()\n                    list2 += list1(i)\n                }\n            }\n        }\n        list3 += list2\n        list3",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            }\n            else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                }\n                else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            }\n            else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                }\n                else {\n                    result += temp.toList\n                    temp.clear\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        var result = List[Any]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp = List(list(i))\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp = temp :+ list(i)\n                } else {\n                    result = result :+ temp\n                    temp = List(list(i))\n                }\n            }\n        }\n        result = result :+ temp\n        result",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        var result = ListBuffer[Any]()\n        var current = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                current += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    current += list(i)\n                } else {\n                    result += current\n                    current = ListBuffer[Any]()\n                    current += list(i)\n                }\n            }\n        }\n        result += current\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var count = 0\n        var current = list(0)\n        for (i <- 0 until list.length) {\n            if (list(i) == current) {\n                count += 1\n            } else {\n                list2 += List(current, count)\n                current = list(i)\n                count = 1\n            }\n        }\n        list2 += List(current, count)\n        list2.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        val temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else if (list(i) == list(i - 1)) temp += list(i)\n            else {\n                result += temp.toList\n                temp.clear\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val newList = ListBuffer[Any]()\n        var subList = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                subList += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    subList += list(i)\n                } else {\n                    newList += subList.toList\n                    subList = ListBuffer[Any]()\n                    subList += list(i)\n                }\n            }\n        }\n        newList += subList.toList\n        newList.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (temp.length == 0) temp += list(i)\n            else if (temp(0) == list(i)) temp += list(i)\n            else {\n                result += temp.toList\n                temp.clear\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        var i = 0\n        while (i < list.length) {\n            val sublist = ListBuffer[Any]()\n            sublist += list(i)\n            var j = i + 1\n            while (j < list.length && list(i) == list(j)) {\n                sublist += list(j)\n                j += 1\n            }\n            result += sublist.toList\n            i = j\n        }\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        var result = List[List[Any]]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) temp = List(list(i))\n            else if (list(i) == list(i - 1)) temp = temp :+ list(i)\n            else {\n                result = result :+ temp\n                temp = List(list(i))\n            }\n        }\n        result = result :+ temp\n        result",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        var list2 = List[Any]()\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var list5 = List[Any]()\n        var list6 = List[Any]()\n        var list7 = List[Any]()\n        var list8 = List[Any]()\n        var list9 = List[Any]()\n        var list10 = List[Any]()\n        var list11 = List[Any]()\n        var list12 = List[Any]()\n        var list13 = List[Any]()\n        var list14 = List[Any]()\n        var list15 = List[Any]()\n        var list16 = List[Any]()\n        var list17 = List[Any]()\n        var list18 = List[Any]()\n        var list19 = List[Any]()\n        var list20 = List[Any]()\n        var list21 = List[Any]()\n        var list22 = List[Any]()\n        var list23 = List[Any]()\n        var list24 = List[Any]()\n        var list25 = List[Any]()\n        var list26 = List[Any]()\n        var list27 = List[Any]()\n        var list28 = List[Any]()\n        var list29 = List[Any]()\n        var list30 = List[Any]()\n        var list31 = List[Any]()\n        var list32 = List[Any]()\n        var list33 = List[Any]()\n        var list34 = List[Any]()\n        var list35 = List[Any]()\n        var list36 = List[Any]()\n        var list37 = List[Any]()\n        var list38 = List[Any]()\n        var list39 = List[Any]()\n        var list40 = List[Any]()\n        var list41 = List[Any]()\n        var list42 = List[Any]()\n        var list43 = List[Any]()\n        var list44 = List[Any]()\n        var list45 = List[Any]()\n        var list46 = List[Any]()\n        var list47 = List[Any]()\n        var list48 =",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var count = 0\n        var prev = list(0)\n        for (i <- 0 until list.length) {\n            if (list(i) == prev) {\n                count += 1\n            } else {\n                result += List(prev, count)\n                count = 1\n                prev = list(i)\n            }\n        }\n        result += List(prev, count)\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (first, rest) = list1.span(_ == head)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case h :: t => {\n                val (first, rest) = list1.span(_ == h)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        for (i <- 0 until list2.length) {\n            if (i == 0) {\n                list4 += list2(i)\n            } else if (list2(i) == list2(i - 1)) {\n                list4 += list2(i)\n            } else {\n                list3 += list4.toList\n                list4 = ListBuffer[Any]()\n                list4 += list2(i)\n            }\n        }\n        list3 += list4.toList\n        list3.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        var result = List[List[Any]]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp = List(list(i))\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp = temp :+ list(i)\n                } else {\n                    result = result :+ temp\n                    temp = List(list(i))\n                }\n            }\n        }\n        result = result :+ temp\n        result",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        var result = List[List[Any]]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp = List(list(i))\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp = temp :+ list(i)\n                } else {\n                    result = result :+ temp\n                    temp = List(list(i))\n                }\n            }\n        }\n        result = result :+ temp\n        result",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val sublist = new ListBuffer[Any]\n            sublist += list(i)\n            while (i + 1 < list.length && list(i) == list(i + 1)) {\n                sublist += list(i + 1)\n                i += 1\n            }\n            result += sublist.toList\n            i += 1\n        }\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        var result = List[List[Any]]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) temp = List(list(i))\n            else if (list(i) == list(i - 1)) temp = temp ::: List(list(i))\n            else {\n                result = result ::: List(temp)\n                temp = List(list(i))\n            }\n        }\n        result = result ::: List(temp)\n        result",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = ListBuffer[Any]()\n        var i = 0\n        while (i < list.length) {\n            val list3 = ListBuffer[Any]()\n            list3 += list(i)\n            var j = i + 1\n            while (j < list.length && list(j) == list(i)) {\n                list3 += list(j)\n                j += 1\n            }\n            list2 += list3.toList\n            i = j\n        }\n        list2.toList",
    "        var list = ListBuffer[Any]()\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        list = list1.asInstanceOf[ListBuffer[Any]]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                list2 += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    list2 += list(i)\n                } else {\n                    list3 += list2\n                    list2 = ListBuffer[Any]()\n                    list2 += list(i)\n                }\n            }\n        }\n        list3 += list2\n        return list3",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (first, rest) = list1.span(_ == head)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        var prev = list(0)\n        temp += list(0)\n        for (i <- 1 until list.length) {\n            if (list(i) == prev) {\n                temp += list(i)\n            } else {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n                temp += list(i)\n            }\n            prev = list(i)\n        }\n        result += temp.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else {\n                if (list(i) == list(i - 1)) temp += list(i)\n                else {\n                    result += temp.toList\n                    temp = ListBuffer[Any]()\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (temp.length == 0) {\n                temp += list(i)\n            } else if (temp(0) == list(i)) {\n                temp += list(i)\n            } else {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n                temp += list(i)\n            }\n        }\n        if (temp.length != 0) result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        var list2 = List[Any]()\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var list5 = List[Any]()\n        var list6 = List[Any]()\n        var list7 = List[Any]()\n        var list8 = List[Any]()\n        var list9 = List[Any]()\n        var list10 = List[Any]()\n        var list11 = List[Any]()\n        var list12 = List[Any]()\n        var list13 = List[Any]()\n        var list14 = List[Any]()\n        var list15 = List[Any]()\n        var list16 = List[Any]()\n        var list17 = List[Any]()\n        var list18 = List[Any]()\n        var list19 = List[Any]()\n        var list20 = List[Any]()\n        var list21 = List[Any]()\n        var list22 = List[Any]()\n        var list23 = List[Any]()\n        var list24 = List[Any]()\n        var list25 = List[Any]()\n        var list26 = List[Any]()\n        var list27 = List[Any]()\n        var list28 = List[Any]()\n        var list29 = List[Any]()\n        var list30 = List[Any]()\n        var list31 = List[Any]()\n        var list32 = List[Any]()\n        var list33 = List[Any]()\n        var list34 = List[Any]()\n        var list35 = List[Any]()\n        var list36 = List[Any]()\n        var list37 = List[Any]()\n        var list38 = List[Any]()\n        var list39 = List[Any]()\n        var list40 = List[Any]()\n        var list41 = List[Any]()\n        var list42 = List[Any]()\n        var list43 = List[Any]()\n        var list44 = List[Any]()\n        var list45 = List[Any]()\n        var list46 = List[Any]()\n        var list47 = List[Any]()\n        var list48 =",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list(0)\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = list(i)\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        var result = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = ListBuffer[Any]()\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (first, rest) = list1.span(_ == head)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        var last = list.head\n        for (i <- list) {\n            if (i == last) {\n                temp += i\n            } else {\n                result += temp.toList\n                temp.clear\n                temp += i\n                last = i\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (first, rest) = list1.span(_ == head)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        var list = list1.asInstanceOf[List[Any]]\n        var result = List[Any]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp = temp :+ list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp = temp :+ list(i)\n                } else {\n                    result = result :+ temp\n                    temp = List[Any]()\n                    temp = temp :+ list(i)\n                }\n            }\n        }\n        result = result :+ temp\n        result",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            }\n            else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                }\n                else {\n                    result += temp.toList\n                    temp.clear\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1 span (y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list.head\n        var count = 0\n        for (i <- list) {\n            if (i == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = i\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var list3 = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                list3 += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    list3 += list(i)\n                } else {\n                    list2 += list3.toList\n                    list3 = new ListBuffer[Any]\n                    list3 += list(i)\n                }\n            }\n        }\n        list2 += list3.toList\n        list2.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1 span (y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (temp.length == 0) temp += list(i)\n            else if (temp(0) == list(i)) temp += list(i)\n            else {\n                result += temp.toList\n                temp.clear\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (duplicates, rest) = list1.span(_ == head)\n                duplicates :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        var list2 = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        var i = 0\n        while (i < list1.length) {\n            if (i == 0) {\n                temp += list1(i)\n            } else {\n                if (list1(i) == list1(i - 1)) {\n                    temp += list1(i)\n                } else {\n                    list2 += temp\n                    temp = ListBuffer[Any]()\n                    temp += list1(i)\n                }\n            }\n            i += 1\n        }\n        list2 += temp\n        list2.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else {\n                if (list(i) == list(i - 1)) temp += list(i)\n                else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var list3 = new ListBuffer[Any]\n        var list4 = new ListBuffer[Any]\n        list.foreach(x => {\n            if (list3.isEmpty) {\n                list3 += x\n            } else if (list3.last == x) {\n                list3 += x\n            } else {\n                list2 += list3.toList\n                list3 = new ListBuffer[Any]\n                list3 += x\n            }\n        })\n        list2 += list3.toList\n        list2.toList",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = ListBuffer[Any]()\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        var result = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list2.length) {\n            if (i == 0) {\n                temp += list2(i)\n            } else {\n                if (list2(i) != list2(i - 1)) {\n                    result += temp.toList\n                    temp.clear\n                    temp += list2(i)\n                } else {\n                    temp += list2(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1 span (y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (first, rest) = list1.span(_ == head)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var temp = list2(0)\n        for (i <- 0 until list2.length) {\n            if (list2(i) == temp) {\n                list4 += list2(i)\n            } else {\n                list3 += list4\n                list4 = ListBuffer[Any]()\n                temp = list2(i)\n                list4 += list2(i)\n            }\n        }\n        list3 += list4\n        list3.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (list3.length == 0) list3 += list(i)\n            else if (list3(list3.length - 1) == list(i)) list3 += list(i)\n            else {\n                list2 += list3.toList\n                list3.clear\n                list3 += list(i)\n            }\n        }\n        list2 += list3.toList\n        list2.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var current = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (current.length == 0) current += list(i)\n            else if (current(0) == list(i)) current += list(i)\n            else {\n                result += current.toList\n                current = new ListBuffer[Any]\n                current += list(i)\n            }\n        }\n        result += current.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (temp.length == 0) {\n                temp += list(i)\n            } else if (temp(0) == list(i)) {\n                temp += list(i)\n            } else {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList"
  ]
}