{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1) {\n            if (i == 0) {\n                temp += list(i)\n            } else if (list(i) == list(i - 1)) {\n                temp += list(i)\n            } else {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else {\n                if (list(i) == list(i - 1)) temp += list(i)\n                else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        var prev = list(0)\n        temp += list(0)\n        for (i <- 1 until list.length) {\n            if (list(i) == prev) {\n                temp += list(i)\n            } else {\n                result += temp.toList\n                temp.clear\n                temp += list(i)\n            }\n            prev = list(i)\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = ListBuffer[Any]()\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else {\n                if (list(i) == list(i - 1)) temp += list(i)\n                else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else {\n                if (list(i) == list(i - 1)) temp += list(i)\n                else {\n                    result += temp.toList\n                    temp = ListBuffer[Any]()\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list.head\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = list(i)\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var current = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                current += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    current += list(i)\n                } else {\n                    result += current.toList\n                    current.clear\n                    current += list(i)\n                }\n            }\n        }\n        result += current.toList\n        result.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var temp = list(0)\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == temp) {\n                count += 1\n            } else {\n                list2 += List(temp, count)\n                temp = list(i)\n                count = 1\n            }\n        }\n        list2 += List(temp, count)\n        list2.toList",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            }\n            else if (list(i) == list(i - 1)) {\n                temp += list(i)\n            }\n            else {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList"
  ]
}