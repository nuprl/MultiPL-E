{
  "name": "mbpp_777_find_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of non-repeated elements in a given list.\n    def findSum(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findSum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (21l));\n    assert(findSum((List[Long](1l.toLong, 10l.toLong, 9l.toLong, 4l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 4l.toLong))) == (71l));\n    assert(findSum((List[Long](12l.toLong, 10l.toLong, 9l.toLong, 45l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 10l.toLong))) == (78l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set.add(arr(i))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (x <- arr) {\n            if (!set.contains(x)) {\n                sum += x\n                set.add(x)\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        val map = new HashMap[Long, Int]\n        arr.foreach(x => {\n            if (map.contains(x)) map(x) += 1\n            else map += (x -> 1)\n        })\n        map.filter(x => x._2 == 1).map(x => x._1).sum",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var sum = 0L\n        for (i <- map) {\n            if (i._2 == 1) sum += i._1\n        }\n        return sum",
    "        var sum : Long = 0\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.filter(x => x._2 == 1).map(x => x._1).sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (x <- arr) {\n            if (!set.contains(x)) {\n                sum += x\n                set += x\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        arr.distinct.sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum"
  ]
}