{
  "name": "mbpp_785_tuple_str_int",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert tuple string to integer tuple.\n    def tupleStrInt(test_str : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleStrInt((\"(7, 8, 9)\")) == (7l, 8l, 9l));\n    assert(tupleStrInt((\"(1, 2, 3)\")) == (1l, 2l, 3l));\n    assert(tupleStrInt((\"(4, 5, 6)\")) == (4l, 5l, 6l));\n    assert(tupleStrInt((\"(7, 81, 19)\")) == (7l, 81l, 19l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val test_arr = test_str.split(\" \").map(_.toLong)\n        test_arr(0) * test_arr(1)",
    "        val test = test_str.split(\",\").map(_.toInt)\n        val test_tuple = (test(0), test(1))\n        return test_tuple._1 * test_tuple._2",
    "        val test_arr = test_str.split(\",\")\n        val test_int = test_arr.map(x => x.toInt)\n        val test_tuple = (test_int(0), test_int(1))\n        return test_tuple._1 * test_tuple._2",
    "        var test_arr = test_str.split(\",\")\n        var test_int = test_arr.map(x => x.toLong)\n        var test_tuple = (test_int(0), test_int(1))\n        return test_tuple._1 * test_tuple._2",
    "        val test_str_arr = test_str.split(\",\")\n        val test_arr = new Array[Long](test_str_arr.length)\n        for (i <- 0 until test_str_arr.length) {\n            test_arr(i) = test_str_arr(i).toLong\n        }\n        return test_arr.product",
    "        val test_arr = test_str.split(\" \")\n        val test_int = test_arr.map(_.toLong)\n        test_int(0) * test_int(1)",
    "        val test_arr = test_str.split(\",\").map(_.toInt)\n        val test_tuple = (test_arr(0), test_arr(1))\n        val test_int = test_tuple._1 * pow(10, test_tuple._2).toLong\n        return test_int",
    "        val test_str_arr = test_str.split(\",\")\n        val test_int_arr = new Array[Int](test_str_arr.length)\n        for (i <- 0 until test_str_arr.length) {\n            test_int_arr(i) = test_str_arr(i).toInt\n        }\n        val test_int_tuple = (test_int_arr(0), test_int_arr(1))\n        test_int_tuple._1 * test_int_tuple._2",
    "        val test_arr = test_str.split(\",\")\n        val test_int = test_arr.map(_.toInt)\n        val test_tuple = (test_int(0), test_int(1))\n        test_tuple._1 * test_tuple._2",
    "        val test_str_arr = test_str.split(\",\")\n        val test_int_arr = test_str_arr.map(_.toInt)\n        val test_int_tuple = (test_int_arr(0), test_int_arr(1))\n        val test_int_tuple_str = test_int_tuple.toString\n        val test_int_tuple_str_int = test_int_tuple_str.toInt\n        return test_int_tuple_str_int",
    "        val test_arr = test_str.split(\" \")\n        val test_tuple = (test_arr(0).toInt, test_arr(1).toInt)\n        val test_int = test_tuple._1 * test_tuple._2\n        return test_int",
    "        val test_str_arr = test_str.split(\",\")\n        val test_int_arr = test_str_arr.map(x => x.toInt)\n        val test_tuple = (test_int_arr(0), test_int_arr(1))\n        test_tuple._1 * test_tuple._2",
    "        var test_arr = test_str.split(\" \").map(_.toInt)\n        var test_tuple = (test_arr(0), test_arr(1))\n        return test_tuple._1 + test_tuple._2",
    "        val test_str_arr = test_str.split(\",\")\n        val test_int_arr = test_str_arr.map(x => x.toInt)\n        val test_tuple = (test_int_arr(0), test_int_arr(1))\n        val test_int = test_tuple._1 * test_tuple._2\n        test_int",
    "        val test_arr = test_str.split(\" \")\n        val test_int = test_arr.map(x => x.toInt)\n        val test_tup = (test_int(0), test_int(1))\n        test_tup._1 * test_tup._2",
    "        val test_arr = test_str.split(\",\")\n        val test_int = test_arr.map(x => x.toInt)\n        val test_tuple = (test_int(0), test_int(1))\n        val test_int_tuple = test_tuple._1 * test_tuple._2\n        return test_int_tuple",
    "        val test_arr = test_str.split(\",\")\n        val test_int = test_arr.map(x => x.toInt)\n        val test_tuple = (test_int(0), test_int(1))\n        return test_tuple._1 * test_tuple._2",
    "        val test_arr = test_str.split(\",\").map(_.toInt)\n        val test_tuple = (test_arr(0), test_arr(1))\n        test_tuple._1 * test_tuple._2",
    "        val test_arr = test_str.split(\" \")\n        val test_tuple = (test_arr(0).toLong, test_arr(1).toLong)\n        return test_tuple._1 * test_tuple._2",
    "        val test_arr = test_str.split(\" \")\n        val test_int = test_arr.map(x => x.toInt)\n        val test_tuple = (test_int(0), test_int(1))\n        return test_tuple._1 + test_tuple._2"
  ]
}