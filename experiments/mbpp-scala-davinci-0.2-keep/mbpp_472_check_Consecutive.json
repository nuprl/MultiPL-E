{
  "name": "mbpp_472_check_Consecutive",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        true",
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) != sorted(i - 1) + 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true",
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        true",
    "        val sorted = l.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) - sorted(i - 1) != 1) return false\n        }\n        return true",
    "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 1) {\n            if (sorted(i + 1) - sorted(i) != 1) return false\n        }\n        return true"
  ]
}