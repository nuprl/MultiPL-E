{
  "name": "mbpp_558_digit_distance_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of the per-digit difference between two integers.\n    def digitDistanceNums(n1 : Long, n2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(digitDistanceNums((1l), (2l)) == (1l));\n    assert(digitDistanceNums((23l), (56l)) == (6l));\n    assert(digitDistanceNums((123l), (256l)) == (7l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = for (i <- 0 until n1Digits.length) yield abs(n1Digits(i) - n2Digits(i))\n        diffs.sum",
    "        val n1Digits = n1.toString.toList.map(_.asDigit)\n        val n2Digits = n2.toString.toList.map(_.asDigit)\n        val n1DigitsLength = n1Digits.length\n        val n2DigitsLength = n2Digits.length\n        val maxLength = max(n1DigitsLength, n2DigitsLength)\n        val minLength = min(n1DigitsLength, n2DigitsLength)\n        val diff = maxLength - minLength\n        val diffDigits = List.fill(diff)(0)\n        val n1DigitsPadded = if (n1DigitsLength < n2DigitsLength) n1Digits ++ diffDigits else n1Digits\n        val n2DigitsPadded = if (n2DigitsLength < n1DigitsLength) n2Digits ++ diffDigits else n2Digits\n        val diffs = n1DigitsPadded.zip(n2DigitsPadded).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0 || n2_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        return sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i) - '0' else 0\n            val d2 = if (i < s2.length) s2(i) - '0' else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n1str = n1.toString\n        var n2str = n2.toString\n        for (i <- 0 until n1str.length) {\n            sum += abs(n1str(i).asDigit - n2str(i).asDigit)\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n1_str = n1.toString\n        var n2_str = n2.toString\n        for (i <- 0 until n1_str.length) {\n            sum += abs(n1_str(i).asDigit - n2_str(i).asDigit)\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum"
  ]
}