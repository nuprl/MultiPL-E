{
  "name": "mbpp_558_digit_distance_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of the per-digit difference between two integers.\n    def digitDistanceNums(n1 : Long, n2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(digitDistanceNums((1l), (2l)) == (1l));\n    assert(digitDistanceNums((23l), (56l)) == (6l));\n    assert(digitDistanceNums((123l), (256l)) == (7l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = for (i <- 0 until n1Digits.length) yield abs(n1Digits(i) - n2Digits(i))\n        diffs.sum",
    "        val n1Digits = n1.toString.toList.map(_.asDigit)\n        val n2Digits = n2.toString.toList.map(_.asDigit)\n        val n1DigitsLength = n1Digits.length\n        val n2DigitsLength = n2Digits.length\n        val maxLength = max(n1DigitsLength, n2DigitsLength)\n        val minLength = min(n1DigitsLength, n2DigitsLength)\n        val diff = maxLength - minLength\n        val diffDigits = List.fill(diff)(0)\n        val n1DigitsPadded = if (n1DigitsLength < n2DigitsLength) n1Digits ++ diffDigits else n1Digits\n        val n2DigitsPadded = if (n2DigitsLength < n1DigitsLength) n2Digits ++ diffDigits else n2Digits\n        val diffs = n1DigitsPadded.zip(n2DigitsPadded).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0 || n2_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        return sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i) - '0' else 0\n            val d2 = if (i < s2.length) s2(i) - '0' else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n1str = n1.toString\n        var n2str = n2.toString\n        for (i <- 0 until n1str.length) {\n            sum += abs(n1str(i).asDigit - n2str(i).asDigit)\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n1_str = n1.toString\n        var n2_str = n2.toString\n        for (i <- 0 until n1_str.length) {\n            sum += abs(n1_str(i).asDigit - n2_str(i).asDigit)\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0 || m > 0) {\n            if (n > 0) {\n                sum += abs(n % 10 - m % 10)\n                n /= 10\n            }\n            if (m > 0) {\n                sum += abs(n % 10 - m % 10)\n                m /= 10\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += abs(d - (n2 % 10))\n            n2 /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        val digits1 = n1.toString.map(_.asDigit)\n        val digits2 = n2.toString.map(_.asDigit)\n        val diff = digits1.zip(digits2).map(x => abs(x._1 - x._2))\n        diff.sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n1_str = n1.toString\n        var n2_str = n2.toString\n        for (i <- 0 until n1_str.length) {\n            sum += abs(n1_str(i) - n2_str(i))\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0 && m > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        while (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n        while (m > 0) {\n            sum += m % 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                val d = m % 10\n                m /= 10\n                sum += d * d\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0 || n2_ > 0) {\n            if (n1_ > 0) {\n                sum += abs(n1_ % 10 - n2_ % 10)\n                n1_ /= 10\n            }\n            if (n2_ > 0) {\n                sum += abs(n1_ % 10 - n2_ % 10)\n                n2_ /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0 && m > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        while (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n        while (m > 0) {\n            sum += m % 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val n1DigitsLength = n1Digits.length\n        val n2DigitsLength = n2Digits.length\n        val maxDigitsLength = max(n1DigitsLength, n2DigitsLength)\n        var sum = 0\n        for (i <- 0 until maxDigitsLength) {\n            val n1Digit = if (i < n1DigitsLength) n1Digits(i) else 0\n            val n2Digit = if (i < n2DigitsLength) n2Digits(i) else 0\n            sum += abs(n1Digit - n2Digit)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            sum += abs(n % 10 - (n2 % 10))\n            n /= 10\n            n2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val n1DigitsLength = n1Digits.length\n        val n2DigitsLength = n2Digits.length\n        val maxLength = max(n1DigitsLength, n2DigitsLength)\n        val minLength = min(n1DigitsLength, n2DigitsLength)\n        val n1DigitsPadded = n1Digits.padTo(maxLength, 0)\n        val n2DigitsPadded = n2Digits.padTo(maxLength, 0)\n        var sum = 0\n        for (i <- 0 until maxLength) {\n            sum += abs(n1DigitsPadded(i) - n2DigitsPadded(i))\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i).asDigit else 0\n            val d2 = if (i < s2.length) s2(i).asDigit else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += abs(d - (n2 % 10))\n            n2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val digits1 = n1.toString.map(_.asDigit).toList\n        val digits2 = n2.toString.map(_.asDigit).toList\n        val diffs = digits1.zip(digits2).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        (n1 - n2).abs.toString.map(x => x.asDigit).sum",
    "        var sum = 0L\n        var n1Temp = n1\n        var n2Temp = n2\n        while (n1Temp > 0) {\n            sum += abs(n1Temp % 10 - n2Temp % 10)\n            n1Temp /= 10\n            n2Temp /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val diffs = (n1Digits zip n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        val digits1 = n1.toString.map(_.toString.toInt)\n        val digits2 = n2.toString.map(_.toString.toInt)\n        val diffs = digits1.zip(digits2).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0\n        var n1_str = n1.toString\n        var n2_str = n2.toString\n        for (i <- 0 until n1_str.length) {\n            sum += abs(n1_str(i) - n2_str(i))\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            val d2 = m % 10\n            abs(d - d2) + digitDistance(m)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val n1DigitsLength = n1Digits.length\n        val n2DigitsLength = n2Digits.length\n        val maxLength = max(n1DigitsLength, n2DigitsLength)\n        val minLength = min(n1DigitsLength, n2DigitsLength)\n        var sum = 0\n        for (i <- 0 until minLength) {\n            sum += abs(n1Digits(i) - n2Digits(i))\n        }\n        for (i <- minLength until maxLength) {\n            if (n1DigitsLength > n2DigitsLength) {\n                sum += n1Digits(i)\n            } else {\n                sum += n2Digits(i)\n            }\n        }\n        sum",
    "        val d1 = n1.toString.map(_.toString.toInt).toList\n        val d2 = n2.toString.map(_.toString.toInt).toList\n        val d = d1.zip(d2).map(x => abs(x._1 - x._2))\n        d.sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += abs(d - (n2 % 10))\n            n2 /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val digitDiffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        digitDiffs.sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0 || n2_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n != 0 || m != 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            sum += abs(n % 10 - (n2 % 10))\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0 && n2_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        while (n1_ > 0) {\n            sum += n1_ % 10\n            n1_ /= 10\n        }\n        while (n2_ > 0) {\n            sum += n2_ % 10\n            n2_ /= 10\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val n1DigitsLength = n1Digits.length\n        val n2DigitsLength = n2Digits.length\n        val maxLength = max(n1DigitsLength, n2DigitsLength)\n        val minLength = min(n1DigitsLength, n2DigitsLength)\n        val minDigits = if (n1DigitsLength == minLength) n1Digits else n2Digits\n        val maxDigits = if (n1DigitsLength == maxLength) n1Digits else n2Digits\n        var sum = 0\n        for (i <- 0 until minLength) {\n            sum += abs(minDigits(i) - maxDigits(i))\n        }\n        for (i <- minLength until maxLength) {\n            sum += maxDigits(i)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0 || m > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i).asDigit else 0\n            val d2 = if (i < s2.length) s2(i).asDigit else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = min(s1.length, s2.length)\n        var sum = 0\n        for (i <- 0 until l) {\n            sum += abs(s1(i) - s2(i))\n        }\n        sum",
    "        var sum = 0L\n        var n1_copy = n1\n        var n2_copy = n2\n        while (n1_copy > 0) {\n            sum += abs(n1_copy % 10 - n2_copy % 10)\n            n1_copy /= 10\n            n2_copy /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0 || m > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val d1 = n1.toString.map(_.asDigit).toList\n        val d2 = n2.toString.map(_.asDigit).toList\n        val d = d1.zip(d2).map(x => abs(x._1 - x._2))\n        d.sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val len = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until len) {\n            val d1 = if (i < s1.length) s1(i).asDigit else 0\n            val d2 = if (i < s2.length) s2(i).asDigit else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i) - '0' else 0\n            val d2 = if (i < s2.length) s2(i) - '0' else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0 || m > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val d1 = n1.toString.map(_.asDigit).toList\n        val d2 = n2.toString.map(_.asDigit).toList\n        val d = d1.zip(d2).map(x => abs(x._1 - x._2))\n        d.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        return n1.toString.map(x => abs(x.asDigit - n2.toString.map(y => y.asDigit).sum)).sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0 || n2_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n1_copy = n1\n        var n2_copy = n2\n        while (n1_copy > 0) {\n            sum += abs(n1_copy % 10 - n2_copy % 10)\n            n1_copy /= 10\n            n2_copy /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n != 0 || m != 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0 || n2_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val s1 = n1.toString.toList\n        val s2 = n2.toString.toList\n        var sum = 0\n        for (i <- 0 until s1.length) {\n            sum += abs(s1(i) - s2(i))\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i) - '0' else 0\n            val d2 = if (i < s2.length) s2(i) - '0' else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0 || m > 0) {\n            if (n > 0) {\n                sum += abs(n % 10 - m % 10)\n                n /= 10\n            }\n            if (m > 0) {\n                sum += abs(n % 10 - m % 10)\n                m /= 10\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n != 0 || m != 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            val digits = n.toString.toList.map(_.asDigit)\n            digits.max - digits.min\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                val d = m % 10\n                sum += d\n                m /= 10\n            }\n            sum\n        }\n        digitDistance(n1) - digitDistance(n2)",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i).asDigit else 0\n            val d2 = if (i < s2.length) s2(i).asDigit else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(c => c.asDigit)\n        val n2Digits = n2.toString.map(c => c.asDigit)\n        val maxLength = max(n1Digits.length, n2Digits.length)\n        val n1DigitsPadded = n1Digits.padTo(maxLength, 0)\n        val n2DigitsPadded = n2Digits.padTo(maxLength, 0)\n        (n1DigitsPadded, n2DigitsPadded).zipped.map((d1, d2) => abs(d1 - d2)).sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += (d - (n2 % 10)).abs\n            n2 /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        val n1s = n1.toString.map(_.asDigit).toList\n        val n2s = n2.toString.map(_.asDigit).toList\n        val n1sLen = n1s.length\n        val n2sLen = n2s.length\n        val n1sPadded = if (n1sLen > n2sLen) n1s else n1s.padTo(n2sLen, 0)\n        val n2sPadded = if (n2sLen > n1sLen) n2s else n2s.padTo(n1sLen, 0)\n        n1sPadded.zip(n2sPadded).map(x => abs(x._1 - x._2)).sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val digits1 = n1.toString.map(_.asDigit)\n        val digits2 = n2.toString.map(_.asDigit)\n        val diffs = digits1.zip(digits2).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                val d = m % 10\n                m /= 10\n                sum += d\n            }\n            sum\n        }\n        abs(digitDistance(n1) - digitDistance(n2))",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            sum += abs(n % 10 - n2 % 10)\n            n /= 10\n            n2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            var d = n % 10\n            n = n / 10\n            var m = n2\n            while (m > 0) {\n                var d2 = m % 10\n                m = m / 10\n                sum += abs(d - d2)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0\n        var n1_str = n1.toString\n        var n2_str = n2.toString\n        for (i <- 0 until max(n1_str.length, n2_str.length)) {\n            var n1_digit = if (i < n1_str.length) n1_str(i).asDigit else 0\n            var n2_digit = if (i < n2_str.length) n2_str(i).asDigit else 0\n            sum += abs(n1_digit - n2_digit)\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += abs(d - (n2 % 10))\n            n2 /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val digitDiffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        digitDiffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val len = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until len) {\n            val d1 = if (i < s1.length) s1(i).asDigit else 0\n            val d2 = if (i < s2.length) s2(i).asDigit else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += d\n        }\n        n = n2\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum -= d\n        }\n        return abs(sum)",
    "        val digits1 = n1.toString.map(_.asDigit).toList\n        val digits2 = n2.toString.map(_.asDigit).toList\n        val diffs = digits1.zip(digits2).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var nn = n\n            while (nn > 0) {\n                val d = nn % 10\n                nn /= 10\n                sum += d * d\n            }\n            sum\n        }\n        digitDistance(n1) - digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += abs(d - (n2 % 10))\n            n2 /= 10\n        }\n        return sum",
    "        var sum = 0\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            abs(d - m % 10) + digitDistance(m)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        return sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i).asDigit else 0\n            val d2 = if (i < s2.length) s2(i).asDigit else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var n1_digits = n1.toString.map(_.asDigit).toList\n        var n2_digits = n2.toString.map(_.asDigit).toList\n        var sum = 0\n        for (i <- 0 until n1_digits.length) {\n            sum += abs(n1_digits(i) - n2_digits(i))\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += abs(d - (n2 % 10))\n            n2 /= 10\n        }\n        sum",
    "        (n1.toString.map(x => x.toString.toInt).sum - n2.toString.map(x => x.toString.toInt).sum).abs",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0 || m > 0) {\n            if (n > 0) {\n                sum += abs(n % 10 - m % 10)\n                n /= 10\n            }\n            if (m > 0) {\n                sum += abs(n % 10 - m % 10)\n                m /= 10\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val l1 = n1.toString.toList.map(_.asDigit)\n        val l2 = n2.toString.toList.map(_.asDigit)\n        val l = l1.zip(l2).map(x => abs(x._1 - x._2))\n        l.sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n = n / 10\n            val d2 = (n2 % 10)\n            sum += abs(d - d2)\n            n2 = n2 / 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(c => c.asDigit)\n        val n2Digits = n2.toString.map(c => c.asDigit)\n        val n1DigitsLength = n1Digits.length\n        val n2DigitsLength = n2Digits.length\n        val maxLength = max(n1DigitsLength, n2DigitsLength)\n        val minLength = min(n1DigitsLength, n2DigitsLength)\n        var sum = 0L\n        for (i <- 0 until minLength) {\n            sum += abs(n1Digits(i) - n2Digits(i))\n        }\n        if (n1DigitsLength > n2DigitsLength) {\n            for (i <- minLength until maxLength) {\n                sum += n1Digits(i)\n            }\n        } else {\n            for (i <- minLength until maxLength) {\n                sum += n2Digits(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n1_str = n1.toString\n        var n2_str = n2.toString\n        while (n1_str.length != n2_str.length) {\n            if (n1_str.length < n2_str.length) n1_str = \"0\" + n1_str\n            else n2_str = \"0\" + n2_str\n        }\n        for (i <- 0 until n1_str.length) {\n            sum += abs(n1_str(i) - n2_str(i))\n        }\n        sum",
    "        val n1Digits = n1.toString.map(c => c.asDigit).toList\n        val n2Digits = n2.toString.map(c => c.asDigit).toList\n        val n1DigitsReversed = n1Digits.reverse\n        val n2DigitsReversed = n2Digits.reverse\n        val n1DigitsReversedPadded = n1DigitsReversed.padTo(n2DigitsReversed.length, 0)\n        val n2DigitsReversedPadded = n2DigitsReversed.padTo(n1DigitsReversed.length, 0)\n        val diffs = n1DigitsReversedPadded.zip(n2DigitsReversedPadded).map(pair => abs(pair._1 - pair._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n1_str = n1.toString\n        var n2_str = n2.toString\n        if (n1_str.length < n2_str.length) {\n            var diff = n2_str.length - n1_str.length\n            for (i <- 0 until diff) {\n                n1_str = \"0\" + n1_str\n            }\n        } else if (n1_str.length > n2_str.length) {\n            var diff = n1_str.length - n2_str.length\n            for (i <- 0 until diff) {\n                n2_str = \"0\" + n2_str\n            }\n        }\n        for (i <- 0 until n1_str.length) {\n            sum += abs(n1_str(i) - n2_str(i))\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        def digitDistance(n : Long) : Long = {\n            val s = n.toString\n            val l = s.length\n            val d = s(0).toString.toInt - s(l - 1).toString.toInt\n            if (l == 1) d\n            else d + digitDistance(s.substring(1, l - 1).toLong)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i) - '0' else 0\n            val d2 = if (i < s2.length) s2(i) - '0' else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n1_copy = n1\n        var n2_copy = n2\n        while (n1_copy != 0 || n2_copy != 0) {\n            sum += abs(n1_copy % 10 - n2_copy % 10)\n            n1_copy /= 10\n            n2_copy /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            var m = n2\n            while (m > 0) {\n                val d2 = m % 10\n                sum += abs(d1 - d2)\n                m /= 10\n            }\n            n /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n != 0) {\n            val d = n % 10\n            n /= 10\n            sum += d\n        }\n        n = n2\n        while (n != 0) {\n            val d = n % 10\n            n /= 10\n            sum -= d\n        }\n        return abs(sum)",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0 || n2_ > 0) {\n            if (n1_ > 0) {\n                sum += abs(n1_ % 10 - n2_ % 10)\n                n1_ /= 10\n            }\n            if (n2_ > 0) {\n                sum += abs(n1_ % 10 - n2_ % 10)\n                n2_ /= 10\n            }\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val zipped = n1Digits.zip(n2Digits)\n        zipped.map(t => abs(t._1 - t._2)).sum",
    "        val digits1 = n1.toString.map(_.toString.toInt)\n        val digits2 = n2.toString.map(_.toString.toInt)\n        val diffs = digits1.zip(digits2).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                val d = m % 10\n                m /= 10\n                sum += d * d\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val digits = n1Digits.zip(n2Digits)\n        digits.map(x => abs(x._1 - x._2)).sum",
    "        val digits1 = n1.toString.map(_.asDigit).toList\n        val digits2 = n2.toString.map(_.asDigit).toList\n        val diffs = digits1.zip(digits2).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        val n1Digits = n1.toString.toList.map(_.asDigit)\n        val n2Digits = n2.toString.toList.map(_.asDigit)\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val r = n / 10\n            abs(d - r) + digitDistance(r)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val n1DigitsSize = n1Digits.size\n        val n2DigitsSize = n2Digits.size\n        val maxSize = max(n1DigitsSize, n2DigitsSize)\n        val minSize = min(n1DigitsSize, n2DigitsSize)\n        var sum = 0\n        for (i <- 0 until minSize) {\n            sum += abs(n1Digits(i) - n2Digits(i))\n        }\n        if (n1DigitsSize > n2DigitsSize) {\n            for (i <- minSize until maxSize) {\n                sum += n1Digits(i)\n            }\n        } else {\n            for (i <- minSize until maxSize) {\n                sum += n2Digits(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit).toList\n        val n2Digits = n2.toString.map(_.asDigit).toList\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val n1DigitsLength = n1Digits.length\n        val n2DigitsLength = n2Digits.length\n        val maxLength = max(n1DigitsLength, n2DigitsLength)\n        var sum = 0\n        for (i <- 0 until maxLength) {\n            val n1Digit = if (i < n1DigitsLength) n1Digits(i) else 0\n            val n2Digit = if (i < n2DigitsLength) n2Digits(i) else 0\n            sum += abs(n1Digit - n2Digit)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            var d1 = n % 10\n            var d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.toList.map(_.toString.toLong)\n        val n2Digits = n2.toString.toList.map(_.toString.toLong)\n        val diffs = n1Digits.zip(n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum"
  ]
}