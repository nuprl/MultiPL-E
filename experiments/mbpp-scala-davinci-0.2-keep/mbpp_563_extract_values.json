{
  "name": "mbpp_563_extract_values",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract values between quotation marks from a string.\n    def extractValues(text : String) : List[String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractValues((\"\"Python\", \"PHP\", \"Java\"\")).equals((List[String](\"Python\", \"PHP\", \"Java\"))));\n    assert(extractValues((\"\"python\",\"program\",\"language\"\")).equals((List[String](\"python\", \"program\", \"language\"))));\n    assert(extractValues((\"\"red\",\"blue\",\"green\",\"yellow\"\")).equals((List[String](\"red\", \"blue\", \"green\", \"yellow\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        var result = List[String]()\n        var start = 0\n        var end = 0\n        var inQuotes = false\n        for (i <- 0 until text.length) {\n            if (text(i) == '\"') {\n                if (inQuotes) {\n                    end = i\n                    result = text.substring(start + 1, end) :: result\n                    inQuotes = false\n                } else {\n                    start = i\n                    inQuotes = true\n                }\n            }\n        }\n        result",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        val values = new ListBuffer[String]\n        for (m <- matches) {\n            values += m.substring(1, m.length - 1)\n        }\n        values.toList",
    "        val pattern = \"\"\"\"(.*?)\"\"\"\".r\n        pattern.findAllIn(text).toList",
    "        val pattern = \"\"\"\\\"(.*?)\\\"\"\"\".r\n        val matches = pattern.findAllIn(text)\n        val result = new ListBuffer[String]\n        for (m <- matches) {\n            result += m.substring(1, m.length - 1)\n        }\n        result.toList",
    "        val pattern = \"\"\"(?<=\")(.*?)(?=\")\"\"\".r\n        pattern.findAllIn(text).toList",
    "        val pattern = \"\"\"\"(.*?)\"\"\"\".r\n        pattern.findAllIn(text).toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        val values = new ListBuffer[String]\n        while (matches.hasNext) {\n            values += matches.group(1)\n        }\n        values.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        pattern.findAllIn(text).toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        val values = new ListBuffer[String]\n        for (m <- matches) values += m.substring(1, m.length - 1)\n        values.toList",
    "        val pattern = \"\"\"(?<=\")(.*?)(?=\")\"\"\".r\n        pattern.findAllIn(text).toList",
    "        val pattern = \"\\\"([^\\\"]*)\\\"\".r\n        pattern.findAllIn(text).toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        var result = List[String]()\n        var start = -1\n        var end = -1\n        for (i <- 0 until text.length) {\n            if (text(i) == '\"') {\n                if (start == -1) start = i\n                else {\n                    end = i\n                    result = result :+ text.substring(start + 1, end)\n                    start = -1\n                }\n            }\n        }\n        result",
    "        val regex = \"\"\"(?<=\")(.*?)(?=\")\"\"\".r\n        regex.findAllIn(text).toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val result = pattern.findAllIn(text).toList\n        result"
  ]
}