{
  "name": "mbpp_247_lps",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.fill(n, n)(0)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (len <- 2 to n) {\n            for (i <- 0 to n - len) {\n                val j = i + len - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n                if (str(i) == str(i + l)) dp(i)(i + l) = 2 + dp(i + 1)(i + l - 1)\n                else dp(i)(i + l) = max(dp(i + 1)(i + l), dp(i)(i + l - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.fill(n, n)(0)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 1 until n) {\n            for (j <- 0 until n - i) {\n                if (str(j) == str(j + i)) dp(j)(j + i) = 2 + dp(j + 1)(j + i - 1)\n                else dp(j)(j + i) = max(dp(j)(j + i - 1), dp(j + 1)(j + i))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.fill(n, n)(0)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 1 until n) {\n            for (j <- 0 until n - i) {\n                if (str(j) == str(j + i)) dp(j)(j + i) = 2 + dp(j + 1)(j + i - 1)\n                else dp(j)(j + i) = max(dp(j)(j + i - 1), dp(j + 1)(j + i))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n; i <- 0 to n - l) {\n            val j = i + l - 1\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (len <- 2 to n) {\n            for (i <- 0 to n - len) {\n                val j = i + len - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (len <- 2 to n) {\n            for (i <- 0 to n - len) {\n                val j = i + len - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 1 until n) {\n            for (j <- 0 until n - i) {\n                val k = j + i\n                if (str(j) == str(k)) dp(j)(k) = 2 + dp(j + 1)(k - 1)\n                else dp(j)(k) = max(dp(j + 1)(k), dp(j)(k - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) dp(i)(i + 1) = if (str(i) == str(i + 1)) 2 else 1\n        for (k <- 3 to n) {\n            for (i <- 0 to n - k) {\n                val j = i + k - 1\n                dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n                if (str(i) == str(j)) dp(i)(j) = max(dp(i)(j), dp(i + 1)(j - 1) + 2)\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.fill(n, n)(0)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.fill(n, n)(0)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                if (str(i) == str(i + k)) dp(i)(i + k) = dp(i + 1)(i + k - 1) + 2\n                else dp(i)(i + k) = max(dp(i)(i + k - 1), dp(i + 1)(i + k))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                if (str(i) == str(i + k)) dp(i)(i + k) = dp(i + 1)(i + k - 1) + 2\n                else dp(i)(i + k) = max(dp(i)(i + k - 1), dp(i + 1)(i + k))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 3 to n) {\n            for (i <- 0 to n - k) {\n                val j = i + k - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        var dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n                val j = i + l\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (len <- 2 to n) {\n            for (i <- 0 until n - len + 1) {\n                val j = i + len - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpop0m2tq0.scala:16)\n\tat Problem.main(tmpop0m2tq0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.fill(n, n)(0)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i)(j - 1), dp(i + 1)(j))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.fill(n, n)(0)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                if (str(i) == str(i + k)) dp(i)(i + k) = 2 + dp(i + 1)(i + k - 1)\n                else dp(i)(i + k) = max(dp(i + 1)(i + k), dp(i)(i + k - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) dp(i)(j) = if (str(i) == str(j)) dp(i + 1)(j - 1) + 2 else max(dp(i + 1)(j), dp(i)(j - 1))\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i)(j - 1), dp(i + 1)(j))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                if (str(i) == str(i + k)) dp(i)(i + k) = 2 + dp(i + 1)(i + k - 1)\n                else dp(i)(i + k) = max(dp(i + 1)(i + k), dp(i)(i + k - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            dp(i)(i + 1) = if (str(i) == str(i + 1)) 2 else 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n                if (str(i) == str(j)) dp(i)(j) = max(dp(i)(j), dp(i + 1)(j - 1) + 2)\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.fill(n, n)(0)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.fill(n, n)(0)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 3 to n) {\n            for (i <- 0 to n - k) {\n                val j = i + k - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.fill(n, n)(0)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}