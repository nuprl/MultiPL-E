{
  "name": "mbpp_470_add_pairwise",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 100\n        }\n        return sum",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        val tup_sum = tup.zipWithIndex.map(x => if (x._2 == tup_len - 1) tup(0) + x._1 else tup(x._2 + 1) + x._1).sum\n        return tup_sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum",
    "        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum",
    "        var sum : Long = 0\n        var tup_str : String = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += tup_str(i).asDigit + tup_str(i + 1).asDigit\n        }\n        return sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum",
    "        var result : Long = 0\n        var tup_str : String = test_tup.toString\n        for (i <- 0 to tup_str.length - 2) {\n            result += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        return result",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        return sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        sum",
    "        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + (tup / 10 % 10)\n            tup /= 100\n        }\n        return sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum",
    "        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum"
  ]
}