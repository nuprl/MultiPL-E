{
  "name": "mbpp_799_left_rotate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    def leftRotate(n : Long, d : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(leftRotate((16l), (2l)) == (64l));\n    assert(leftRotate((10l), (2l)) == (40l));\n    assert(leftRotate((99l), (3l)) == (792l));\n    assert(leftRotate((99l), (3l)) == (792l));\n    assert(leftRotate((1l), (3l)) == (8l));\n    assert(leftRotate((5l), (3l)) == (40l));\n    assert(leftRotate((29l), (3l)) == (232l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val mask = (1 << d) - 1\n        val left = n << d\n        val right = n >> (32 - d)\n        (left | right) & ((1 << 32) - 1)",
    "        val mask = (1L << d) - 1\n        ((n << d) | (n >> (32 - d) & mask))",
    "        val mask = (1 << d) - 1\n        (n << d) | ((n & mask) << (32 - d))",
    "        val mask = (1 << d) - 1\n        val left = n >> (32 - d)\n        val right = n & mask\n        (right << (32 - d)) | left",
    "        val mask = (1 << d) - 1\n        val left = n << d\n        val right = (n & mask) << (32 - d)\n        (left | right) & 0xffffffff",
    "        val r = n >> (32 - d)\n        val l = n << d\n        l | r",
    "        val mask = (1 << d) - 1\n        val left = n << d\n        val right = (n & mask) << (32 - d)\n        (left | right) & 0xFFFFFFFFL",
    "        val mask = (1L << d) - 1\n        val left = n >> (32 - d)\n        val right = n & mask\n        (left << d) | right",
    "        val mask = (1L << d) - 1\n        (n << d) | (n >> (32 - d) & mask)",
    "        val mask = (1 << d) - 1\n        val left = n << d\n        val right = n >> (32 - d)\n        (left | right) & ((1 << 32) - 1)",
    "        val mask = (1 << d) - 1\n        val left = n >> (32 - d)\n        val right = n & mask\n        (right << (32 - d)) | left",
    "        val mask = (1 << d) - 1\n        (n << d) | ((n & mask) << (32 - d))",
    "        val mask = (1L << d) - 1\n        (n << d) | (n >> (32 - d) & mask)",
    "        val mask = (1 << d) - 1\n        val left = n << d\n        val right = n >> (32 - d)\n        (left | right) & ((1 << 32) - 1)",
    "        val mask = (1 << d) - 1\n        (n << d) | ((n >> (32 - d)) & mask)",
    "        val mask = (1 << d) - 1\n        (n << d) | ((n & mask) << (32 - d))",
    "        val mask = (1 << d) - 1\n        val left = n << d\n        val right = (n & mask) << (32 - d)\n        (left | right) & 0xFFFFFFFFL",
    "        val mask = (1 << d) - 1\n        (n << d) | ((n & mask) << (32 - d))",
    "        val mask = (1 << d) - 1\n        val left = n << d\n        val right = n >> (32 - d)\n        (left | right) & ((1 << 32) - 1)",
    "        val mask = (1 << d) - 1\n        val left = n << d\n        val right = n >> (32 - d)\n        (left | right) & 0xFFFFFFFFL"
  ]
}