{
  "name": "mbpp_249_intersection_array",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two arrays.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val intersection = set_nums1.intersect(set_nums2)\n        intersection.toList",
    "        val set = new HashSet[Long]\n        for (num <- array_nums1) set += num\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) if (set.contains(num)) result += num\n        result.toList",
    "        var hash_table = new HashMap[Long, Int]()\n        var intersection_array = new ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (hash_table.contains(num)) {\n                hash_table(num) += 1\n            } else {\n                hash_table(num) = 1\n            }\n        }\n        for (num <- array_nums2) {\n            if (hash_table.contains(num) && hash_table(num) > 0) {\n                hash_table(num) -= 1\n                intersection_array += num\n            }\n        }\n        return intersection_array.toList",
    "        val hash_table = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (hash_table.contains(num)) {\n                hash_table(num) += 1\n            } else {\n                hash_table(num) = 1\n            }\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (hash_table.contains(num) && hash_table(num) > 0) {\n                result += num\n                hash_table(num) -= 1\n            }\n        }\n        result.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val result = new ListBuffer[Long]\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList",
    "        val map = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result",
    "        val intersection = array_nums1.intersect(array_nums2)\n        return intersection",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result",
    "        var intersection = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection = num :: intersection\n            }\n        }\n        return intersection",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        val intersection_list = intersection_set.toList\n        return intersection_list",
    "        val hash_nums1 = new HashMap[Long, Long]()\n        val hash_nums2 = new HashMap[Long, Long]()\n        val intersection = new ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (hash_nums1.contains(num)) {\n                hash_nums1(num) += 1\n            } else {\n                hash_nums1 += (num -> 1)\n            }\n        }\n        for (num <- array_nums2) {\n            if (hash_nums2.contains(num)) {\n                hash_nums2(num) += 1\n            } else {\n                hash_nums2 += (num -> 1)\n            }\n        }\n        for (num <- hash_nums1.keys) {\n            if (hash_nums2.contains(num)) {\n                val count = min(hash_nums1(num), hash_nums2(num))\n                for (i <- 0 until count) {\n                    intersection += num\n                }\n            }\n        }\n        intersection.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList",
    "        val hash_nums1 = HashMap[Long, Int]()\n        val hash_nums2 = HashMap[Long, Int]()\n        val result = ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (hash_nums1.contains(num)) hash_nums1(num) += 1\n            else hash_nums1(num) = 1\n        }\n        for (num <- array_nums2) {\n            if (hash_nums2.contains(num)) hash_nums2(num) += 1\n            else hash_nums2(num) = 1\n        }\n        for (num <- hash_nums1.keys) {\n            if (hash_nums2.contains(num)) {\n                val count = min(hash_nums1(num), hash_nums2(num))\n                for (i <- 0 until count) result += num\n            }\n        }\n        result.toList",
    "        val hash = HashMap[Long, Long]()\n        for (i <- array_nums1) {\n            if (!hash.contains(i)) hash += i -> 1\n            else hash(i) += 1\n        }\n        val result = ListBuffer[Long]()\n        for (i <- array_nums2) {\n            if (hash.contains(i) && hash(i) > 0) {\n                result += i\n                hash(i) -= 1\n            }\n        }\n        result.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList",
    "        var intersection = List[Long]()\n        for (i <- 0 until array_nums1.length) {\n            if (array_nums2.contains(array_nums1(i))) {\n                intersection = intersection :+ array_nums1(i)\n            }\n        }\n        return intersection",
    "        val result = new ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        var intersection_array = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection_array = intersection_array :+ num\n            }\n        }\n        return intersection_array",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList",
    "        val hash_table = new HashMap[Long, Boolean]\n        for (num <- array_nums1) {\n            hash_table.put(num, true)\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (hash_table.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        (array_nums1_set & array_nums2_set).toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        (array_nums1_set & array_nums2_set).toList",
    "        var intersection = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection = num :: intersection\n            }\n        }\n        return intersection",
    "        val intersection = array_nums1.intersect(array_nums2)\n        return intersection",
    "        val map = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        val map = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (!map.contains(num)) map.put(num, 1)\n            else map.put(num, map(num) + 1)\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n                map.put(num, map(num) - 1)\n                if (map(num) == 0) map.remove(num)\n            }\n        }\n        result.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val map = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList",
    "        val hash_map = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (hash_map.contains(num)) hash_map(num) += 1\n            else hash_map(num) = 1\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (hash_map.contains(num)) {\n                result += num\n                hash_map(num) -= 1\n                if (hash_map(num) == 0) hash_map.remove(num)\n            }\n        }\n        result.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList",
    "        val map = new HashMap[Long, Boolean]\n        for (num <- array_nums1) {\n            map.put(num, true)\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        set1.intersect(set2).toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        val hash_table = HashMap[Long, Boolean]()\n        for (num <- array_nums1) {\n            hash_table(num) = true\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (hash_table.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        var intersection = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection = num :: intersection\n            }\n        }\n        intersection",
    "        var result = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                result = result :+ num\n            }\n        }\n        return result",
    "        var intersection = List[Long]()\n        for (i <- 0 until array_nums1.length) {\n            if (array_nums2.contains(array_nums1(i))) {\n                intersection = intersection :+ array_nums1(i)\n            }\n        }\n        return intersection",
    "        val map = new HashMap[Long, Boolean]\n        for (num <- array_nums1) {\n            map(num) = true\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    result += num1\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        for (num <- set1) {\n            if (set2.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val intersection = array_nums1.intersect(array_nums2)\n        return intersection",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList",
    "        val hash_nums1 = HashMap[Long, Int]()\n        val hash_nums2 = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (hash_nums1.contains(num)) hash_nums1(num) += 1\n            else hash_nums1(num) = 1\n        }\n        for (num <- array_nums2) {\n            if (hash_nums2.contains(num)) hash_nums2(num) += 1\n            else hash_nums2(num) = 1\n        }\n        val result = ListBuffer[Long]()\n        for ((num, count) <- hash_nums1) {\n            if (hash_nums2.contains(num)) {\n                val count2 = hash_nums2(num)\n                val min_count = min(count, count2)\n                for (i <- 1 to min_count) result += num\n            }\n        }\n        result.toList",
    "        array_nums1.intersect(array_nums2)",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        var intersection = List[Long]()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    intersection = num1 :: intersection\n                }\n            }\n        }\n        return intersection",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList",
    "        val map = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        val hash_nums1 = new HashMap[Long, Int]()\n        val hash_nums2 = new HashMap[Long, Int]()\n        val intersection = new ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (hash_nums1.contains(num)) hash_nums1(num) += 1\n            else hash_nums1(num) = 1\n        }\n        for (num <- array_nums2) {\n            if (hash_nums2.contains(num)) hash_nums2(num) += 1\n            else hash_nums2(num) = 1\n        }\n        for ((num, count) <- hash_nums1) {\n            if (hash_nums2.contains(num)) {\n                val count2 = hash_nums2(num)\n                for (i <- 1 to min(count, count2)) intersection += num\n            }\n        }\n        intersection.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        set1.intersect(set2).toList",
    "        val map = new HashMap[Long, Boolean]\n        for (num <- array_nums1) {\n            map.put(num, true)\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result += i\n            }\n        }\n        result.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        val hash_table = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (hash_table.contains(num)) hash_table(num) += 1\n            else hash_table(num) = 1\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (hash_table.contains(num) && hash_table(num) > 0) {\n                result += num\n                hash_table(num) -= 1\n            }\n        }\n        result.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList",
    "        val map = new HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val intersection = set_nums1.intersect(set_nums2)\n        intersection.toList",
    "        val map = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        val intersection_array = new ListBuffer[Long]()\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        for (num <- array_nums1_set) {\n            if (array_nums2_set.contains(num)) {\n                intersection_array += num\n            }\n        }\n        intersection_array.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        set1.intersect(set2).toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result += i\n            }\n        }\n        result.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val intersection_array = new ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection_array += num\n            }\n        }\n        intersection_array.toList",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result",
    "        var intersection = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection = intersection :+ num\n            }\n        }\n        return intersection",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList",
    "        val hash_map : HashMap[Long, Long] = new HashMap[Long, Long]()\n        for (num <- array_nums1) {\n            if (hash_map.contains(num)) {\n                hash_map(num) += 1\n            } else {\n                hash_map(num) = 1\n            }\n        }\n        val result : ListBuffer[Long] = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (hash_map.contains(num)) {\n                result += num\n                hash_map(num) -= 1\n                if (hash_map(num) == 0) {\n                    hash_map.remove(num)\n                }\n            }\n        }\n        result.toList",
    "        val hash_nums1 = HashMap[Long, Int]()\n        val hash_nums2 = HashMap[Long, Int]()\n        val result = ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (hash_nums1.contains(num)) hash_nums1(num) += 1\n            else hash_nums1(num) = 1\n        }\n        for (num <- array_nums2) {\n            if (hash_nums2.contains(num)) hash_nums2(num) += 1\n            else hash_nums2(num) = 1\n        }\n        for (num <- hash_nums1.keys) {\n            if (hash_nums2.contains(num)) {\n                val count = min(hash_nums1(num), hash_nums2(num))\n                for (i <- 1 to count) result += num\n            }\n        }\n        result.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set & array_nums2_set\n        intersection_set.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        var result = List[Long]()\n        var map = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result = result :+ num\n                map(num) -= 1\n                if (map(num) == 0) map.remove(num)\n            }\n        }\n        result",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        val intersection = new ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection += num\n            }\n        }\n        intersection.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList",
    "        val intersection = new ListBuffer[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection += i\n            }\n        }\n        intersection.toList",
    "        val intersection = array_nums1.intersect(array_nums2)\n        return intersection",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val intersection = set_nums1.intersect(set_nums2)\n        intersection.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val hash_table = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (hash_table.contains(num)) {\n                hash_table(num) += 1\n            } else {\n                hash_table(num) = 1\n            }\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (hash_table.contains(num)) {\n                result += num\n                hash_table(num) -= 1\n                if (hash_table(num) == 0) {\n                    hash_table -= num\n                }\n            }\n        }\n        result.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        val map = HashMap[Long, Long]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val intersection = set_nums1.intersect(set_nums2)\n        intersection.toList",
    "        val map = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        var intersection : List[Long] = List()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection = intersection :+ num\n            }\n        }\n        return intersection",
    "        val hash_table = new HashMap[Long, Long]()\n        for (num <- array_nums1) {\n            if (hash_table.contains(num)) hash_table(num) += 1\n            else hash_table(num) = 1\n        }\n        val intersection = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (hash_table.contains(num)) {\n                intersection += num\n                hash_table(num) -= 1\n                if (hash_table(num) == 0) hash_table.remove(num)\n            }\n        }\n        intersection.toList",
    "        val map = new HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) {\n                map(num) += 1\n            } else {\n                map(num) = 1\n            }\n        }\n        val result = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n                map(num) -= 1\n                if (map(num) == 0) map.remove(num)\n            }\n        }\n        result.toList",
    "        val hash_table = new HashMap[Long, Boolean]()\n        for (num <- array_nums1) {\n            hash_table(num) = true\n        }\n        val result = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (hash_table.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        set1.intersect(set2).toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        var intersection : List[Long] = List()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection = intersection :+ num\n            }\n        }\n        intersection",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val map = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        val intersection = array_nums1.intersect(array_nums2)\n        return intersection",
    "        val map = HashMap[Long, Long]()\n        array_nums1.foreach(x => {\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        })\n        val result = ListBuffer[Long]()\n        array_nums2.foreach(x => {\n            if (map.contains(x)) {\n                result += x\n                map(x) -= 1\n                if (map(x) == 0) map.remove(x)\n            }\n        })\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until array_nums1.length) {\n            if (array_nums2.contains(array_nums1(i))) {\n                result += array_nums1(i)\n            }\n        }\n        result.toList",
    "        var intersection_array : List[Long] = List()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection_array = i :: intersection_array\n            }\n        }\n        intersection_array",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val hash_nums1 = HashMap[Long, Int]()\n        val hash_nums2 = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (hash_nums1.contains(num)) hash_nums1(num) += 1\n            else hash_nums1(num) = 1\n        }\n        for (num <- array_nums2) {\n            if (hash_nums2.contains(num)) hash_nums2(num) += 1\n            else hash_nums2(num) = 1\n        }\n        val intersection = ListBuffer[Long]()\n        for (num <- hash_nums1.keys) {\n            if (hash_nums2.contains(num)) {\n                val count = min(hash_nums1(num), hash_nums2(num))\n                for (i <- 0 until count) intersection += num\n            }\n        }\n        intersection.toList",
    "        array_nums1.intersect(array_nums2)",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        set1.intersect(set2).toList",
    "        val map = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n                map(num) -= 1\n                if (map(num) == 0) map -= num\n            }\n        }\n        result.toList",
    "        var result : List[Long] = List()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        val hash_map = new HashMap[Long, Boolean]\n        for (num <- array_nums1) {\n            hash_map += (num -> true)\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (hash_map.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        set_nums1.intersect(set_nums2).toList",
    "        val intersection = new ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection += num\n            }\n        }\n        intersection.toList",
    "        var result = new ListBuffer[Long]()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    result += num1\n                }\n            }\n        }\n        return result.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList",
    "        array_nums1.intersect(array_nums2)",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        val hash_map = HashMap[Long, Long]()\n        for (num <- array_nums1) {\n            if (hash_map.contains(num)) {\n                hash_map(num) += 1\n            } else {\n                hash_map(num) = 1\n            }\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (hash_map.contains(num) && hash_map(num) > 0) {\n                result += num\n                hash_map(num) -= 1\n            }\n        }\n        return result.toList",
    "        var intersection = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection = i :: intersection\n            }\n        }\n        return intersection",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList",
    "        val map = HashMap[Long, Int]()\n        array_nums1.foreach(x => {\n            if (map.contains(x)) map(x) += 1\n            else map += x -> 1\n        })\n        val result = ListBuffer[Long]()\n        array_nums2.foreach(x => {\n            if (map.contains(x)) {\n                result += x\n                map(x) -= 1\n                if (map(x) == 0) map -= x\n            }\n        })\n        result.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1 & set2\n        intersection.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList",
    "        val map = new HashMap[Long, Boolean]()\n        for (num <- array_nums1) {\n            map.put(num, true)\n        }\n        val result = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) result += i\n        }\n        result.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        array_nums1.intersect(array_nums2)",
    "        val map = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (!map.contains(num)) map += (num -> 1)\n            else map(num) += 1\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        var intersection : List[Long] = List()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    intersection = intersection :+ num1\n                }\n            }\n        }\n        return intersection",
    "        array_nums1.intersect(array_nums2)",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val map = new HashMap[Long, Long]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) {\n                map(num) += 1\n            } else {\n                map(num) = 1\n            }\n        }\n        val result = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        var intersection = List[Long]()\n        var nums1 = array_nums1\n        var nums2 = array_nums2\n        while (nums1.length > 0 && nums2.length > 0) {\n            if (nums1.head < nums2.head) {\n                nums1 = nums1.tail\n            } else if (nums1.head > nums2.head) {\n                nums2 = nums2.tail\n            } else {\n                intersection = intersection :+ nums1.head\n                nums1 = nums1.tail\n                nums2 = nums2.tail\n            }\n        }\n        return intersection",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        set1.intersect(set2).toList",
    "        val intersection = array_nums1.intersect(array_nums2)\n        return intersection",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val map = new HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) {\n                map(num) += 1\n            } else {\n                map(num) = 1\n            }\n        }\n        val result = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList",
    "        val map = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        var result = new ListBuffer[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result += i\n            }\n        }\n        return result.toList",
    "        val map = HashMap[Long, Boolean]()\n        for (num <- array_nums1) {\n            map(num) = true\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) result = i :: result\n        }\n        return result",
    "        val map = new HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n                map(num) -= 1\n                if (map(num) == 0) map.remove(num)\n            }\n        }\n        result.toList",
    "        array_nums1.intersect(array_nums2)",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result += i\n            }\n        }\n        result.toList",
    "        val hash_nums1 = HashMap[Long, Int]()\n        val hash_nums2 = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (hash_nums1.contains(num)) hash_nums1(num) += 1\n            else hash_nums1(num) = 1\n        }\n        for (num <- array_nums2) {\n            if (hash_nums2.contains(num)) hash_nums2(num) += 1\n            else hash_nums2(num) = 1\n        }\n        val intersection = ListBuffer[Long]()\n        for ((num, count) <- hash_nums1) {\n            if (hash_nums2.contains(num)) {\n                val min_count = min(count, hash_nums2(num))\n                for (i <- 1 to min_count) intersection += num\n            }\n        }\n        intersection.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        set1.intersect(set2).toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList",
    "        val intersection = array_nums1.intersect(array_nums2)\n        return intersection",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        set_nums1.intersect(set_nums2).toList",
    "        val intersection = array_nums1.intersect(array_nums2)\n        intersection",
    "        val map = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (map.contains(num)) {\n                map(num) += 1\n            } else {\n                map(num) = 1\n            }\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        val hash_table = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (hash_table.contains(num)) hash_table(num) += 1\n            else hash_table += (num -> 1)\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (hash_table.contains(num)) {\n                result += num\n                hash_table(num) -= 1\n                if (hash_table(num) == 0) hash_table -= num\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result",
    "        val result = ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) result += num\n        }\n        result.toList",
    "        val map = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n                map(num) -= 1\n                if (map(num) == 0) map.remove(num)\n            }\n        }\n        result.toList",
    "        val map = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        array_nums1.intersect(array_nums2)",
    "        val hash_table = new HashMap[Long, Boolean]()\n        for (num <- array_nums1) {\n            hash_table(num) = true\n        }\n        val result = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (hash_table.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val intersection = set_nums1.intersect(set_nums2)\n        intersection.toList",
    "        val map = new HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val result = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n                map(num) -= 1\n                if (map(num) == 0) map.remove(num)\n            }\n        }\n        result.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        set_nums1.intersect(set_nums2).toList",
    "        val map = new HashMap[Long, Int]()\n        for (i <- array_nums1) {\n            if (!map.contains(i)) map(i) = 1\n        }\n        val list = new ListBuffer[Long]()\n        for (i <- array_nums2) {\n            if (map.contains(i)) {\n                list += i\n                map.remove(i)\n            }\n        }\n        list.toList",
    "        val map = HashMap[Long, Boolean]()\n        for (num <- array_nums1) {\n            map(num) = true\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList"
  ]
}