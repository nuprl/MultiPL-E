{
  "name": "mbpp_249_intersection_array",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two arrays.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val intersection = set_nums1.intersect(set_nums2)\n        intersection.toList",
    "        val set = new HashSet[Long]\n        for (num <- array_nums1) set += num\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) if (set.contains(num)) result += num\n        result.toList",
    "        var hash_table = new HashMap[Long, Int]()\n        var intersection_array = new ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (hash_table.contains(num)) {\n                hash_table(num) += 1\n            } else {\n                hash_table(num) = 1\n            }\n        }\n        for (num <- array_nums2) {\n            if (hash_table.contains(num) && hash_table(num) > 0) {\n                hash_table(num) -= 1\n                intersection_array += num\n            }\n        }\n        return intersection_array.toList",
    "        val hash_table = HashMap[Long, Int]()\n        for (num <- array_nums1) {\n            if (hash_table.contains(num)) {\n                hash_table(num) += 1\n            } else {\n                hash_table(num) = 1\n            }\n        }\n        val result = ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (hash_table.contains(num) && hash_table(num) > 0) {\n                result += num\n                hash_table(num) -= 1\n            }\n        }\n        result.toList",
    "        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList",
    "        val result = new ListBuffer[Long]\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                result += num\n            }\n        }\n        result.toList",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList",
    "        val map = new HashMap[Long, Int]\n        for (num <- array_nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        val result = new ListBuffer[Long]\n        for (num <- array_nums2) {\n            if (map.contains(num) && map(num) > 0) {\n                result += num\n                map(num) -= 1\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result",
    "        val intersection = array_nums1.intersect(array_nums2)\n        return intersection",
    "        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result",
    "        var intersection = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection = num :: intersection\n            }\n        }\n        return intersection",
    "        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        val intersection_list = intersection_set.toList\n        return intersection_list",
    "        val hash_nums1 = new HashMap[Long, Long]()\n        val hash_nums2 = new HashMap[Long, Long]()\n        val intersection = new ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (hash_nums1.contains(num)) {\n                hash_nums1(num) += 1\n            } else {\n                hash_nums1 += (num -> 1)\n            }\n        }\n        for (num <- array_nums2) {\n            if (hash_nums2.contains(num)) {\n                hash_nums2(num) += 1\n            } else {\n                hash_nums2 += (num -> 1)\n            }\n        }\n        for (num <- hash_nums1.keys) {\n            if (hash_nums2.contains(num)) {\n                val count = min(hash_nums1(num), hash_nums2(num))\n                for (i <- 0 until count) {\n                    intersection += num\n                }\n            }\n        }\n        intersection.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList",
    "        val hash_nums1 = HashMap[Long, Int]()\n        val hash_nums2 = HashMap[Long, Int]()\n        val result = ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (hash_nums1.contains(num)) hash_nums1(num) += 1\n            else hash_nums1(num) = 1\n        }\n        for (num <- array_nums2) {\n            if (hash_nums2.contains(num)) hash_nums2(num) += 1\n            else hash_nums2(num) = 1\n        }\n        for (num <- hash_nums1.keys) {\n            if (hash_nums2.contains(num)) {\n                val count = min(hash_nums1(num), hash_nums2(num))\n                for (i <- 0 until count) result += num\n            }\n        }\n        result.toList",
    "        val hash = HashMap[Long, Long]()\n        for (i <- array_nums1) {\n            if (!hash.contains(i)) hash += i -> 1\n            else hash(i) += 1\n        }\n        val result = ListBuffer[Long]()\n        for (i <- array_nums2) {\n            if (hash.contains(i) && hash(i) > 0) {\n                result += i\n                hash(i) -= 1\n            }\n        }\n        result.toList",
    "        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList",
    "        var intersection = List[Long]()\n        for (i <- 0 until array_nums1.length) {\n            if (array_nums2.contains(array_nums1(i))) {\n                intersection = intersection :+ array_nums1(i)\n            }\n        }\n        return intersection"
  ]
}