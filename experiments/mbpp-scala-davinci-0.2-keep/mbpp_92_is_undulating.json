{
  "name": "mbpp_92_is_undulating",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is undulating or not.\n    def isUndulating(n : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isUndulating((1212121l)) == (true));\n    assert(isUndulating((1991l)) == (false));\n    assert(isUndulating((121l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) - x(0)).toList\n        diffs2.forall(x => x == 0)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0) return false\n            if (a % 2 == 1 && b % 2 == 1 && c % 2 == 1) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        var isUndulating = false\n        for (i <- 0 to digits.length - 3) {\n            if (digits(i) % 2 == 0 && digits(i + 1) % 2 == 1 && digits(i + 2) % 2 == 0) isUndulating = true\n            else if (digits(i) % 2 == 1 && digits(i + 1) % 2 == 0 && digits(i + 2) % 2 == 1) isUndulating = true\n        }\n        isUndulating",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._1 - x._2)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val pairs = digits.sliding(2).toList\n        pairs.forall(p => p(0) == p(1) || abs(p(0) - p(1)) == 1)",
    "        val digits = n.toString.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._1 - x._2)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 1 until digits.length - 1) {\n            if (digits(i - 1) == digits(i + 1)) return true\n        }\n        false",
    "        val s = n.toString\n        for (i <- 1 until s.length - 1) {\n            if (s(i - 1) != s(i + 1)) return false\n        }\n        true",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        val diffs2 = diffs.zip(diffs.tail).map(x => x._2 - x._1)\n        diffs2.forall(_ == 0)",
    "        val digits = n.toString.map(x => x.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(x => x < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) % 2 == 0 && digits(i + 1) % 2 == 0 && digits(i + 2) % 2 == 0) return false\n            if (digits(i) % 2 == 1 && digits(i + 1) % 2 == 1 && digits(i + 2) % 2 == 1) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 1 until s.length - 1) {\n            if (s(i - 1) != s(i + 1)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        false",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 1) {\n            if (s(i) == s(i + 1)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) == s(i + 1) || s(i + 1) == s(i + 2) || s(i) == s(i + 2)) return false\n        }\n        return true"
  ]
}