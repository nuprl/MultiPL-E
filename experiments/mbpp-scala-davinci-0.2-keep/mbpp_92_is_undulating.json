{
  "name": "mbpp_92_is_undulating",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is undulating or not.\n    def isUndulating(n : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isUndulating((1212121l)) == (true));\n    assert(isUndulating((1991l)) == (false));\n    assert(isUndulating((121l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) - x(0)).toList\n        diffs2.forall(x => x == 0)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0) return false\n            if (a % 2 == 1 && b % 2 == 1 && c % 2 == 1) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        var isUndulating = false\n        for (i <- 0 to digits.length - 3) {\n            if (digits(i) % 2 == 0 && digits(i + 1) % 2 == 1 && digits(i + 2) % 2 == 0) isUndulating = true\n            else if (digits(i) % 2 == 1 && digits(i + 1) % 2 == 0 && digits(i + 2) % 2 == 1) isUndulating = true\n        }\n        isUndulating",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._1 - x._2)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val pairs = digits.sliding(2).toList\n        pairs.forall(p => p(0) == p(1) || abs(p(0) - p(1)) == 1)",
    "        val digits = n.toString.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._1 - x._2)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 1 until digits.length - 1) {\n            if (digits(i - 1) == digits(i + 1)) return true\n        }\n        false",
    "        val s = n.toString\n        for (i <- 1 until s.length - 1) {\n            if (s(i - 1) != s(i + 1)) return false\n        }\n        true",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        val diffs2 = diffs.zip(diffs.tail).map(x => x._2 - x._1)\n        diffs2.forall(_ == 0)",
    "        val digits = n.toString.map(x => x.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(x => x < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) % 2 == 0 && digits(i + 1) % 2 == 0 && digits(i + 2) % 2 == 0) return false\n            if (digits(i) % 2 == 1 && digits(i + 1) % 2 == 1 && digits(i + 2) % 2 == 1) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 1 until s.length - 1) {\n            if (s(i - 1) != s(i + 1)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        false",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 1) {\n            if (s(i) == s(i + 1)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) == s(i + 1) || s(i + 1) == s(i + 2) || s(i) == s(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0) return false\n            if (a % 2 == 1 && b % 2 == 1 && c % 2 == 1) return false\n        }\n        return true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a != b && b != c && a != c) return true\n        }\n        return false",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        false",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val undulating = digits.sliding(3).map(x => x(0) - x(1) == x(1) - x(2)).toList\n        undulating.forall(x => x)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        return true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a != b && b != c && a != c) return true\n        }\n        false",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.toList.map(_.asDigit)\n        for (i <- 0 to digits.length - 3) {\n            if (digits(i) == digits(i + 2)) return true\n        }\n        return false",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        false",
    "        val digits = n.toString.toList.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit)\n        var prev = digits(0)\n        var prevDiff = 0\n        for (i <- 1 until digits.length) {\n            val diff = digits(i) - prev\n            if (prevDiff != 0 && diff != 0 && diff != prevDiff) return false\n            prev = digits(i)\n            prevDiff = diff\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        return true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0) return false\n            if (a % 2 == 1 && b % 2 == 1 && c % 2 == 1) return false\n        }\n        true",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        if (digits.length < 3) return false\n        for (i <- 1 until digits.length - 1) {\n            if (digits(i - 1) == digits(i + 1)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2)) return false\n        }\n        return true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 1) || s(i + 1) == s(i + 2) || s(i) == s(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit)\n        (0 until digits.length - 2).exists(i => digits(i) % 2 != digits(i + 1) % 2 && digits(i + 1) % 2 != digits(i + 2) % 2)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 1) || s(i + 1) == s(i + 2) || s(i) == s(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        var i = 0\n        while (i < s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n            i += 1\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit)\n        var i = 0\n        while (i < digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2)) return false\n            i += 1\n        }\n        true",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val diffs = digits.zip(digits.tail).map(x => x._1 - x._2)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        for (i <- 1 until digits.length - 1) {\n            if (digits(i - 1) % 2 == 0 && digits(i + 1) % 2 == 0) return false\n            if (digits(i - 1) % 2 == 1 && digits(i + 1) % 2 == 1) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 1 until digits.length - 1) {\n            if (digits(i) != digits(i - 1) && digits(i) != digits(i + 1)) return true\n        }\n        return false",
    "        val s = n.toString\n        for (i <- 1 until s.length - 1) {\n            if (s(i - 1) != s(i + 1)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._1 - x._2).toList\n        val diffs2 = diffs.zip(diffs.tail).map(x => x._1 * x._2).toList\n        diffs2.forall(_ == 1)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0) return false\n            if (a % 2 == 1 && b % 2 == 1 && c % 2 == 1) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) - x(0)).toList\n        diffs2.forall(x => x == 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 2)) return true\n        }\n        false",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) == s(i + 1) || s(i + 1) == s(i + 2) || s(i) == s(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        digits.sliding(3).forall(x => x(0) % 2 == 0 && x(1) % 2 == 1 && x(2) % 2 == 0)",
    "        val digits = n.toString.map(_.asDigit)\n        val diffs = (digits.tail zip digits).map(x => x._1 - x._2)\n        val diffs2 = (diffs.tail zip diffs).map(x => x._1 - x._2)\n        diffs2.forall(x => x == 0)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i).asDigit % 2 == 0 && s(i + 1).asDigit % 2 == 0 && s(i + 2).asDigit % 2 == 0) return false\n            if (s(i).asDigit % 2 == 1 && s(i + 1).asDigit % 2 == 1 && s(i + 2).asDigit % 2 == 1) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        for (i <- 0 to digits.length - 3) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        false",
    "        val digits = n.toString.map(_.asDigit)\n        var last = digits(0)\n        var flag = true\n        for (i <- 1 until digits.length) {\n            if (flag) {\n                if (digits(i) > last) return false\n            } else {\n                if (digits(i) < last) return false\n            }\n            flag = !flag\n            last = digits(i)\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        false",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a == b || b == c || a == c) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ == 1)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val zipped = digits.zip(digits.tail)\n        zipped.forall(x => x._1 % 2 == x._2 % 2)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ > 0) || diffs2.forall(_ < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a != b && b != c && a != c) return true\n        }\n        return false",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            val a = s(i).toString.toInt\n            val b = s(i + 1).toString.toInt\n            val c = s(i + 2).toString.toInt\n            if (a - b == b - c) return true\n        }\n        return false",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val pairs = digits.sliding(2).toList\n        pairs.forall(x => x(0) % 2 == 0 && x(1) % 2 == 1 || x(0) % 2 == 1 && x(1) % 2 == 0)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val pairs = digits.zip(digits.tail)\n        pairs.forall(x => x._1 == x._2 || x._1 + 1 == x._2 || x._1 - 1 == x._2)",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a == b || b == c || a == c) return false\n            if (a < b && b < c) return false\n            if (a > b && b > c) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0) return false\n            if (a % 2 == 1 && b % 2 == 1 && c % 2 == 1) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ > 0)",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val pairs = digits.sliding(2).toList\n        val diffs = pairs.map(x => x(1) - x(0))\n        val diffs2 = diffs.sliding(2).toList\n        diffs2.forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0) return false\n            if (a % 2 == 1 && b % 2 == 1 && c % 2 == 1) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 1 until s.length - 1) {\n            if (s(i - 1) != s(i + 1)) return false\n        }\n        true",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(x => x == 1)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => abs(x(0) - x(1))).toList\n        val diffs2 = diffs.sliding(2).map(x => abs(x(0) - x(1))).toList\n        diffs2.forall(_ == 0)",
    "        val digits = n.toString.map(x => x.asDigit).toList\n        val diffs = digits.sliding(2).map(x => abs(x(0) - x(1))).toList\n        diffs.sliding(2).forall(x => x(0) == x(1))",
    "        val digits = n.toString.toList.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 2)) return true\n        }\n        false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) - x(0)).toList\n        diffs2.forall(_ == 0)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        false",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a != b && b != c && c != a) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        digits.sliding(3).forall(x => x(0) % 2 == 0 && x(1) == 0 && x(2) % 2 == 1)",
    "        var s = n.toString\n        var i = 0\n        while (i < s.length - 2) {\n            if (s(i) == s(i + 2)) return true\n            i += 1\n        }\n        return false",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        var s = n.toString\n        if (s.length < 3) return false\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 1) || s(i + 1) == s(i + 2) || s(i) == s(i + 2)) return false\n        }\n        return true",
    "        val s = n.toString\n        for (i <- 1 until s.length - 1) {\n            if (s(i - 1) == s(i + 1)) return true\n        }\n        false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ == 1)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 1) || s(i + 1) == s(i + 2) || s(i) == s(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        return true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 1) || s(i + 1) == s(i + 2) || s(i) == s(i + 2)) return false\n        }\n        return true",
    "        var s = n.toString\n        var i = 0\n        while (i < s.length - 2) {\n            if (s(i) == s(i + 2)) return true\n            i += 1\n        }\n        return false",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        var i = 0\n        while (i < digits.length - 2) {\n            if (digits(i) == digits(i + 2)) return true\n            i += 1\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 1 until s.length - 1) {\n            if (s(i - 1) != s(i + 1)) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._1 - x._2)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => abs(x(0) - x(1))).toList\n        diffs.sliding(2).forall(x => x(0) == x(1))",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._1 - x._2)\n        diffs.zip(diffs.tail).map(x => x._1 * x._2).forall(_ < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            val a = s(i).toString.toInt\n            val b = s(i + 1).toString.toInt\n            val c = s(i + 2).toString.toInt\n            if (a - b == b - c) return true\n        }\n        false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 2)) return true\n        }\n        return false",
    "        val s = n.toString\n        var i = 0\n        while (i < s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n            i += 1\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) - x(0)).toList\n        diffs2.forall(_ == 0)",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 1 until digits.length - 1) {\n            if (digits(i - 1) == digits(i + 1)) return true\n        }\n        false",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 2)) return false\n        }\n        return true",
    "        val s = n.toString\n        for (i <- 1 until s.length - 1) {\n            if (s(i - 1) == s(i + 1)) return true\n        }\n        return false",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val pairs = digits.sliding(2).toList\n        pairs.forall(pair => pair(0) % 2 == pair(1) % 2)",
    "        val digits = n.toString.map(_.toString.toInt)\n        for (i <- 1 until digits.length - 1) {\n            if (digits(i - 1) == digits(i + 1)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        val diffs2 = diffs.zip(diffs.tail).map(x => x._2 - x._1)\n        diffs2.forall(_ == 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val s = n.toString\n        val l = s.length\n        for (i <- 0 until l - 2) {\n            if (s(i) == s(i + 1)) return false\n            if (s(i) > s(i + 1) && s(i + 1) > s(i + 2)) return false\n            if (s(i) < s(i + 1) && s(i + 1) < s(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        val diffs2 = diffs.zip(diffs.tail).map(x => x._2 - x._1)\n        diffs2.forall(_ == 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ == 1)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).toInt - 48\n            val b = s(i + 1).toInt - 48\n            val c = s(i + 2).toInt - 48\n            if (a == b && b == c) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a != b && b != c && a != c) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val diffs = digits.zip(digits.tail).map(p => p._2 - p._1)\n        diffs.zip(diffs.tail).forall(p => p._1 * p._2 < 0)",
    "        var s = n.toString\n        var i = 0\n        while (i < s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n            i += 1\n        }\n        return true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit)\n        var i = 0\n        while (i < digits.length - 2) {\n            if (digits(i) == digits(i + 2)) {\n                if (digits(i) != digits(i + 1)) return true\n            }\n            i += 1\n        }\n        false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ > 0)",
    "        var s = n.toString\n        var i = 0\n        while (i < s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n            i += 1\n        }\n        return true",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).toString.toInt\n            val b = s(i + 1).toString.toInt\n            val c = s(i + 2).toString.toInt\n            if (a - b == b - c) return true\n        }\n        false",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ == 1)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        var s = n.toString\n        var i = 0\n        while (i < s.length - 2) {\n            if (s(i) == s(i + 2)) {\n                return true\n            }\n            i += 1\n        }\n        return false",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).map(x => x._2 - x._1).forall(_ == 0)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        false",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val digits = n.toString.map(_ - '0')\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val pairs = digits.zip(digits.tail)\n        pairs.forall(p => p._1 % 2 == 0 && p._2 % 2 == 1 || p._1 % 2 == 1 && p._2 % 2 == 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0) return false\n            if (a % 2 == 1 && b % 2 == 1 && c % 2 == 1) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ > 0) || diffs2.forall(_ < 0)",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0) return false\n            if (a % 2 == 1 && b % 2 == 1 && c % 2 == 1) return false\n        }\n        true",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        val diffs2 = diffs.zip(diffs.tail).map(x => x._2 - x._1)\n        diffs2.forall(_ == 0)",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 1 until digits.length - 1) {\n            if (digits(i - 1) - digits(i) != digits(i) - digits(i + 1)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = (digits.tail zip digits).map(x => abs(x._1 - x._2))\n        diffs.distinct.size == 1",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(x => x == 1 || x == -1)",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ > 0)",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.forall(x => x == 0 || x == 1 || x == -1)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        var s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(x => x.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ > 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(x => x.asDigit).toList\n        val diffs = digits.sliding(2).map(x => abs(x(0) - x(1))).toList\n        diffs.sliding(2).forall(x => x(0) == x(1))",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        false",
    "        var s = n.toString\n        for (i <- 1 until s.length - 1) {\n            if (s(i) != s(i - 1) && s(i) != s(i + 1)) return true\n        }\n        false",
    "        val digits = n.toString.toList.map(_.asDigit)\n        if (digits.length < 3) return false\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2)) return false\n            if (digits(i) > digits(i + 1) && digits(i + 1) < digits(i + 2)) return false\n            if (digits(i) < digits(i + 1) && digits(i + 1) > digits(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val zipped = digits.zip(digits.tail)\n        zipped.forall(x => x._1 % 2 == 0 && x._2 % 2 == 1 || x._1 % 2 == 1 && x._2 % 2 == 0)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ < 0)",
    "        var s = n.toString\n        var i = 0\n        while (i < s.length - 2) {\n            if (s(i) == s(i + 2)) return true\n            i += 1\n        }\n        return false"
  ]
}