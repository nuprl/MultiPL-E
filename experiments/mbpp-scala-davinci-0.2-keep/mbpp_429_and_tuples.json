{
  "name": "mbpp_429_and_tuples",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            and_tup += (bit1 * bit2) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup_and = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                tup_and += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return tup_and",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res |= 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            if (i < 31) res <<= 1\n            i += 1\n        }\n        return res",
    "        var test_tup1_str = test_tup1.toString\n        var test_tup2_str = test_tup2.toString\n        var test_tup1_arr = test_tup1_str.toCharArray\n        var test_tup2_arr = test_tup2_str.toCharArray\n        var result_arr = new Array[Char](test_tup1_arr.length)\n        for (i <- 0 until test_tup1_arr.length) {\n            if (test_tup1_arr(i) == test_tup2_arr(i)) result_arr(i) = '1'\n            else result_arr(i) = '0'\n        }\n        var result = result_arr.mkString\n        result.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result = result * 10 + (tup1(i) & tup2(i))\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 != 0) {\n            if(((tup1 & 1) == 1) && ((tup2 & 1) == 1)) {\n                result += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 64) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup += 1\n            }\n            and_tup <<= 1\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        and_tup >>= 1\n        return and_tup",
    "        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return and_tup",
    "        var test_tup1_list = test_tup1.toString.toList\n        var test_tup2_list = test_tup2.toString.toList\n        var result = 0L\n        for (i <- 0 until test_tup1_list.length) {\n            if (test_tup1_list(i) == test_tup2_list(i)) {\n                result = result * 10 + test_tup1_list(i).toString.toLong\n            }\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 64) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i : Int = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result |= (1 << i)\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup = and_tup | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(2, count).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            count += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var t1 = tup1 % 10\n            var t2 = tup2 % 10\n            if (t1 == 1 && t2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toLong)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toLong)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            result = result * 10 + (tup1(i) & tup2(i))\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2 == 1) && (tup2 % 2 == 1)) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result += tup1(i) * pow(10, i).toInt\n            result += tup2(i) * pow(10, i).toInt\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                and_tup += pow(10, i).toInt\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup = and_tup + ((tup1 % 10) * (tup2 % 10) * pow(10, i).toLong)\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i = i + 1\n        }\n        and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += ((tup1 % 10) & (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        val tup1 = test_tup1.toBinaryString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toBinaryString.toList.map(_.asDigit)\n        val tup_length = max(tup1.length, tup2.length)\n        val tup1_padded = tup1.padTo(tup_length, 0)\n        val tup2_padded = tup2.padTo(tup_length, 0)\n        val result = for (i <- 0 until tup_length) yield {\n            if (tup1_padded(i) == 1 && tup2_padded(i) == 1) 1 else 0\n        }\n        result.reverse.mkString.toLong",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var count : Int = 0\n        while (tup1 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, count).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            count += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while(tup1 > 0) {\n            and_tup += ((tup1 % 10) & (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 != 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result |= 1\n            }\n            result <<= 1\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        result >>= 1\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) result |= 1\n            result <<= 1\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        result >>= 1\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var t1 = tup1 % 10\n            var t2 = tup2 % 10\n            if (t1 == 1 && t2 == 1) {\n                result = result + pow(10, i).toLong\n            }\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i = i + 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong",
    "        val tup1 = test_tup1.toString.toList.map(_.toString.toLong)\n        val tup2 = test_tup2.toString.toList.map(_.toString.toLong)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.foldLeft(0L)((x, y) => x * 10 + y)",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var test_tup1_list : List[Long] = List()\n        var test_tup2_list : List[Long] = List()\n        var result : Long = 0\n        var i : Long = 0\n        while(test_tup1 != 0) {\n            test_tup1_list = (test_tup1 % 10) :: test_tup1_list\n            test_tup1 /= 10\n        }\n        while(test_tup2 != 0) {\n            test_tup2_list = (test_tup2 % 10) :: test_tup2_list\n            test_tup2 /= 10\n        }\n        while(i < test_tup1_list.length) {\n            result += (test_tup1_list(i.toInt) & test_tup2_list(i.toInt)) * pow(10, i).toLong\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(2, count).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            count += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            and_tup = and_tup | (bit1 & bit2)\n            and_tup = and_tup << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        and_tup = and_tup >> 1\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 64) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res : Long = 0\n        var i = 0\n        while (tup1 > 0 || tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                res += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return res",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if (((tup1 & 1) == 1) && ((tup2 & 1) == 1)) result += (1 << i)\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var tup3 = new ArrayBuffer[Int]()\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) == 1 && tup2(i) == 1) tup3 += 1\n            else tup3 += 0\n        }\n        return tup3.mkString.toLong",
    "        var result = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result = result | (1L << i)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 % 10) == 1 && (tup2 % 10) == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) res += pow(2, i).toLong\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return res",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup = and_tup + (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i += 1\n        }\n        and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (tup1 != 0) {\n            result += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var result = 0\n        for (i <- 0 to tup1.length - 1) {\n            result += pow(10, i).toInt * (tup1(i) & tup2(i))\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Long = 0\n        while (tup1 > 0 || tup2 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 63) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup : Long = 0\n        var i = 0\n        while (i < 64) {\n            and_tup = and_tup | ((tup1 & 1) & (tup2 & 1))\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            and_tup = and_tup << 1\n            i += 1\n        }\n        and_tup = and_tup >> 1\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            i += 1\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            result += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var test_tup1_bin = test_tup1.toBinaryString\n        var test_tup2_bin = test_tup2.toBinaryString\n        var test_tup1_bin_arr = test_tup1_bin.toCharArray\n        var test_tup2_bin_arr = test_tup2_bin.toCharArray\n        var and_tup = new StringBuilder\n        for (i <- 0 to test_tup1_bin_arr.length - 1) {\n            if (test_tup1_bin_arr(i) == '1' && test_tup2_bin_arr(i) == '1') {\n                and_tup.append(\"1\")\n            } else {\n                and_tup.append(\"0\")\n            }\n        }\n        and_tup.toString.toLong",
    "        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (i < 64) {\n            var tup1_bit = tup1 & 1\n            var tup2_bit = tup2 & 1\n            if (tup1_bit == 1 && tup2_bit == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10 == 1) && (tup2 % 10 == 1)) {\n                and_tup += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val and_tup = (tup1 zip tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while(tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            result += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += ((tup1 % 10) & (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var tup1_bit = tup1 % 10\n            var tup2_bit = tup2 % 10\n            if (tup1_bit == 1 && tup2_bit == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var and_tup = new ArrayBuffer[Int]()\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) == 1 && tup2(i) == 1) and_tup += 1\n            else and_tup += 0\n        }\n        and_tup.mkString.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) result += pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var t1 = tup1 % 10\n            var t2 = tup2 % 10\n            if(t1 == 1 && t2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val result = tup1.zip(tup2).map(x => x._1 & x._2)\n        result.mkString.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val and_tup = (tup1 zip tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var result : Long = 0\n        var i : Int = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2 == 1) && (tup2 % 2 == 1)) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (i < 64) {\n            if (((tup1 & 1) == 1) && ((tup2 & 1) == 1)) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.foldLeft(0)((x, y) => x * 10 + y)",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        result = result >> 1\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10 == 1) && (tup2 % 10 == 1)) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 : List[Long] = List()\n        var tup2 : List[Long] = List()\n        var result : List[Long] = List()\n        var temp1 : Long = test_tup1\n        var temp2 : Long = test_tup2\n        while (temp1 != 0) {\n            tup1 = (temp1 % 10) :: tup1\n            temp1 /= 10\n        }\n        while (temp2 != 0) {\n            tup2 = (temp2 % 10) :: tup2\n            temp2 /= 10\n        }\n        for (i <- 0 until min(tup1.length, tup2.length)) {\n            result = (tup1(i) & tup2(i)) :: result\n        }\n        var ans : Long = 0\n        for (i <- 0 until result.length) {\n            ans += result(i) * pow(10, i).toLong\n        }\n        ans",
    "        val tup1 = test_tup1.toString.split(\"\").map(x => x.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(x => x.toInt).toList\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2).mkString(\"\").toLong\n        return and_tup",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                and_tup = and_tup | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            and_tup = and_tup << 1\n            i += 1\n        }\n        return and_tup >> 1",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup3 = 0L\n        var i = 0\n        while (i < 64) {\n            var tup1_bit = tup1 & 1\n            var tup2_bit = tup2 & 1\n            tup3 = tup3 | (tup1_bit & tup2_bit)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return tup3",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val result = tup1.zip(tup2).map(x => x._1 & x._2).mkString(\"\")\n        return result.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n        }\n        return result >> 1",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 2) * (tup2 % 2) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            tup1 /= 2\n            tup2 /= 2\n            result += (bit1 & bit2) * pow(2, i).toLong\n            i += 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result += tup1(i) * pow(10, i).toInt\n            result += tup2(i) * pow(10, i).toInt\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                and_tup = and_tup | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            and_tup = and_tup << 1\n            i += 1\n        }\n        and_tup = and_tup >> 1\n        return and_tup",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            if(tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            var tup1_bit : Long = tup1 % 2\n            var tup2_bit : Long = tup2 % 2\n            if (tup1_bit == 1 && tup2_bit == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 = tup1 / 2\n            tup2 = tup2 / 2\n            i += 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 != 0) {\n            result += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result = result + pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val tup3 = new ArrayBuffer[Int]()\n        for (i <- 0 until tup1.length) {\n            tup3 += tup1(i) & tup2(i)\n        }\n        tup3.mkString.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                res += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return res",
    "        var result = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            var temp = tup1 % 10\n            tup1 /= 10\n            var temp2 = tup2 % 10\n            tup2 /= 10\n            if (temp == 1 && temp2 == 1) {\n                result = result * 10 + 1\n            }\n            else {\n                result = result * 10\n            }\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) result = result | (1L << i)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i : Long = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = ArrayBuffer[Long]()\n        var tup2 = ArrayBuffer[Long]()\n        var tup3 = ArrayBuffer[Long]()\n        var tup4 = ArrayBuffer[Long]()\n        var tup5 = ArrayBuffer[Long]()\n        var tup6 = ArrayBuffer[Long]()\n        var tup7 = ArrayBuffer[Long]()\n        var tup8 = ArrayBuffer[Long]()\n        var tup9 = ArrayBuffer[Long]()\n        var tup10 = ArrayBuffer[Long]()\n        var tup11 = ArrayBuffer[Long]()\n        var tup12 = ArrayBuffer[Long]()\n        var tup13 = ArrayBuffer[Long]()\n        var tup14 = ArrayBuffer[Long]()\n        var tup15 = ArrayBuffer[Long]()\n        var tup16 = ArrayBuffer[Long]()\n        var tup17 = ArrayBuffer[Long]()\n        var tup18 = ArrayBuffer[Long]()\n        var tup19 = ArrayBuffer[Long]()\n        var tup20 = ArrayBuffer[Long]()\n        var tup21 = ArrayBuffer[Long]()\n        var tup22 = ArrayBuffer[Long]()\n        var tup23 = ArrayBuffer[Long]()\n        var tup24 = ArrayBuffer[Long]()\n        var tup25 = ArrayBuffer[Long]()\n        var tup26 = ArrayBuffer[Long]()\n        var tup27 = ArrayBuffer[Long]()\n        var tup28 = ArrayBuffer[Long]()\n        var tup29 = ArrayBuffer[Long]()\n        var tup30 = ArrayBuffer[Long]()\n        var tup31 = ArrayBuffer[Long]()\n        var tup32 = ArrayBuffer[Long]()\n        var tup33 = ArrayBuffer[Long]()\n        var tup34 = ArrayBuffer[Long]()\n        var tup35 = ArrayBuffer[Long]()\n        var tup36 = ArrayBuffer[Long]()\n        var tup37 = ArrayBuffer[Long]()\n        var tup38 = ArrayBuffer[Long]()\n        var tup39 = ArrayBuffer[Long]()\n        var tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) result += pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            if (i < 31) {\n                result = result << 1\n            }\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var result : Long = 0\n        var i : Int = 0\n        while (tup1 != 0) {\n            var bit1 : Long = tup1 & 1\n            var bit2 : Long = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 = test_tup1.toBinaryString\n        var tup2 = test_tup2.toBinaryString\n        var tup1_len = tup1.length\n        var tup2_len = tup2.length\n        var max_len = max(tup1_len, tup2_len)\n        var min_len = min(tup1_len, tup2_len)\n        var diff_len = max_len - min_len\n        if (tup1_len > tup2_len) {\n            for (i <- 0 until diff_len) {\n                tup2 = \"0\" + tup2\n            }\n        }\n        else {\n            for (i <- 0 until diff_len) {\n                tup1 = \"0\" + tup1\n            }\n        }\n        for (i <- 0 until max_len) {\n            if (tup1(i) == '1' && tup2(i) == '1') {\n                result = result + pow(2, max_len - i - 1).toLong\n            }\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result >> 1",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val result = tup1.zip(tup2).map(x => x._1 & x._2)\n        result.mkString.toLong",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            var digit1 : Long = tup1 % 10\n            var digit2 : Long = tup2 % 10\n            if (digit1 == 1 && digit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toLong)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toLong)\n        var and_tup = List[Long]()\n        for (i <- 0 until tup1.length) {\n            and_tup = and_tup :+ (tup1(i) & tup2(i))\n        }\n        and_tup.mkString.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                res += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        res",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result += tup1(i) * pow(10, i).toInt\n            result += tup2(i) * pow(10, i).toInt\n        }\n        return result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val result = tup1.zip(tup2).map(x => x._1 & x._2).mkString(\"\")\n        return result.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result |= 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            result <<= 1\n        }\n        result >>= 1\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i : Int = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while(tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var result = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result |= 1\n            result <<= 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        result >>= 1\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            if (bit1 == 1 && bit2 == 1) result = result | (1 << i)\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n            i += 1\n        }\n        result = result >> 1\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 != 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                and_tup = and_tup | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2 == 1) && (tup2 % 2 == 1)) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, count).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            count += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res = res | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return res",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            if (i < 31) result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result"
  ]
}