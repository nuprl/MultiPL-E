{
  "name": "mbpp_429_and_tuples",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            and_tup += (bit1 * bit2) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup_and = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                tup_and += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return tup_and",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res |= 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            if (i < 31) res <<= 1\n            i += 1\n        }\n        return res",
    "        var test_tup1_str = test_tup1.toString\n        var test_tup2_str = test_tup2.toString\n        var test_tup1_arr = test_tup1_str.toCharArray\n        var test_tup2_arr = test_tup2_str.toCharArray\n        var result_arr = new Array[Char](test_tup1_arr.length)\n        for (i <- 0 until test_tup1_arr.length) {\n            if (test_tup1_arr(i) == test_tup2_arr(i)) result_arr(i) = '1'\n            else result_arr(i) = '0'\n        }\n        var result = result_arr.mkString\n        result.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result = result * 10 + (tup1(i) & tup2(i))\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 != 0) {\n            if(((tup1 & 1) == 1) && ((tup2 & 1) == 1)) {\n                result += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return and_tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 64) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup += 1\n            }\n            and_tup <<= 1\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        and_tup >>= 1\n        return and_tup",
    "        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return and_tup",
    "        var test_tup1_list = test_tup1.toString.toList\n        var test_tup2_list = test_tup2.toString.toList\n        var result = 0L\n        for (i <- 0 until test_tup1_list.length) {\n            if (test_tup1_list(i) == test_tup2_list(i)) {\n                result = result * 10 + test_tup1_list(i).toString.toLong\n            }\n        }\n        return result"
  ]
}